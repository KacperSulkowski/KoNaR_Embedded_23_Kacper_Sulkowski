
KoNaR_zaliczenie_Kacper_Sulkowski.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800c318  0800c318  0001c318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e8  0800c7e8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f0  0800c7f0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001d4  0800c9cc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800c9cc  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015140  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a62  00000000  00000000  00035387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5e  00000000  00000000  00039188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284e5  00000000  00000000  0003a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ac7  00000000  00000000  000625cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f778d  00000000  00000000  00079092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006904  00000000  00000000  00170820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00177124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c300 	.word	0x0800c300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c300 	.word	0x0800c300

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:


//CALLBACKS

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13)
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001000:	d109      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x26>
	{
		button_pushed=1;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_GPIO_EXTI_Callback+0x34>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
		button_push_counter++;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_GPIO_EXTI_Callback+0x38>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_GPIO_EXTI_Callback+0x38>)
 8001014:	701a      	strb	r2, [r3, #0]
	}
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001f0 	.word	0x200001f0
 8001028:	200001f2 	.word	0x200001f2

0800102c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
	{
		//placeholder
	}
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	if(htim==&htim4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		hts221_read_ready=true;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
	}
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000334 	.word	0x20000334
 8001068:	200001f1 	.word	0x200001f1

0800106c <timers_init>:


// Timers handling functions

void timers_init()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2); //inicjalizacja timera
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <timers_init+0x24>)
 8001072:	f004 f9af 	bl	80053d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);//inicjalizacja w trybie IR
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <timers_init+0x28>)
 8001078:	f004 fa14 	bl	80054a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //inicjalizacja generatora PWM
 800107c:	2100      	movs	r1, #0
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <timers_init+0x24>)
 8001080:	f004 fb2e 	bl	80056e0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,tim2_ARR/2); //wypełnienie 50%
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <timers_init+0x24>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	224c      	movs	r2, #76	; 0x4c
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002e8 	.word	0x200002e8
 8001094:	20000334 	.word	0x20000334

08001098 <tx_button_pushed_UART_alert>:


//Button handling functions

void tx_button_pushed_UART_alert()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	snprintf((char*)buffer_button_UART, sizeof(buffer_button_UART), "ALLERT: BUTTON PUSHED!!! Counter: %u\n\r",button_push_counter);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <tx_button_pushed_UART_alert+0x2c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <tx_button_pushed_UART_alert+0x30>)
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <tx_button_pushed_UART_alert+0x34>)
 80010a8:	f007 fc56 	bl	8008958 <sniprintf>
	HAL_UART_Transmit_IT(&huart2,  buffer_button_UART,strlen((char*)buffer_button_UART));
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <tx_button_pushed_UART_alert+0x34>)
 80010ae:	f7ff f8df 	bl	8000270 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <tx_button_pushed_UART_alert+0x34>)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <tx_button_pushed_UART_alert+0x38>)
 80010bc:	f005 fbe2 	bl	8006884 <HAL_UART_Transmit_IT>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001f2 	.word	0x200001f2
 80010c8:	0800c318 	.word	0x0800c318
 80010cc:	200001f4 	.word	0x200001f4
 80010d0:	20000380 	.word	0x20000380

080010d4 <hts221_read>:


//HTS221 handling functions

void hts221_read(uint8_t address,uint8_t* dest, uint8_t size)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, dest, size, HAL_MAX_DELAY);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	9102      	str	r1, [sp, #8]
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	21be      	movs	r1, #190	; 0xbe
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <hts221_read+0x38>)
 80010fe:	f001 fc59 	bl	80029b4 <HAL_I2C_Mem_Read>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000294 	.word	0x20000294

08001110 <hts221_write>:
{
	HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, dest, size);
}

void hts221_write(uint8_t address, uint8_t val)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af04      	add	r7, sp, #16
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &val, sizeof(val), HAL_MAX_DELAY);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29a      	uxth	r2, r3
 8001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21be      	movs	r1, #190	; 0xbe
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <hts221_write+0x34>)
 8001138:	f001 fb28 	bl	800278c <HAL_I2C_Mem_Write>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000294 	.word	0x20000294

08001148 <hts221_check_ID>:

void hts221_check_ID()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t WHO_I_AM=0;
 800114e:	2300      	movs	r3, #0
 8001150:	70fb      	strb	r3, [r7, #3]

	const char* str = "HTS221 Connected!\n\r";
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <hts221_check_ID+0x40>)
 8001154:	607b      	str	r3, [r7, #4]

	hts221_read(HTS221_WHO_AM_I, &WHO_I_AM, 1);
 8001156:	1cfb      	adds	r3, r7, #3
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	200f      	movs	r0, #15
 800115e:	f7ff ffb9 	bl	80010d4 <hts221_read>

	if(WHO_I_AM==HTS221_I2C_ID)
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	2bbc      	cmp	r3, #188	; 0xbc
 8001166:	d10a      	bne.n	800117e <hts221_check_ID+0x36>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str),HAL_MAX_DELAY);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f881 	bl	8000270 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <hts221_check_ID+0x44>)
 800117a:	f005 faf9 	bl	8006770 <HAL_UART_Transmit>
	}
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	0800c340 	.word	0x0800c340
 800118c:	20000380 	.word	0x20000380

08001190 <hts221_tmp_interpol_init>:

void hts221_tmp_interpol_init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t T0_degCx8=0;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint8_t T1_degCx8=0;
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
	uint8_t T1_T0_MSBx8=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	717b      	strb	r3, [r7, #5]

	hts221_read(HTS221_T0_OUT_H, &buffer_tmp[1], 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4932      	ldr	r1, [pc, #200]	; (8001270 <hts221_tmp_interpol_init+0xe0>)
 80011a6:	203d      	movs	r0, #61	; 0x3d
 80011a8:	f7ff ff94 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_T0_OUT_L, &buffer_tmp[0], 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4931      	ldr	r1, [pc, #196]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011b0:	203c      	movs	r0, #60	; 0x3c
 80011b2:	f7ff ff8f 	bl	80010d4 <hts221_read>
	T0_OUT=((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <hts221_tmp_interpol_init+0xe8>)
 80011cc:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_T1_OUT_H, &buffer_tmp[1], 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	4927      	ldr	r1, [pc, #156]	; (8001270 <hts221_tmp_interpol_init+0xe0>)
 80011d2:	203f      	movs	r0, #63	; 0x3f
 80011d4:	f7ff ff7e 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_T1_OUT_L, &buffer_tmp[0], 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	4926      	ldr	r1, [pc, #152]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011dc:	203e      	movs	r0, #62	; 0x3e
 80011de:	f7ff ff79 	bl	80010d4 <hts221_read>
	T1_OUT=((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <hts221_tmp_interpol_init+0xe4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <hts221_tmp_interpol_init+0xec>)
 80011f8:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_T0_degC_x8, &T0_degCx8, 1);
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	2032      	movs	r0, #50	; 0x32
 8001202:	f7ff ff67 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_T1_degC_x8, &T1_degCx8, 1);
 8001206:	1dbb      	adds	r3, r7, #6
 8001208:	2201      	movs	r2, #1
 800120a:	4619      	mov	r1, r3
 800120c:	2033      	movs	r0, #51	; 0x33
 800120e:	f7ff ff61 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_T1_T0_MSB_x8, &T1_T0_MSBx8, 1);
 8001212:	1d7b      	adds	r3, r7, #5
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	2035      	movs	r0, #53	; 0x35
 800121a:	f7ff ff5b 	bl	80010d4 <hts221_read>

	T0_degC=(T0_degCx8 + ((T1_T0_MSBx8 & 0x03)<<8))/8.f;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	461a      	mov	r2, r3
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800122a:	4413      	add	r3, r2
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <hts221_tmp_interpol_init+0xf0>)
 800123e:	edc3 7a00 	vstr	s15, [r3]
	T1_degC=(T1_degCx8 + ((T1_T0_MSBx8 & 0x0C)<<6))/8.f;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	461a      	mov	r2, r3
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	019b      	lsls	r3, r3, #6
 800124a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800124e:	4413      	add	r3, r2
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001258:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <hts221_tmp_interpol_init+0xf4>)
 8001262:	edc3 7a00 	vstr	s15, [r3]

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000275 	.word	0x20000275
 8001274:	20000274 	.word	0x20000274
 8001278:	2000027a 	.word	0x2000027a
 800127c:	2000027c 	.word	0x2000027c
 8001280:	20000280 	.word	0x20000280
 8001284:	20000284 	.word	0x20000284

08001288 <hts221_hmdt_interpol_init>:

void hts221_hmdt_interpol_init()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint8_t H0_rHx2=0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint8_t H1_rHx2=0;
 8001292:	2300      	movs	r3, #0
 8001294:	71bb      	strb	r3, [r7, #6]

	hts221_read(HTS221_H0_OUT_H, &buffer_hmdt[1], 1);
 8001296:	2201      	movs	r2, #1
 8001298:	4929      	ldr	r1, [pc, #164]	; (8001340 <hts221_hmdt_interpol_init+0xb8>)
 800129a:	2037      	movs	r0, #55	; 0x37
 800129c:	f7ff ff1a 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_H0_OUT_L, &buffer_hmdt[0], 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	4928      	ldr	r1, [pc, #160]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012a4:	2036      	movs	r0, #54	; 0x36
 80012a6:	f7ff ff15 	bl	80010d4 <hts221_read>
	H0_OUT=((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0];
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <hts221_hmdt_interpol_init+0xc0>)
 80012c0:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_H1_OUT_H, &buffer_hmdt[1], 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	491e      	ldr	r1, [pc, #120]	; (8001340 <hts221_hmdt_interpol_init+0xb8>)
 80012c6:	203b      	movs	r0, #59	; 0x3b
 80012c8:	f7ff ff04 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_H1_OUT_L, &buffer_hmdt[0], 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	491d      	ldr	r1, [pc, #116]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012d0:	203a      	movs	r0, #58	; 0x3a
 80012d2:	f7ff feff 	bl	80010d4 <hts221_read>
	H1_OUT=((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0];
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <hts221_hmdt_interpol_init+0xbc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <hts221_hmdt_interpol_init+0xc4>)
 80012ec:	801a      	strh	r2, [r3, #0]



	hts221_read(HTS221_H0_rH_x2, &H0_rHx2, 1);
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	2201      	movs	r2, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	2030      	movs	r0, #48	; 0x30
 80012f6:	f7ff feed 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_H1_rH_x2, &H1_rHx2, 1);
 80012fa:	1dbb      	adds	r3, r7, #6
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	2031      	movs	r0, #49	; 0x31
 8001302:	f7ff fee7 	bl	80010d4 <hts221_read>

	H0_rH=H0_rHx2/2.f;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001310:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <hts221_hmdt_interpol_init+0xc8>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
	H1_rH=H1_rHx2/2.f;
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <hts221_hmdt_interpol_init+0xcc>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000279 	.word	0x20000279
 8001344:	20000278 	.word	0x20000278
 8001348:	20000288 	.word	0x20000288
 800134c:	2000028a 	.word	0x2000028a
 8001350:	2000028c 	.word	0x2000028c
 8001354:	20000290 	.word	0x20000290

08001358 <hts221_init>:

void hts221_init()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	hts221_check_ID();
 800135c:	f7ff fef4 	bl	8001148 <hts221_check_ID>

	hts221_write(HTS221_CTRL_REG1, HTS221_PD_ON | HTS221_BDU_ON |HTS221_ODR_12HZ);
 8001360:	2187      	movs	r1, #135	; 0x87
 8001362:	2020      	movs	r0, #32
 8001364:	f7ff fed4 	bl	8001110 <hts221_write>

	hts221_tmp_interpol_init();
 8001368:	f7ff ff12 	bl	8001190 <hts221_tmp_interpol_init>

	hts221_hmdt_interpol_init();
 800136c:	f7ff ff8c 	bl	8001288 <hts221_hmdt_interpol_init>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <hts221_data_read>:


void hts221_data_read()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	hts221_read(HTS221_TEMP_OUT_H, &buffer_tmp[1], 1);
 8001378:	2201      	movs	r2, #1
 800137a:	490a      	ldr	r1, [pc, #40]	; (80013a4 <hts221_data_read+0x30>)
 800137c:	202b      	movs	r0, #43	; 0x2b
 800137e:	f7ff fea9 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_TEMP_OUT_L, &buffer_tmp[0], 1);
 8001382:	2201      	movs	r2, #1
 8001384:	4908      	ldr	r1, [pc, #32]	; (80013a8 <hts221_data_read+0x34>)
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f7ff fea4 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_HUMIDITY_OUT_H, &buffer_hmdt[1], 1);
 800138c:	2201      	movs	r2, #1
 800138e:	4907      	ldr	r1, [pc, #28]	; (80013ac <hts221_data_read+0x38>)
 8001390:	2029      	movs	r0, #41	; 0x29
 8001392:	f7ff fe9f 	bl	80010d4 <hts221_read>
	hts221_read(HTS221_HUMIDITY_OUT_L, &buffer_hmdt[0], 1);
 8001396:	2201      	movs	r2, #1
 8001398:	4905      	ldr	r1, [pc, #20]	; (80013b0 <hts221_data_read+0x3c>)
 800139a:	2028      	movs	r0, #40	; 0x28
 800139c:	f7ff fe9a 	bl	80010d4 <hts221_read>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000275 	.word	0x20000275
 80013a8:	20000274 	.word	0x20000274
 80013ac:	20000279 	.word	0x20000279
 80013b0:	20000278 	.word	0x20000278

080013b4 <hts221_UART_data_tx>:

void hts221_UART_data_tx()
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
	float tmp  = ((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <hts221_UART_data_tx+0x118>)
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4a42      	ldr	r2, [pc, #264]	; (80014cc <hts221_UART_data_tx+0x118>)
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	edc7 7a01 	vstr	s15, [r7, #4]
	tmp=((T1_degC-T0_degC)*(tmp-T0_OUT))/(T1_OUT-T0_OUT) + T0_degC;
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <hts221_UART_data_tx+0x11c>)
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <hts221_UART_data_tx+0x120>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <hts221_UART_data_tx+0x124>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80013f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <hts221_UART_data_tx+0x128>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <hts221_UART_data_tx+0x124>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <hts221_UART_data_tx+0x120>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	edc7 7a01 	vstr	s15, [r7, #4]
	 * to odczyt spada. Współczynnik kierunkowy interpolacji (wyznaczony zgodnie z instrukcją)
	 * jest ewidentnie dodatni, więc nie wiem o co chodzi.
	 *
	 *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	float hmdt =65536 - (((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0]);
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <hts221_UART_data_tx+0x12c>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <hts221_UART_data_tx+0x12c>)
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	edc7 7a00 	vstr	s15, [r7]
	hmdt=(((H1_rH-H0_rH))*(hmdt-H0_OUT))/(H1_OUT-H0_OUT) + H0_rH;
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <hts221_UART_data_tx+0x130>)
 800143e:	ed93 7a00 	vldr	s14, [r3]
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <hts221_UART_data_tx+0x134>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <hts221_UART_data_tx+0x138>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	edd7 6a00 	vldr	s13, [r7]
 800145c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001460:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <hts221_UART_data_tx+0x13c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <hts221_UART_data_tx+0x138>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <hts221_UART_data_tx+0x134>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	edc7 7a00 	vstr	s15, [r7]

	snprintf((char*)buffer_hts221_UART,sizeof(buffer_hts221_UART),"Temp: %3.4f[C]; Hmdt: %3.4f[%%] \n\r",tmp,hmdt);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff f85c 	bl	8000548 <__aeabi_f2d>
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014a2:	e9cd 4500 	strd	r4, r5, [sp]
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <hts221_UART_data_tx+0x140>)
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <hts221_UART_data_tx+0x144>)
 80014ac:	f007 fa54 	bl	8008958 <sniprintf>

	HAL_UART_Transmit_IT(&huart2, buffer_hts221_UART, strlen((char*)buffer_hts221_UART));
 80014b0:	4811      	ldr	r0, [pc, #68]	; (80014f8 <hts221_UART_data_tx+0x144>)
 80014b2:	f7fe fedd 	bl	8000270 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	490e      	ldr	r1, [pc, #56]	; (80014f8 <hts221_UART_data_tx+0x144>)
 80014be:	480f      	ldr	r0, [pc, #60]	; (80014fc <hts221_UART_data_tx+0x148>)
 80014c0:	f005 f9e0 	bl	8006884 <HAL_UART_Transmit_IT>


}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	20000274 	.word	0x20000274
 80014d0:	20000284 	.word	0x20000284
 80014d4:	20000280 	.word	0x20000280
 80014d8:	2000027a 	.word	0x2000027a
 80014dc:	2000027c 	.word	0x2000027c
 80014e0:	20000278 	.word	0x20000278
 80014e4:	20000290 	.word	0x20000290
 80014e8:	2000028c 	.word	0x2000028c
 80014ec:	20000288 	.word	0x20000288
 80014f0:	2000028a 	.word	0x2000028a
 80014f4:	0800c354 	.word	0x0800c354
 80014f8:	20000234 	.word	0x20000234
 80014fc:	20000380 	.word	0x20000380

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 fcca 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f82a 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 f99c 	bl	8001848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001510:	f000 f96a 	bl	80017e8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001514:	f000 f910 	bl	8001738 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001518:	f000 f8b4 	bl	8001684 <MX_TIM2_Init>
  MX_I2C1_Init();
 800151c:	f000 f872 	bl	8001604 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  timers_init();
 8001520:	f7ff fda4 	bl	800106c <timers_init>
  hts221_init();
 8001524:	f7ff ff18 	bl	8001358 <hts221_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_pushed)
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <main+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <main+0x3c>
	  {
		  button_pushed=0;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <main+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
		  tx_button_pushed_UART_alert();
 8001538:	f7ff fdae 	bl	8001098 <tx_button_pushed_UART_alert>
	  }

	  if(hts221_read_ready)
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <main+0x5c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <main+0x28>
	  {
		  hts221_read_ready=false;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <main+0x5c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		  hts221_data_read();
 800154c:	f7ff ff12 	bl	8001374 <hts221_data_read>
		  hts221_UART_data_tx();
 8001550:	f7ff ff30 	bl	80013b4 <hts221_UART_data_tx>
	  if(button_pushed)
 8001554:	e7e8      	b.n	8001528 <main+0x28>
 8001556:	bf00      	nop
 8001558:	200001f0 	.word	0x200001f0
 800155c:	200001f1 	.word	0x200001f1

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b096      	sub	sp, #88	; 0x58
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2244      	movs	r2, #68	; 0x44
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f007 fa89 	bl	8008a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001586:	f002 fc13 	bl	8003db0 <HAL_PWREx_ControlVoltageScaling>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001590:	f000 f9b4 	bl	80018fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159e:	2310      	movs	r3, #16
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015b2:	2307      	movs	r3, #7
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fc4a 	bl	8003e5c <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015ce:	f000 f995 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2303      	movs	r3, #3
 80015d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	2104      	movs	r1, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 f812 	bl	8004614 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f6:	f000 f981 	bl	80018fc <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3758      	adds	r7, #88	; 0x58
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_I2C1_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_I2C1_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_I2C1_Init+0x74>)
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <MX_I2C1_Init+0x7c>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_I2C1_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_I2C1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MX_I2C1_Init+0x74>)
 8001640:	f001 f808 	bl	8002654 <HAL_I2C_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164a:	f000 f957 	bl	80018fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <MX_I2C1_Init+0x74>)
 8001652:	f002 fb07 	bl	8003c64 <HAL_I2CEx_ConfigAnalogFilter>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800165c:	f000 f94e 	bl	80018fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_I2C1_Init+0x74>)
 8001664:	f002 fb49 	bl	8003cfa <HAL_I2CEx_ConfigDigitalFilter>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 f945 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000294 	.word	0x20000294
 800167c:	40005400 	.word	0x40005400
 8001680:	10909cec 	.word	0x10909cec

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016b2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80016b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 153;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016c0:	2299      	movs	r2, #153	; 0x99
 80016c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016d2:	f003 ffae 	bl	8005632 <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f000 f90e 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4811      	ldr	r0, [pc, #68]	; (8001734 <MX_TIM2_Init+0xb0>)
 80016f0:	f004 ff4a 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80016fa:	f000 f8ff 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fe:	2360      	movs	r3, #96	; 0x60
 8001700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_TIM2_Init+0xb0>)
 8001716:	f004 fa65 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001720:	f000 f8ec 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <MX_TIM2_Init+0xb0>)
 8001726:	f000 f9c5 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002e8 	.word	0x200002e8

08001738 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_TIM4_Init+0xa8>)
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <MX_TIM4_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_TIM4_Init+0xa8>)
 8001764:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001768:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM4_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 181;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_TIM4_Init+0xa8>)
 8001772:	22b5      	movs	r2, #181	; 0xb5
 8001774:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM4_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_TIM4_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001782:	4817      	ldr	r0, [pc, #92]	; (80017e0 <MX_TIM4_Init+0xa8>)
 8001784:	f003 fefe 	bl	8005584 <HAL_TIM_OC_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800178e:	f000 f8b5 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <MX_TIM4_Init+0xa8>)
 80017a2:	f004 fef1 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80017ac:	f000 f8a6 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <MX_TIM4_Init+0xa8>)
 80017c8:	f004 f992 	bl	8005af0 <HAL_TIM_OC_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017d2:	f000 f893 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000334 	.word	0x20000334
 80017e4:	40000800 	.word	0x40000800

080017e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_USART2_UART_Init+0x58>)
 80017ee:	4a15      	ldr	r2, [pc, #84]	; (8001844 <MX_USART2_UART_Init+0x5c>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <MX_USART2_UART_Init+0x58>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USART2_UART_Init+0x58>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USART2_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USART2_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_USART2_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USART2_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_USART2_UART_Init+0x58>)
 800182c:	f004 ff52 	bl	80066d4 <HAL_UART_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001836:	f000 f861 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000380 	.word	0x20000380
 8001844:	40004400 	.word	0x40004400

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_GPIO_Init+0xac>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <MX_GPIO_Init+0xac>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <MX_GPIO_Init+0xac>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_GPIO_Init+0xac>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <MX_GPIO_Init+0xac>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_GPIO_Init+0xac>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_GPIO_Init+0xac>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <MX_GPIO_Init+0xb0>)
 80018d6:	f000 fcfb 	bl	80022d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2028      	movs	r0, #40	; 0x28
 80018e0:	f000 fc33 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f000 fc4c 	bl	8002182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000800 	.word	0x48000800

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x44>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x44>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x44>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x44>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0ac      	sub	sp, #176	; 0xb0
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2288      	movs	r2, #136	; 0x88
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f007 f888 	bl	8008a86 <memset>
  if(hi2c->Instance==I2C1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_I2C_MspInit+0xd0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d14b      	bne.n	8001a18 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001980:	2340      	movs	r3, #64	; 0x40
 8001982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001984:	2300      	movs	r3, #0
 8001986:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f865 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001998:	f7ff ffb0 	bl	80018fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	2312      	movs	r3, #18
 80019be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ce:	2304      	movs	r3, #4
 80019d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019d8:	4619      	mov	r1, r3
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <HAL_I2C_MspInit+0xd8>)
 80019dc:	f000 fc78 	bl	80022d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 80019e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_I2C_MspInit+0xd4>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	201f      	movs	r0, #31
 80019fe:	f000 fba4 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a02:	201f      	movs	r0, #31
 8001a04:	f000 fbbd 	bl	8002182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f000 fb9c 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a12:	2020      	movs	r0, #32
 8001a14:	f000 fbb5 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	37b0      	adds	r7, #176	; 0xb0
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000400 	.word	0x48000400

08001a2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d10b      	bne.n	8001a56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_TIM_PWM_MspInit+0x38>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_TIM_PWM_MspInit+0x38>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_TIM_PWM_MspInit+0x38>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_TIM_OC_MspInit+0x44>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_OC_MspInit+0x48>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_TIM_OC_MspInit+0x48>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_TIM_OC_MspInit+0x48>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	201e      	movs	r0, #30
 8001a98:	f000 fb57 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a9c:	201e      	movs	r0, #30
 8001a9e:	f000 fb70 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d11c      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_TIM_MspPostInit+0x64>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_TIM_MspPostInit+0x64>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_TIM_MspPostInit+0x64>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aee:	2320      	movs	r3, #32
 8001af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f000 fbe0 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ac      	sub	sp, #176	; 0xb0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2288      	movs	r2, #136	; 0x88
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f006 ffa2 	bl	8008a86 <memset>
  if(huart->Instance==USART2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <HAL_UART_MspInit+0xc0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d143      	bne.n	8001bd4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 ff7f 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b64:	f7ff feca 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b72:	6593      	str	r3, [r2, #88]	; 0x58
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f000 fb86 	bl	80022d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2026      	movs	r0, #38	; 0x26
 8001bca:	f000 fabe 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bce:	2026      	movs	r0, #38	; 0x26
 8001bd0:	f000 fad7 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	37b0      	adds	r7, #176	; 0xb0
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f990 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM4_IRQHandler+0x10>)
 8001c3e:	f003 fe55 	bl	80058ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000334 	.word	0x20000334

08001c4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <I2C1_EV_IRQHandler+0x10>)
 8001c52:	f000 ffc9 	bl	8002be8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000294 	.word	0x20000294

08001c60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <I2C1_ER_IRQHandler+0x10>)
 8001c66:	f000 ffd9 	bl	8002c1c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000294 	.word	0x20000294

08001c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <USART2_IRQHandler+0x10>)
 8001c7a:	f004 fe61 	bl	8006940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000380 	.word	0x20000380

08001c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c90:	f000 fcc8 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_kill>:

int _kill(int pid, int sig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb2:	f006 ff3b 	bl	8008b2c <__errno>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2216      	movs	r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_exit>:

void _exit (int status)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ffe7 	bl	8001ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cda:	e7fe      	b.n	8001cda <_exit+0x12>

08001cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e00a      	b.n	8001d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cee:	f3af 8000 	nop.w
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf0      	blt.n	8001cee <_read+0x12>
  }

  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e009      	b.n	8001d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbf1      	blt.n	8001d28 <_write+0x12>
  }
  return len;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_close>:

int _close(int file)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d76:	605a      	str	r2, [r3, #4]
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_isatty>:

int _isatty(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f006 fea0 	bl	8008b2c <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20018000 	.word	0x20018000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	20000408 	.word	0x20000408
 8001e20:	20000560 	.word	0x20000560

08001e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e4c:	f7ff ffea 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e52:	490d      	ldr	r1, [pc, #52]	; (8001e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <LoopForever+0xe>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e68:	4c0a      	ldr	r4, [pc, #40]	; (8001e94 <LoopForever+0x16>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e76:	f006 fe5f 	bl	8008b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7a:	f7ff fb41 	bl	8001500 <main>

08001e7e <LoopForever>:

LoopForever:
    b LoopForever
 8001e7e:	e7fe      	b.n	8001e7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e8c:	0800c7f8 	.word	0x0800c7f8
  ldr r2, =_sbss
 8001e90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e94:	2000055c 	.word	0x2000055c

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_Init+0x3c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_Init+0x3c>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f000 f93e 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 f80f 	bl	8001edc <HAL_InitTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	e001      	b.n	8001ece <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eca:	f7ff fd1d 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ece:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40022000 	.word	0x40022000

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_InitTick+0x6c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_InitTick+0x70>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_InitTick+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f949 	bl	800219e <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d809      	bhi.n	8001f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f20:	f000 f913 	bl	800214a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_InitTick+0x74>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e004      	b.n	8001f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e001      	b.n	8001f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	2000040c 	.word	0x2000040c

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000040c 	.word	0x2000040c

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e022      	b.n	8002226 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 020e 	bic.w	r2, r2, #14
 80021ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 021c 	and.w	r2, r3, #28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d005      	beq.n	8002256 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e029      	b.n	80022aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 020e 	bic.w	r2, r2, #14
 8002264:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 021c 	and.w	r2, r3, #28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
    }
  }
  return status;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c2:	b2db      	uxtb	r3, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022de:	e17f      	b.n	80025e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8171 	beq.w	80025da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d005      	beq.n	8002310 <HAL_GPIO_Init+0x40>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d130      	bne.n	8002372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002346:	2201      	movs	r2, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0201 	and.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b03      	cmp	r3, #3
 800237c:	d118      	bne.n	80023b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002384:	2201      	movs	r2, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	f003 0201 	and.w	r2, r3, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d017      	beq.n	80023ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d123      	bne.n	8002440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	6939      	ldr	r1, [r7, #16]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80ac 	beq.w	80025da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b5f      	ldr	r3, [pc, #380]	; (8002600 <HAL_GPIO_Init+0x330>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	4a5e      	ldr	r2, [pc, #376]	; (8002600 <HAL_GPIO_Init+0x330>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6613      	str	r3, [r2, #96]	; 0x60
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <HAL_GPIO_Init+0x330>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800249a:	4a5a      	ldr	r2, [pc, #360]	; (8002604 <HAL_GPIO_Init+0x334>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x242>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	; (8002608 <HAL_GPIO_Init+0x338>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x23e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_GPIO_Init+0x33c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x23a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_GPIO_Init+0x340>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x236>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <HAL_GPIO_Init+0x344>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x232>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_GPIO_Init+0x348>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x22e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_GPIO_Init+0x34c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x22a>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x244>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x244>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x244>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x244>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x244>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x244>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x244>
 8002512:	2300      	movs	r3, #0
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x334>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_GPIO_Init+0x350>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002556:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_GPIO_Init+0x350>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_GPIO_Init+0x350>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_GPIO_Init+0x350>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_GPIO_Init+0x350>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_GPIO_Init+0x350>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_GPIO_Init+0x350>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_GPIO_Init+0x350>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f ae78 	bne.w	80022e0 <HAL_GPIO_Init+0x10>
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	48001000 	.word	0x48001000
 8002618:	48001400 	.word	0x48001400
 800261c:	48001800 	.word	0x48001800
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fcd4 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e08d      	b.n	8002782 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff f968 	bl	8001950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e006      	b.n	80026dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d108      	bne.n	80026f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	e007      	b.n	8002706 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 80f9 	bne.w	80029a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x34>
 80027ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0ed      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Mem_Write+0x4e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0e6      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027e2:	f7ff fbcb 	bl	8001f7c <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 ffec 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0d1      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	; 0x21
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800282c:	88f8      	ldrh	r0, [r7, #6]
 800282e:	893a      	ldrh	r2, [r7, #8]
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4603      	mov	r3, r0
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fb81 	bl	8002f44 <I2C_RequestMemoryWrite>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0a9      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d90e      	bls.n	800287c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	22ff      	movs	r2, #255	; 0xff
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f001 f965 	bl	8003b44 <I2C_TransferConfig>
 800287a:	e00f      	b.n	800289c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f001 f954 	bl	8003b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 ffe5 	bl	8003870 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e07b      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d034      	beq.n	8002954 <HAL_I2C_Mem_Write+0x1c8>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d130      	bne.n	8002954 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	2200      	movs	r2, #0
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 ff68 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04d      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d90e      	bls.n	8002934 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	22ff      	movs	r2, #255	; 0xff
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	b2da      	uxtb	r2, r3
 8002922:	8979      	ldrh	r1, [r7, #10]
 8002924:	2300      	movs	r3, #0
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 f909 	bl	8003b44 <I2C_TransferConfig>
 8002932:	e00f      	b.n	8002954 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	b2da      	uxtb	r2, r3
 8002944:	8979      	ldrh	r1, [r7, #10]
 8002946:	2300      	movs	r3, #0
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f001 f8f8 	bl	8003b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d19e      	bne.n	800289c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 ffcb 	bl	80038fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e01a      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2220      	movs	r2, #32
 8002978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_I2C_Mem_Write+0x224>)
 8002986:	400b      	ands	r3, r1
 8002988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	fe00e800 	.word	0xfe00e800

080029b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	817b      	strh	r3, [r7, #10]
 80029c6:	460b      	mov	r3, r1
 80029c8:	813b      	strh	r3, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	f040 80fd 	bne.w	8002bd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_I2C_Mem_Read+0x34>
 80029e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0f1      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x4e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e0ea      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0a:	f7ff fab7 	bl	8001f7c <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2319      	movs	r3, #25
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fed8 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d5      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2222      	movs	r2, #34	; 0x22
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a54:	88f8      	ldrh	r0, [r7, #6]
 8002a56:	893a      	ldrh	r2, [r7, #8]
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4603      	mov	r3, r0
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fac1 	bl	8002fec <I2C_RequestMemoryRead>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ad      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	d90e      	bls.n	8002aa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_I2C_Mem_Read+0x22c>)
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f001 f851 	bl	8003b44 <I2C_TransferConfig>
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	8979      	ldrh	r1, [r7, #10]
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <HAL_I2C_Mem_Read+0x22c>)
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f001 f840 	bl	8003b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2200      	movs	r2, #0
 8002acc:	2104      	movs	r1, #4
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fe7f 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07c      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d034      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x1d0>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d130      	bne.n	8002b84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fe50 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e04d      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2bff      	cmp	r3, #255	; 0xff
 8002b44:	d90e      	bls.n	8002b64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fff1 	bl	8003b44 <I2C_TransferConfig>
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	2300      	movs	r3, #0
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 ffe0 	bl	8003b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d19a      	bne.n	8002ac4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 feb3 	bl	80038fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01a      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_I2C_Mem_Read+0x230>)
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	80002400 	.word	0x80002400
 8002be4:	fe00e800 	.word	0xfe00e800

08002be8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	68f9      	ldr	r1, [r7, #12]
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
  }
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00f      	beq.n	8002c88 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0208 	orr.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00f      	beq.n	8002cb2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0202 	orr.w	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 030b 	and.w	r3, r3, #11
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fc2b 	bl	8003520 <I2C_ITError>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	70fb      	strb	r3, [r7, #3]
 8002d06:	4613      	mov	r3, r2
 8002d08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <I2C_Slave_ISR_IT+0x24>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e0e1      	b.n	8002f3a <I2C_Slave_ISR_IT+0x1e8>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d92:	6939      	ldr	r1, [r7, #16]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fa5d 	bl	8003254 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d04b      	beq.n	8002e3c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d046      	beq.n	8002e3c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d128      	bne.n	8002e0a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b28      	cmp	r3, #40	; 0x28
 8002dc2:	d108      	bne.n	8002dd6 <I2C_Slave_ISR_IT+0x84>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dca:	d104      	bne.n	8002dd6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dcc:	6939      	ldr	r1, [r7, #16]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fb52 	bl	8003478 <I2C_ITListenCplt>
 8002dd4:	e031      	b.n	8002e3a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b29      	cmp	r3, #41	; 0x29
 8002de0:	d10e      	bne.n	8002e00 <I2C_Slave_ISR_IT+0xae>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de8:	d00a      	beq.n	8002e00 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2210      	movs	r2, #16
 8002df0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fcab 	bl	800374e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f9cf 	bl	800319c <I2C_ITSlaveSeqCplt>
 8002dfe:	e01c      	b.n	8002e3a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2210      	movs	r2, #16
 8002e06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e08:	e08f      	b.n	8002f2a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2210      	movs	r2, #16
 8002e10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0204 	orr.w	r2, r3, #4
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <I2C_Slave_ISR_IT+0xda>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2a:	d17e      	bne.n	8002f2a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	4619      	mov	r1, r3
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb74 	bl	8003520 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e38:	e077      	b.n	8002f2a <I2C_Slave_ISR_IT+0x1d8>
 8002e3a:	e076      	b.n	8002f2a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d02f      	beq.n	8002ea6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02a      	beq.n	8002ea6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d14b      	bne.n	8002f2e <I2C_Slave_ISR_IT+0x1dc>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9c:	d047      	beq.n	8002f2e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f97c 	bl	800319c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ea4:	e043      	b.n	8002f2e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f8e9 	bl	8003094 <I2C_ITAddrCplt>
 8002ec2:	e035      	b.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d030      	beq.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d02b      	beq.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d018      	beq.n	8002f14 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f12:	e00d      	b.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1a:	d002      	beq.n	8002f22 <I2C_Slave_ISR_IT+0x1d0>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f93a 	bl	800319c <I2C_ITSlaveSeqCplt>
 8002f28:	e002      	b.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002f2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <I2C_RequestMemoryWrite+0xa4>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fde9 	bl	8003b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fc7a 	bl	8003870 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02c      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
 8002f96:	e015      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fc60 	bl	8003870 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e012      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fbff 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80002000 	.word	0x80002000

08002fec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <I2C_RequestMemoryRead+0xa4>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fd96 	bl	8003b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc27 	bl	8003870 <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e02c      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003032:	893b      	ldrh	r3, [r7, #8]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	e015      	b.n	800306a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc0d 	bl	8003870 <I2C_WaitOnTXISFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e012      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2200      	movs	r2, #0
 8003072:	2140      	movs	r1, #64	; 0x40
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fbac 	bl	80037d2 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002000 	.word	0x80002000

08003094 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d16a      	bne.n	8003184 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80030cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80030e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d138      	bne.n	8003164 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	09db      	lsrs	r3, r3, #7
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89bb      	ldrh	r3, [r7, #12]
 80030fa:	4053      	eors	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f003 0306 	and.w	r3, r3, #6
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11c      	bne.n	8003140 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	2b02      	cmp	r3, #2
 800311a:	d13b      	bne.n	8003194 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003132:	89ba      	ldrh	r2, [r7, #12]
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fdde 	bl	8002cfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800313e:	e029      	b.n	8003194 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fd2d 	bl	8003ba8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003156:	89ba      	ldrh	r2, [r7, #12]
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fdcc 	bl	8002cfa <HAL_I2C_AddrCallback>
}
 8003162:	e017      	b.n	8003194 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fd1d 	bl	8003ba8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003176:	89ba      	ldrh	r2, [r7, #12]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fdbc 	bl	8002cfa <HAL_I2C_AddrCallback>
}
 8003182:	e007      	b.n	8003194 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e00c      	b.n	80031ea <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b29      	cmp	r3, #41	; 0x29
 80031f4:	d112      	bne.n	800321c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2228      	movs	r2, #40	; 0x28
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2221      	movs	r2, #33	; 0x21
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003204:	2101      	movs	r1, #1
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fcce 	bl	8003ba8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fd5c 	bl	8002cd2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800321a:	e017      	b.n	800324c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b2a      	cmp	r3, #42	; 0x2a
 8003226:	d111      	bne.n	800324c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2228      	movs	r2, #40	; 0x28
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2222      	movs	r2, #34	; 0x22
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003236:	2102      	movs	r1, #2
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fcb5 	bl	8003ba8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fd4d 	bl	8002ce6 <HAL_I2C_SlaveRxCpltCallback>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2220      	movs	r2, #32
 8003278:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d002      	beq.n	8003286 <I2C_ITSlaveCplt+0x32>
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b29      	cmp	r3, #41	; 0x29
 8003284:	d108      	bne.n	8003298 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003286:	f248 0101 	movw	r1, #32769	; 0x8001
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fc8c 	bl	8003ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2221      	movs	r2, #33	; 0x21
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
 8003296:	e019      	b.n	80032cc <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b22      	cmp	r3, #34	; 0x22
 800329c:	d002      	beq.n	80032a4 <I2C_ITSlaveCplt+0x50>
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b2a      	cmp	r3, #42	; 0x2a
 80032a2:	d108      	bne.n	80032b6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032a4:	f248 0102 	movw	r1, #32770	; 0x8002
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fc7d 	bl	8003ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2222      	movs	r2, #34	; 0x22
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
 80032b4:	e00a      	b.n	80032cc <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b28      	cmp	r3, #40	; 0x28
 80032ba:	d107      	bne.n	80032cc <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fc71 	bl	8003ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <I2C_ITSlaveCplt+0x21c>)
 80032e8:	400b      	ands	r3, r1
 80032ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fa2e 	bl	800374e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01f      	beq.n	8003354 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003322:	e017      	b.n	8003354 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8a4 	bl	8003520 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b28      	cmp	r3, #40	; 0x28
 80033e2:	d141      	bne.n	8003468 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f846 	bl	8003478 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033ec:	e03c      	b.n	8003468 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f6:	d014      	beq.n	8003422 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fecf 	bl	800319c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <I2C_ITSlaveCplt+0x220>)
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fc7b 	bl	8002d16 <HAL_I2C_ListenCpltCallback>
}
 8003420:	e022      	b.n	8003468 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b22      	cmp	r3, #34	; 0x22
 800342c:	d10e      	bne.n	800344c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fc4e 	bl	8002ce6 <HAL_I2C_SlaveRxCpltCallback>
}
 800344a:	e00d      	b.n	8003468 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fc35 	bl	8002cd2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	fe00e800 	.word	0xfe00e800
 8003474:	ffff0000 	.word	0xffff0000

08003478 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <I2C_ITListenCplt+0xa4>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d022      	beq.n	80034f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb55 	bl	8003ba8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2210      	movs	r2, #16
 8003504:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fc01 	bl	8002d16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	ffff0000 	.word	0xffff0000

08003520 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a6d      	ldr	r2, [pc, #436]	; (80036f4 <I2C_ITError+0x1d4>)
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b28      	cmp	r3, #40	; 0x28
 8003556:	d005      	beq.n	8003564 <I2C_ITError+0x44>
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b29      	cmp	r3, #41	; 0x29
 800355c:	d002      	beq.n	8003564 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b2a      	cmp	r3, #42	; 0x2a
 8003562:	d10b      	bne.n	800357c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003564:	2103      	movs	r1, #3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fb1e 	bl	8003ba8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2228      	movs	r2, #40	; 0x28
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <I2C_ITError+0x1d8>)
 8003578:	635a      	str	r2, [r3, #52]	; 0x34
 800357a:	e030      	b.n	80035de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800357c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fb11 	bl	8003ba8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8e1 	bl	800374e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d01f      	beq.n	80035d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d114      	bne.n	80035d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d109      	bne.n	80035d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d039      	beq.n	8003660 <I2C_ITError+0x140>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d002      	beq.n	80035f8 <I2C_ITError+0xd8>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b21      	cmp	r3, #33	; 0x21
 80035f6:	d133      	bne.n	8003660 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d107      	bne.n	8003618 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003616:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fe49 	bl	80022b4 <HAL_DMA_GetState>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d017      	beq.n	8003658 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	4a33      	ldr	r2, [pc, #204]	; (80036fc <I2C_ITError+0x1dc>)
 800362e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fdf8 	bl	8002232 <HAL_DMA_Abort_IT>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d04d      	beq.n	80036e4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003656:	e045      	b.n	80036e4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f851 	bl	8003700 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800365e:	e041      	b.n	80036e4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d039      	beq.n	80036dc <I2C_ITError+0x1bc>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b12      	cmp	r3, #18
 800366c:	d002      	beq.n	8003674 <I2C_ITError+0x154>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b22      	cmp	r3, #34	; 0x22
 8003672:	d133      	bne.n	80036dc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003682:	d107      	bne.n	8003694 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003692:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fe0b 	bl	80022b4 <HAL_DMA_GetState>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d017      	beq.n	80036d4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <I2C_ITError+0x1dc>)
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fdba 	bl	8002232 <HAL_DMA_Abort_IT>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d011      	beq.n	80036e8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ce:	4610      	mov	r0, r2
 80036d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036d2:	e009      	b.n	80036e8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f813 	bl	8003700 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036da:	e005      	b.n	80036e8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f80f 	bl	8003700 <I2C_TreatErrorCallback>
  }
}
 80036e2:	e002      	b.n	80036ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036e8:	bf00      	nop
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	ffff0000 	.word	0xffff0000
 80036f8:	08002d53 	.word	0x08002d53
 80036fc:	08003797 	.word	0x08003797

08003700 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b60      	cmp	r3, #96	; 0x60
 8003712:	d10e      	bne.n	8003732 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fb07 	bl	8002d3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003730:	e009      	b.n	8003746 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff faf2 	bl	8002d2a <HAL_I2C_ErrorCallback>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b02      	cmp	r3, #2
 8003762:	d103      	bne.n	800376c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d007      	beq.n	800378a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	619a      	str	r2, [r3, #24]
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	2200      	movs	r2, #0
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff ff9b 	bl	8003700 <I2C_TreatErrorCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e2:	e031      	b.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ea:	d02d      	beq.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fbc6 	bl	8001f7c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d122      	bne.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d113      	bne.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e00f      	b.n	8003868 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	429a      	cmp	r2, r3
 8003864:	d0be      	beq.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800387c:	e033      	b.n	80038e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f87e 	bl	8003984 <I2C_IsErrorOccurred>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e031      	b.n	80038f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003898:	d025      	beq.n	80038e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fb6f 	bl	8001f7c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11a      	bne.n	80038e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d013      	beq.n	80038e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e007      	b.n	80038f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d1c4      	bne.n	800387e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390a:	e02f      	b.n	800396c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f837 	bl	8003984 <I2C_IsErrorOccurred>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e02d      	b.n	800397c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7fe fb2c 	bl	8001f7c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11a      	bne.n	800396c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d013      	beq.n	800396c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e007      	b.n	800397c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b20      	cmp	r3, #32
 8003978:	d1c8      	bne.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d068      	beq.n	8003a82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2210      	movs	r2, #16
 80039b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039b8:	e049      	b.n	8003a4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c0:	d045      	beq.n	8003a4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe fadb 	bl	8001f7c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <I2C_IsErrorOccurred+0x54>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d13a      	bne.n	8003a4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fa:	d121      	bne.n	8003a40 <I2C_IsErrorOccurred+0xbc>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a02:	d01d      	beq.n	8003a40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d01a      	beq.n	8003a40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a1a:	f7fe faaf 	bl	8001f7c <HAL_GetTick>
 8003a1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a20:	e00e      	b.n	8003a40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a22:	f7fe faab 	bl	8001f7c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b19      	cmp	r3, #25
 8003a2e:	d907      	bls.n	8003a40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a3e:	e006      	b.n	8003a4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d1e9      	bne.n	8003a22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d003      	beq.n	8003a64 <I2C_IsErrorOccurred+0xe0>
 8003a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0aa      	beq.n	80039ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2220      	movs	r2, #32
 8003a72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f043 0302 	orr.w	r3, r3, #2
 8003ade:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01c      	beq.n	8003b32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fe28 	bl	800374e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <I2C_IsErrorOccurred+0x1bc>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	fe00e800 	.word	0xfe00e800

08003b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	4613      	mov	r3, r2
 8003b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b56:	897b      	ldrh	r3, [r7, #10]
 8003b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b5c:	7a7b      	ldrb	r3, [r7, #9]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	0d5b      	lsrs	r3, r3, #21
 8003b7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <I2C_TransferConfig+0x60>)
 8003b84:	430b      	orrs	r3, r1
 8003b86:	43db      	mvns	r3, r3
 8003b88:	ea02 0103 	and.w	r1, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	03ff63ff 	.word	0x03ff63ff

08003ba8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00f      	beq.n	8003be2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003bc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bd6:	2b28      	cmp	r3, #40	; 0x28
 8003bd8:	d003      	beq.n	8003be2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003be0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c00:	2b28      	cmp	r3, #40	; 0x28
 8003c02:	d003      	beq.n	8003c0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da03      	bge.n	8003c1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d103      	bne.n	8003c2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d103      	bne.n	8003c38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d103      	bne.n	8003c46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d138      	bne.n	8003cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e032      	b.n	8003cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6819      	ldr	r1, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d139      	bne.n	8003d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e033      	b.n	8003d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2224      	movs	r2, #36	; 0x24
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_PWREx_GetVoltageRange+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000

08003db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d130      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dcc:	d038      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2232      	movs	r2, #50	; 0x32
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0c9b      	lsrs	r3, r3, #18
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df4:	e002      	b.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d102      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d110      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d007      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40007000 	.word	0x40007000
 8003e54:	20000000 	.word	0x20000000
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e3ca      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	4b97      	ldr	r3, [pc, #604]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80e4 	beq.w	8004058 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4a>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	f040 808b 	bne.w	8003fb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 8087 	bne.w	8003fb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e3a2      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x7c>
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCC_OscConfig+0x88>
 8003ed8:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d223      	bcs.n	8003f30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd55 	bl	800499c <RCC_SetFlashLatencyFromMSIRange>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e383      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003efc:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a72      	ldr	r2, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f02:	f043 0308 	orr.w	r3, r3, #8
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b70      	ldr	r3, [pc, #448]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	496d      	ldr	r1, [pc, #436]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	4968      	ldr	r1, [pc, #416]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
 8003f2e:	e025      	b.n	8003f7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4960      	ldr	r1, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	495b      	ldr	r1, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd15 	bl	800499c <RCC_SetFlashLatencyFromMSIRange>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e343      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7c:	f000 fc4a 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	4950      	ldr	r1, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <HAL_RCC_OscConfig+0x278>)
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd ff9b 	bl	8001edc <HAL_InitTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d052      	beq.n	8004056 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	e327      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd ffd8 	bl	8001f7c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd0:	f7fd ffd4 	bl	8001f7c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e310      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a36      	ldr	r2, [pc, #216]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4931      	ldr	r1, [pc, #196]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	492c      	ldr	r1, [pc, #176]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e01a      	b.n	8004058 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800402e:	f7fd ffa5 	bl	8001f7c <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004036:	f7fd ffa1 	bl	8001f7c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e2dd      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004048:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x1da>
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004056:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d074      	beq.n	800414e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d005      	beq.n	8004076 <HAL_RCC_OscConfig+0x21a>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d10e      	bne.n	800408e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d10b      	bne.n	800408e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d064      	beq.n	800414c <HAL_RCC_OscConfig+0x2f0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d160      	bne.n	800414c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e2ba      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x24a>
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e026      	b.n	80040f4 <HAL_RCC_OscConfig+0x298>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ae:	d115      	bne.n	80040dc <HAL_RCC_OscConfig+0x280>
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a02      	ldr	r2, [pc, #8]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x298>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800c378 	.word	0x0800c378
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004
 80040dc:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a9f      	ldr	r2, [pc, #636]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b9d      	ldr	r3, [pc, #628]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a9c      	ldr	r2, [pc, #624]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd ff3e 	bl	8001f7c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd ff3a 	bl	8001f7c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e276      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004116:	4b92      	ldr	r3, [pc, #584]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x2a8>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd ff2a 	bl	8001f7c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd ff26 	bl	8001f7c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e262      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x2d0>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d060      	beq.n	800421c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d005      	beq.n	800416c <HAL_RCC_OscConfig+0x310>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d119      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d116      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x328>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e23f      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	4973      	ldr	r1, [pc, #460]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	e040      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a2:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6e      	ldr	r2, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fd fee5 	bl	8001f7c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fd fee1 	bl	8001f7c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e21d      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c8:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	495f      	ldr	r1, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
 80041e8:	e018      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b5d      	ldr	r3, [pc, #372]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5c      	ldr	r2, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fd fec1 	bl	8001f7c <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd febd 	bl	8001f7c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1f9      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01c      	beq.n	800426a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004236:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd fe9c 	bl	8001f7c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004248:	f7fd fe98 	bl	8001f7c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e1d4      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x3ec>
 8004268:	e01b      	b.n	80042a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	4a3b      	ldr	r2, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fd fe7f 	bl	8001f7c <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fd fe7b 	bl	8001f7c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1b7      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ef      	bne.n	8004282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a6 	beq.w	80043fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e8:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fd fe42 	bl	8001f7c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fd fe3e 	bl	8001f7c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e17a      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d108      	bne.n	8004334 <HAL_RCC_OscConfig+0x4d8>
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004332:	e029      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d115      	bne.n	8004368 <HAL_RCC_OscConfig+0x50c>
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a03      	ldr	r2, [pc, #12]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435c:	e014      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	4b9c      	ldr	r3, [pc, #624]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a9b      	ldr	r2, [pc, #620]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004378:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a97      	ldr	r2, [pc, #604]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d016      	beq.n	80043be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fdf4 	bl	8001f7c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fd fdf0 	bl	8001f7c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e12a      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ae:	4b8b      	ldr	r3, [pc, #556]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ed      	beq.n	8004398 <HAL_RCC_OscConfig+0x53c>
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fddd 	bl	8001f7c <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd fdd9 	bl	8001f7c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e113      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043dc:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ed      	bne.n	80043c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	4a79      	ldr	r2, [pc, #484]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80fe 	beq.w	8004602 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	f040 80d0 	bne.w	80045b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004410:	4b72      	ldr	r3, [pc, #456]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d130      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d127      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11f      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004450:	2a07      	cmp	r2, #7
 8004452:	bf14      	ite	ne
 8004454:	2201      	movne	r2, #1
 8004456:	2200      	moveq	r2, #0
 8004458:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	4293      	cmp	r3, r2
 800445c:	d113      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d109      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d06e      	beq.n	8004564 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d069      	beq.n	8004560 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ad      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044a8:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b4:	f7fd fd62 	bl	8001f7c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fd5e 	bl	8001f7c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e09a      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ce:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_RCC_OscConfig+0x784>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044f4:	0212      	lsls	r2, r2, #8
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044fc:	0852      	lsrs	r2, r2, #1
 80044fe:	3a01      	subs	r2, #1
 8004500:	0552      	lsls	r2, r2, #21
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004508:	0852      	lsrs	r2, r2, #1
 800450a:	3a01      	subs	r2, #1
 800450c:	0652      	lsls	r2, r2, #25
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004514:	0912      	lsrs	r2, r2, #4
 8004516:	0452      	lsls	r2, r2, #17
 8004518:	430a      	orrs	r2, r1
 800451a:	4930      	ldr	r1, [pc, #192]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800451c:	4313      	orrs	r3, r2
 800451e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2d      	ldr	r2, [pc, #180]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004538:	f7fd fd20 	bl	8001f7c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fd1c 	bl	8001f7c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e058      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455e:	e050      	b.n	8004602 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e04f      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d148      	bne.n	8004602 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004588:	f7fd fcf8 	bl	8001f7c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fcf4 	bl	8001f7c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e030      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x734>
 80045ae:	e028      	b.n	8004602 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d023      	beq.n	80045fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <HAL_RCC_OscConfig+0x780>)
 80045bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd fcdb 	bl	8001f7c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c8:	e00c      	b.n	80045e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd fcd7 	bl	8001f7c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d905      	bls.n	80045e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e013      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_OscConfig+0x7b0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ec      	bne.n	80045ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_OscConfig+0x7b0>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4905      	ldr	r1, [pc, #20]	; (800460c <HAL_RCC_OscConfig+0x7b0>)
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_RCC_OscConfig+0x7b4>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	60cb      	str	r3, [r1, #12]
 80045fc:	e001      	b.n	8004602 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	feeefffc 	.word	0xfeeefffc

08004614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0e7      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004628:	4b75      	ldr	r3, [pc, #468]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d910      	bls.n	8004658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b72      	ldr	r3, [pc, #456]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 0207 	bic.w	r2, r3, #7
 800463e:	4970      	ldr	r1, [pc, #448]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b6e      	ldr	r3, [pc, #440]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0cf      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b66      	ldr	r3, [pc, #408]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	429a      	cmp	r2, r3
 8004672:	d908      	bls.n	8004686 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4960      	ldr	r1, [pc, #384]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04c      	beq.n	800472c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	4b5a      	ldr	r3, [pc, #360]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d121      	bne.n	80046ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0a6      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b2:	4b54      	ldr	r3, [pc, #336]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d115      	bne.n	80046ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e09a      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046ca:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e08e      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e086      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b46      	ldr	r3, [pc, #280]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4943      	ldr	r1, [pc, #268]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fd fc3e 	bl	8001f7c <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fd fc3a 	bl	8001f7c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e06e      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b3a      	ldr	r3, [pc, #232]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004744:	429a      	cmp	r2, r3
 8004746:	d208      	bcs.n	800475a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	492b      	ldr	r1, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d210      	bcs.n	800478a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 0207 	bic.w	r2, r3, #7
 8004770:	4923      	ldr	r1, [pc, #140]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004778:	4b21      	ldr	r3, [pc, #132]	; (8004800 <HAL_RCC_ClockConfig+0x1ec>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e036      	b.n	80047f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4918      	ldr	r1, [pc, #96]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4910      	ldr	r1, [pc, #64]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c8:	f000 f824 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	490b      	ldr	r1, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1f4>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
 80047e4:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1f8>)
 80047e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1fc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fd fb75 	bl	8001edc <HAL_InitTick>
 80047f2:	4603      	mov	r3, r0
 80047f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80047f6:	7afb      	ldrb	r3, [r7, #11]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40022000 	.word	0x40022000
 8004804:	40021000 	.word	0x40021000
 8004808:	0800c378 	.word	0x0800c378
 800480c:	20000000 	.word	0x20000000
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004822:	4b3e      	ldr	r3, [pc, #248]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800482c:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x34>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d121      	bne.n	8004886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11e      	bne.n	8004886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004848:	4b34      	ldr	r3, [pc, #208]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004854:	4b31      	ldr	r3, [pc, #196]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e005      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004870:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004884:	e00a      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d102      	bne.n	8004892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCC_GetSysClockFreq+0x110>)
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e004      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d101      	bne.n	800489c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_RCC_GetSysClockFreq+0x114>)
 800489a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d134      	bne.n	800490c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0xa6>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d003      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0xac>
 80048b8:	e005      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCC_GetSysClockFreq+0x110>)
 80048bc:	617b      	str	r3, [r7, #20]
      break;
 80048be:	e005      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_GetSysClockFreq+0x114>)
 80048c2:	617b      	str	r3, [r7, #20]
      break;
 80048c4:	e002      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	617b      	str	r3, [r7, #20]
      break;
 80048ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	3301      	adds	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	fb03 f202 	mul.w	r2, r3, r2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_GetSysClockFreq+0x108>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	0e5b      	lsrs	r3, r3, #25
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	3301      	adds	r3, #1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800490c:	69bb      	ldr	r3, [r7, #24]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3724      	adds	r7, #36	; 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	0800c390 	.word	0x0800c390
 8004924:	00f42400 	.word	0x00f42400
 8004928:	007a1200 	.word	0x007a1200

0800492c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000000 	.word	0x20000000

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004948:	f7ff fff0 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4904      	ldr	r1, [pc, #16]	; (800496c <HAL_RCC_GetPCLK1Freq+0x28>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000
 800496c:	0800c388 	.word	0x0800c388

08004970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004974:	f7ff ffda 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0adb      	lsrs	r3, r3, #11
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4904      	ldr	r1, [pc, #16]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	0800c388 	.word	0x0800c388

0800499c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049a8:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049b4:	f7ff f9ee 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 80049b8:	6178      	str	r0, [r7, #20]
 80049ba:	e014      	b.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049bc:	4b25      	ldr	r3, [pc, #148]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6593      	str	r3, [r2, #88]	; 0x58
 80049c8:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049d4:	f7ff f9de 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 80049d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ec:	d10b      	bne.n	8004a06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d919      	bls.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2ba0      	cmp	r3, #160	; 0xa0
 80049f8:	d902      	bls.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049fa:	2302      	movs	r3, #2
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e013      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a00:	2301      	movs	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e010      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d902      	bls.n	8004a12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e00a      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d102      	bne.n	8004a1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a18:	2302      	movs	r3, #2
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	e004      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d101      	bne.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a24:	2301      	movs	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 0207 	bic.w	r2, r3, #7
 8004a30:	4909      	ldr	r1, [pc, #36]	; (8004a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d001      	beq.n	8004a4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40022000 	.word	0x40022000

08004a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a64:	2300      	movs	r3, #0
 8004a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d041      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a80:	d02a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a86:	d824      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a92:	d81e      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9c:	d010      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a9e:	e018      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aa0:	4b86      	ldr	r3, [pc, #536]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a85      	ldr	r2, [pc, #532]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aac:	e015      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fabb 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004abe:	e00c      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3320      	adds	r3, #32
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fba6 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad6:	e000      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae0:	4b76      	ldr	r3, [pc, #472]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aee:	4973      	ldr	r1, [pc, #460]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004af6:	e001      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d041      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b10:	d02a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b16:	d824      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b22:	d81e      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b2e:	e018      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b30:	4b62      	ldr	r3, [pc, #392]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a61      	ldr	r2, [pc, #388]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b3c:	e015      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fa73 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b4e:	e00c      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3320      	adds	r3, #32
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fb5e 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	74fb      	strb	r3, [r7, #19]
      break;
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b70:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7e:	494f      	ldr	r1, [pc, #316]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b86:	e001      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80a0 	beq.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bdc:	f7fd f9ce 	bl	8001f7c <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be4:	f7fd f9ca 	bl	8001f7c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d902      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	74fb      	strb	r3, [r7, #19]
        break;
 8004bf6:	e005      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d15c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d019      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c34:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fd f989 	bl	8001f7c <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fd f985 	bl	8001f7c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d902      	bls.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	74fb      	strb	r3, [r7, #19]
            break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ec      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	4904      	ldr	r1, [pc, #16]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cb2:	e009      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc8:	7c7b      	ldrb	r3, [r7, #17]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4b9e      	ldr	r3, [pc, #632]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	4a9d      	ldr	r2, [pc, #628]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce6:	4b98      	ldr	r3, [pc, #608]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 0203 	bic.w	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	4994      	ldr	r1, [pc, #592]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d08:	4b8f      	ldr	r3, [pc, #572]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 020c 	bic.w	r2, r3, #12
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	498c      	ldr	r1, [pc, #560]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d2a:	4b87      	ldr	r3, [pc, #540]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	4983      	ldr	r1, [pc, #524]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d4c:	4b7e      	ldr	r3, [pc, #504]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	497b      	ldr	r1, [pc, #492]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6e:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7c:	4972      	ldr	r1, [pc, #456]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d90:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	496a      	ldr	r1, [pc, #424]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	4961      	ldr	r1, [pc, #388]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dd4:	4b5c      	ldr	r3, [pc, #368]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	4959      	ldr	r1, [pc, #356]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df6:	4b54      	ldr	r3, [pc, #336]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	4950      	ldr	r1, [pc, #320]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e18:	4b4b      	ldr	r3, [pc, #300]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	4948      	ldr	r1, [pc, #288]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e3a:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	493f      	ldr	r1, [pc, #252]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d028      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e5c:	4b3a      	ldr	r3, [pc, #232]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6a:	4937      	ldr	r1, [pc, #220]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a31      	ldr	r2, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	e011      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e92:	d10c      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f8c8 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d028      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	491f      	ldr	r1, [pc, #124]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee4:	60d3      	str	r3, [r2, #12]
 8004ee6:	e011      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f899 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	4908      	ldr	r1, [pc, #32]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d109      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a02      	ldr	r2, [pc, #8]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
 8004f44:	e014      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f867 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02f      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8a:	4928      	ldr	r1, [pc, #160]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f844 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d014      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	74bb      	strb	r3, [r7, #18]
 8004fb6:	e011      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3320      	adds	r3, #32
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f925 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff6:	490d      	ldr	r1, [pc, #52]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501a:	4904      	ldr	r1, [pc, #16]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005022:	7cbb      	ldrb	r3, [r7, #18]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000

08005030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503e:	4b75      	ldr	r3, [pc, #468]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800504a:	4b72      	ldr	r3, [pc, #456]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0203 	and.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d10d      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
       ||
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
       ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d047      	beq.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e044      	b.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d018      	beq.n	80050b6 <RCCEx_PLLSAI1_Config+0x86>
 8005084:	2b03      	cmp	r3, #3
 8005086:	d825      	bhi.n	80050d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0x62>
 800508c:	2b02      	cmp	r3, #2
 800508e:	d009      	beq.n	80050a4 <RCCEx_PLLSAI1_Config+0x74>
 8005090:	e020      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005092:	4b60      	ldr	r3, [pc, #384]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11d      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a2:	e01a      	b.n	80050da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a4:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d116      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b4:	e013      	b.n	80050de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b6:	4b57      	ldr	r3, [pc, #348]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d2:	e006      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      break;
 80050d8:	e004      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	430b      	orrs	r3, r1
 8005100:	4944      	ldr	r1, [pc, #272]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d17d      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a40      	ldr	r2, [pc, #256]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005118:	f7fc ff30 	bl	8001f7c <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511e:	e009      	b.n	8005134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005120:	f7fc ff2c 	bl	8001f7c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	73fb      	strb	r3, [r7, #15]
        break;
 8005132:	e005      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ef      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d160      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d111      	bne.n	8005170 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6892      	ldr	r2, [r2, #8]
 800515c:	0211      	lsls	r1, r2, #8
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68d2      	ldr	r2, [r2, #12]
 8005162:	0912      	lsrs	r2, r2, #4
 8005164:	0452      	lsls	r2, r2, #17
 8005166:	430a      	orrs	r2, r1
 8005168:	492a      	ldr	r1, [pc, #168]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	610b      	str	r3, [r1, #16]
 800516e:	e027      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d112      	bne.n	800519c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800517e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6892      	ldr	r2, [r2, #8]
 8005186:	0211      	lsls	r1, r2, #8
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6912      	ldr	r2, [r2, #16]
 800518c:	0852      	lsrs	r2, r2, #1
 800518e:	3a01      	subs	r2, #1
 8005190:	0552      	lsls	r2, r2, #21
 8005192:	430a      	orrs	r2, r1
 8005194:	491f      	ldr	r1, [pc, #124]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	610b      	str	r3, [r1, #16]
 800519a:	e011      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519c:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6892      	ldr	r2, [r2, #8]
 80051ac:	0211      	lsls	r1, r2, #8
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6952      	ldr	r2, [r2, #20]
 80051b2:	0852      	lsrs	r2, r2, #1
 80051b4:	3a01      	subs	r2, #1
 80051b6:	0652      	lsls	r2, r2, #25
 80051b8:	430a      	orrs	r2, r1
 80051ba:	4916      	ldr	r1, [pc, #88]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a13      	ldr	r2, [pc, #76]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fc fed6 	bl	8001f7c <HAL_GetTick>
 80051d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d2:	e009      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d4:	f7fc fed2 	bl	8001f7c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	73fb      	strb	r3, [r7, #15]
          break;
 80051e6:	e005      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	4904      	ldr	r1, [pc, #16]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000

08005218 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005226:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005232:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0203 	and.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d10d      	bne.n	800525e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
       ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800524a:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
       ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d047      	beq.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e044      	b.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d018      	beq.n	800529e <RCCEx_PLLSAI2_Config+0x86>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d825      	bhi.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
 8005270:	2b01      	cmp	r3, #1
 8005272:	d002      	beq.n	800527a <RCCEx_PLLSAI2_Config+0x62>
 8005274:	2b02      	cmp	r3, #2
 8005276:	d009      	beq.n	800528c <RCCEx_PLLSAI2_Config+0x74>
 8005278:	e020      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527a:	4b55      	ldr	r3, [pc, #340]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528a:	e01a      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800528c:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529c:	e013      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529e:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052aa:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ba:	e006      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      break;
 80052c0:	e004      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d2:	4b3f      	ldr	r3, [pc, #252]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	430b      	orrs	r3, r1
 80052e8:	4939      	ldr	r1, [pc, #228]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d167      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052f4:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005300:	f7fc fe3c 	bl	8001f7c <HAL_GetTick>
 8005304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005306:	e009      	b.n	800531c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005308:	f7fc fe38 	bl	8001f7c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
        break;
 800531a:	e005      	b.n	8005328 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ef      	bne.n	8005308 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d14a      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d111      	bne.n	8005358 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68d2      	ldr	r2, [r2, #12]
 800534a:	0912      	lsrs	r2, r2, #4
 800534c:	0452      	lsls	r2, r2, #17
 800534e:	430a      	orrs	r2, r1
 8005350:	491f      	ldr	r1, [pc, #124]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	614b      	str	r3, [r1, #20]
 8005356:	e011      	b.n	800537c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6892      	ldr	r2, [r2, #8]
 8005368:	0211      	lsls	r1, r2, #8
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	0852      	lsrs	r2, r2, #1
 8005370:	3a01      	subs	r2, #1
 8005372:	0652      	lsls	r2, r2, #25
 8005374:	430a      	orrs	r2, r1
 8005376:	4916      	ldr	r1, [pc, #88]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800537c:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc fdf8 	bl	8001f7c <HAL_GetTick>
 800538c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800538e:	e009      	b.n	80053a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005390:	f7fc fdf4 	bl	8001f7c <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d902      	bls.n	80053a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	73fb      	strb	r3, [r7, #15]
          break;
 80053a2:	e005      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ef      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4904      	ldr	r1, [pc, #16]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000

080053d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d001      	beq.n	80053ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e047      	b.n	800547c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <HAL_TIM_Base_Start+0xb4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01d      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d018      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_Base_Start+0xb8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <HAL_TIM_Base_Start+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIM_Base_Start+0xc0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIM_Base_Start+0xc4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIM_Base_Start+0x66>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_TIM_Base_Start+0xc8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d115      	bne.n	8005466 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <HAL_TIM_Base_Start+0xcc>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d015      	beq.n	8005478 <HAL_TIM_Base_Start+0xa4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d011      	beq.n	8005478 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	e008      	b.n	8005478 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e000      	b.n	800547a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	00010007 	.word	0x00010007

080054a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e04f      	b.n	800555c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a23      	ldr	r2, [pc, #140]	; (8005568 <HAL_TIM_Base_Start_IT+0xc4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01d      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d018      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	; (800556c <HAL_TIM_Base_Start_IT+0xc8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <HAL_TIM_Base_Start_IT+0xcc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <HAL_TIM_Base_Start_IT+0xd0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_TIM_Base_Start_IT+0xd4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_TIM_Base_Start_IT+0xd8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d115      	bne.n	8005546 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_TIM_Base_Start_IT+0xdc>)
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d015      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005532:	d011      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	e008      	b.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e000      	b.n	800555a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e049      	b.n	800562a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fa5c 	bl	8001a68 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fc4a 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e049      	b.n	80056d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fc f9e7 	bl	8001a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f000 fbf3 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x24>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e03c      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e02f      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e022      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d109      	bne.n	8005752 <HAL_TIM_PWM_Start+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e015      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d109      	bne.n	800576c <HAL_TIM_PWM_Start+0x8c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e008      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e09c      	b.n	80058c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xb6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	e023      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xc6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	e01b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	e013      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xe6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c4:	e00b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xf6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d4:	e003      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fea8 	bl	800653c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a34      	ldr	r2, [pc, #208]	; (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a31      	ldr	r2, [pc, #196]	; (80058d4 <HAL_TIM_PWM_Start+0x1f4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <HAL_TIM_PWM_Start+0x1f8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Start+0x142>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_TIM_PWM_Start+0x144>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01d      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d018      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_TIM_PWM_Start+0x1fc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <HAL_TIM_PWM_Start+0x200>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_PWM_Start+0x204>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	; (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d115      	bne.n	80058aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_TIM_PWM_Start+0x208>)
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d015      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005896:	d011      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	e008      	b.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e000      	b.n	80058be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	00010007 	.word	0x00010007

080058ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01b      	beq.n	8005950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0202 	mvn.w	r2, #2
 8005920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa72 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa64 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa75 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0204 	mvn.w	r2, #4
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa4c 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa3e 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa4f 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa26 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa18 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa29 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0210 	mvn.w	r2, #16
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa00 	bl	8005e20 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9f2 	bl	8005e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa03 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0201 	mvn.w	r2, #1
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb faf4 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fe18 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00c      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fe10 	bl	80066c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9c2 	bl	8005e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0220 	mvn.w	r2, #32
 8005ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fdd8 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e066      	b.n	8005bdc <HAL_TIM_OC_ConfigChannel+0xec>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b14      	cmp	r3, #20
 8005b1a:	d857      	bhi.n	8005bcc <HAL_TIM_OC_ConfigChannel+0xdc>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b79 	.word	0x08005b79
 8005b28:	08005bcd 	.word	0x08005bcd
 8005b2c:	08005bcd 	.word	0x08005bcd
 8005b30:	08005bcd 	.word	0x08005bcd
 8005b34:	08005b87 	.word	0x08005b87
 8005b38:	08005bcd 	.word	0x08005bcd
 8005b3c:	08005bcd 	.word	0x08005bcd
 8005b40:	08005bcd 	.word	0x08005bcd
 8005b44:	08005b95 	.word	0x08005b95
 8005b48:	08005bcd 	.word	0x08005bcd
 8005b4c:	08005bcd 	.word	0x08005bcd
 8005b50:	08005bcd 	.word	0x08005bcd
 8005b54:	08005ba3 	.word	0x08005ba3
 8005b58:	08005bcd 	.word	0x08005bcd
 8005b5c:	08005bcd 	.word	0x08005bcd
 8005b60:	08005bcd 	.word	0x08005bcd
 8005b64:	08005bb1 	.word	0x08005bb1
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005bcd 	.word	0x08005bcd
 8005b70:	08005bcd 	.word	0x08005bcd
 8005b74:	08005bbf 	.word	0x08005bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa06 	bl	8005f90 <TIM_OC1_SetConfig>
      break;
 8005b84:	e025      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fa8f 	bl	80060b0 <TIM_OC2_SetConfig>
      break;
 8005b92:	e01e      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb12 	bl	80061c4 <TIM_OC3_SetConfig>
      break;
 8005ba0:	e017      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fb93 	bl	80062d4 <TIM_OC4_SetConfig>
      break;
 8005bae:	e010      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fbf6 	bl	80063a8 <TIM_OC5_SetConfig>
      break;
 8005bbc:	e009      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fc53 	bl	8006470 <TIM_OC6_SetConfig>
      break;
 8005bca:	e002      	b.n	8005bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0ff      	b.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b14      	cmp	r3, #20
 8005c0e:	f200 80f0 	bhi.w	8005df2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005df3 	.word	0x08005df3
 8005c20:	08005df3 	.word	0x08005df3
 8005c24:	08005df3 	.word	0x08005df3
 8005c28:	08005cad 	.word	0x08005cad
 8005c2c:	08005df3 	.word	0x08005df3
 8005c30:	08005df3 	.word	0x08005df3
 8005c34:	08005df3 	.word	0x08005df3
 8005c38:	08005cef 	.word	0x08005cef
 8005c3c:	08005df3 	.word	0x08005df3
 8005c40:	08005df3 	.word	0x08005df3
 8005c44:	08005df3 	.word	0x08005df3
 8005c48:	08005d2f 	.word	0x08005d2f
 8005c4c:	08005df3 	.word	0x08005df3
 8005c50:	08005df3 	.word	0x08005df3
 8005c54:	08005df3 	.word	0x08005df3
 8005c58:	08005d71 	.word	0x08005d71
 8005c5c:	08005df3 	.word	0x08005df3
 8005c60:	08005df3 	.word	0x08005df3
 8005c64:	08005df3 	.word	0x08005df3
 8005c68:	08005db1 	.word	0x08005db1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f98c 	bl	8005f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0208 	orr.w	r2, r2, #8
 8005c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0204 	bic.w	r2, r2, #4
 8005c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	619a      	str	r2, [r3, #24]
      break;
 8005caa:	e0a5      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f9fc 	bl	80060b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6999      	ldr	r1, [r3, #24]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	021a      	lsls	r2, r3, #8
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	619a      	str	r2, [r3, #24]
      break;
 8005cec:	e084      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fa65 	bl	80061c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0208 	orr.w	r2, r2, #8
 8005d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0204 	bic.w	r2, r2, #4
 8005d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	61da      	str	r2, [r3, #28]
      break;
 8005d2c:	e064      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 facd 	bl	80062d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	021a      	lsls	r2, r3, #8
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	61da      	str	r2, [r3, #28]
      break;
 8005d6e:	e043      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb16 	bl	80063a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dae:	e023      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fb5a 	bl	8006470 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005df0:	e002      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	75fb      	strb	r3, [r7, #23]
      break;
 8005df6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop

08005e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a40      	ldr	r2, [pc, #256]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <TIM_Base_SetConfig+0x118>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3c      	ldr	r2, [pc, #240]	; (8005f78 <TIM_Base_SetConfig+0x11c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3b      	ldr	r2, [pc, #236]	; (8005f7c <TIM_Base_SetConfig+0x120>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01f      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	; (8005f74 <TIM_Base_SetConfig+0x118>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <TIM_Base_SetConfig+0x11c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2a      	ldr	r2, [pc, #168]	; (8005f7c <TIM_Base_SetConfig+0x120>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a29      	ldr	r2, [pc, #164]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <TIM_Base_SetConfig+0x128>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <TIM_Base_SetConfig+0x12c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0x9a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <TIM_Base_SetConfig+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <TIM_Base_SetConfig+0x114>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <TIM_Base_SetConfig+0xf8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <TIM_Base_SetConfig+0x124>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00b      	beq.n	8005f54 <TIM_Base_SetConfig+0xf8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <TIM_Base_SetConfig+0x128>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_Base_SetConfig+0xf8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <TIM_Base_SetConfig+0x12c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_Base_SetConfig+0xf8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <TIM_Base_SetConfig+0x130>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d103      	bne.n	8005f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	615a      	str	r2, [r3, #20]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800

08005f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f023 0201 	bic.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f023 0302 	bic.w	r3, r3, #2
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2c      	ldr	r2, [pc, #176]	; (800609c <TIM_OC1_SetConfig+0x10c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_OC1_SetConfig+0x80>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <TIM_OC1_SetConfig+0x110>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_OC1_SetConfig+0x80>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TIM_OC1_SetConfig+0x114>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_OC1_SetConfig+0x80>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <TIM_OC1_SetConfig+0x118>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC1_SetConfig+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <TIM_OC1_SetConfig+0x11c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0308 	bic.w	r3, r3, #8
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1b      	ldr	r2, [pc, #108]	; (800609c <TIM_OC1_SetConfig+0x10c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_OC1_SetConfig+0xc2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <TIM_OC1_SetConfig+0x110>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_OC1_SetConfig+0xc2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <TIM_OC1_SetConfig+0x114>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_OC1_SetConfig+0xc2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <TIM_OC1_SetConfig+0x118>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC1_SetConfig+0xc2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a17      	ldr	r2, [pc, #92]	; (80060ac <TIM_OC1_SetConfig+0x11c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40013400 	.word	0x40013400
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800

080060b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f023 0210 	bic.w	r2, r3, #16
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_OC2_SetConfig+0x100>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC2_SetConfig+0x6c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_OC2_SetConfig+0x104>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10d      	bne.n	8006138 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <TIM_OC2_SetConfig+0x100>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00f      	beq.n	8006160 <TIM_OC2_SetConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <TIM_OC2_SetConfig+0x104>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_OC2_SetConfig+0xb0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <TIM_OC2_SetConfig+0x108>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_OC2_SetConfig+0xb0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <TIM_OC2_SetConfig+0x10c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC2_SetConfig+0xb0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a19      	ldr	r2, [pc, #100]	; (80061c0 <TIM_OC2_SetConfig+0x110>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d113      	bne.n	8006188 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <TIM_OC3_SetConfig+0xfc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_OC3_SetConfig+0x6a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <TIM_OC3_SetConfig+0x100>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10d      	bne.n	800624a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1c      	ldr	r2, [pc, #112]	; (80062c0 <TIM_OC3_SetConfig+0xfc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <TIM_OC3_SetConfig+0xae>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <TIM_OC3_SetConfig+0x100>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00b      	beq.n	8006272 <TIM_OC3_SetConfig+0xae>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <TIM_OC3_SetConfig+0x104>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_OC3_SetConfig+0xae>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <TIM_OC3_SetConfig+0x108>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0xae>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <TIM_OC3_SetConfig+0x10c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	031b      	lsls	r3, r3, #12
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <TIM_OC4_SetConfig+0xc0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_OC4_SetConfig+0x84>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a17      	ldr	r2, [pc, #92]	; (8006398 <TIM_OC4_SetConfig+0xc4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC4_SetConfig+0x84>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a16      	ldr	r2, [pc, #88]	; (800639c <TIM_OC4_SetConfig+0xc8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC4_SetConfig+0x84>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <TIM_OC4_SetConfig+0xcc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC4_SetConfig+0x84>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <TIM_OC4_SetConfig+0xd0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d109      	bne.n	800636c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <TIM_OC5_SetConfig+0xb4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_OC5_SetConfig+0x7a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <TIM_OC5_SetConfig+0xb8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_OC5_SetConfig+0x7a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <TIM_OC5_SetConfig+0xbc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_OC5_SetConfig+0x7a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <TIM_OC5_SetConfig+0xc0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC5_SetConfig+0x7a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <TIM_OC5_SetConfig+0xc4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d109      	bne.n	8006436 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006428:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800

08006470 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	051b      	lsls	r3, r3, #20
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a18      	ldr	r2, [pc, #96]	; (8006528 <TIM_OC6_SetConfig+0xb8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00f      	beq.n	80064ec <TIM_OC6_SetConfig+0x7c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <TIM_OC6_SetConfig+0xbc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00b      	beq.n	80064ec <TIM_OC6_SetConfig+0x7c>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a16      	ldr	r2, [pc, #88]	; (8006530 <TIM_OC6_SetConfig+0xc0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_OC6_SetConfig+0x7c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <TIM_OC6_SetConfig+0xc4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_OC6_SetConfig+0x7c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a14      	ldr	r2, [pc, #80]	; (8006538 <TIM_OC6_SetConfig+0xc8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d109      	bne.n	8006500 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	029b      	lsls	r3, r3, #10
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40013400 	.word	0x40013400
 8006530:	40014000 	.word	0x40014000
 8006534:	40014400 	.word	0x40014400
 8006538:	40014800 	.word	0x40014800

0800653c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2201      	movs	r2, #1
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	43db      	mvns	r3, r3
 800655e:	401a      	ands	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	fa01 f303 	lsl.w	r3, r1, r3
 8006574:	431a      	orrs	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800659c:	2302      	movs	r3, #2
 800659e:	e068      	b.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a2e      	ldr	r2, [pc, #184]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1e      	ldr	r2, [pc, #120]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01d      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006612:	d018      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1b      	ldr	r2, [pc, #108]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1a      	ldr	r2, [pc, #104]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a13      	ldr	r2, [pc, #76]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a14      	ldr	r2, [pc, #80]	; (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10c      	bne.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4313      	orrs	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40014000 	.word	0x40014000

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e040      	b.n	8006768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb fa10 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fec8 	bl	80074b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc0d 	bl	8006f40 <UART_SetConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e01b      	b.n	8006768 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800673e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800674e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 ff47 	bl	80075f4 <UART_CheckIdleState>
 8006766:	4603      	mov	r3, r0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006784:	2b20      	cmp	r3, #32
 8006786:	d178      	bne.n	800687a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Transmit+0x24>
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e071      	b.n	800687c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2221      	movs	r2, #33	; 0x21
 80067a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a6:	f7fb fbe9 	bl	8001f7c <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c4:	d108      	bne.n	80067d8 <HAL_UART_Transmit+0x68>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	e003      	b.n	80067e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e0:	e030      	b.n	8006844 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 ffa9 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e03c      	b.n	800687c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	881a      	ldrh	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006814:	b292      	uxth	r2, r2
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	3302      	adds	r3, #2
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	e008      	b.n	8006832 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	b292      	uxth	r2, r2
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	3301      	adds	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1c8      	bne.n	80067e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	2140      	movs	r1, #64	; 0x40
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 ff72 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e005      	b.n	800687c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e000      	b.n	800687c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800687a:	2302      	movs	r3, #2
  }
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006884:	b480      	push	{r7}
 8006886:	b08b      	sub	sp, #44	; 0x2c
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006896:	2b20      	cmp	r3, #32
 8006898:	d147      	bne.n	800692a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_UART_Transmit_IT+0x22>
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e040      	b.n	800692c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2221      	movs	r2, #33	; 0x21
 80068d2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068dc:	d107      	bne.n	80068ee <HAL_UART_Transmit_IT+0x6a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <HAL_UART_Transmit_IT+0xb4>)
 80068ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80068ec:	e002      	b.n	80068f4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a12      	ldr	r2, [pc, #72]	; (800693c <HAL_UART_Transmit_IT+0xb8>)
 80068f2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	69f9      	ldr	r1, [r7, #28]
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e6      	bne.n	80068f4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	e000      	b.n	800692c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800692a:	2302      	movs	r3, #2
  }
}
 800692c:	4618      	mov	r0, r3
 800692e:	372c      	adds	r7, #44	; 0x2c
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	080079bf 	.word	0x080079bf
 800693c:	08007907 	.word	0x08007907

08006940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b0ba      	sub	sp, #232	; 0xe8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006966:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800696a:	f640 030f 	movw	r3, #2063	; 0x80f
 800696e:	4013      	ands	r3, r2
 8006970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d115      	bne.n	80069a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00f      	beq.n	80069a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 82ae 	beq.w	8006efa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
      }
      return;
 80069a6:	e2a8      	b.n	8006efa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80069a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8117 	beq.w	8006be0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069c2:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <HAL_UART_IRQHandler+0x298>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 810a 	beq.w	8006be0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0xbc>
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2201      	movs	r2, #1
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <HAL_UART_IRQHandler+0xec>
 8006a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a22:	f043 0204 	orr.w	r2, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d011      	beq.n	8006a5c <HAL_UART_IRQHandler+0x11c>
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a52:	f043 0202 	orr.w	r2, r3, #2
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d017      	beq.n	8006a98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2208      	movs	r2, #8
 8006a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8e:	f043 0208 	orr.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d012      	beq.n	8006aca <HAL_UART_IRQHandler+0x18a>
 8006aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00c      	beq.n	8006aca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8214 	beq.w	8006efe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d005      	beq.n	8006b22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04f      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fe75 	bl	8007812 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d141      	bne.n	8006bba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1d9      	bne.n	8006b36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d013      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <HAL_UART_IRQHandler+0x29c>)
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fb fb4b 	bl	8002232 <HAL_DMA_Abort_IT>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	e00f      	b.n	8006bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9ae 	bl	8006f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	e00b      	b.n	8006bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9aa 	bl	8006f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	e007      	b.n	8006bd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9a6 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006bd0:	e195      	b.n	8006efe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd2:	bf00      	nop
    return;
 8006bd4:	e193      	b.n	8006efe <HAL_UART_IRQHandler+0x5be>
 8006bd6:	bf00      	nop
 8006bd8:	04000120 	.word	0x04000120
 8006bdc:	080078db 	.word	0x080078db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	f040 814e 	bne.w	8006e86 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 8147 	beq.w	8006e86 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8140 	beq.w	8006e86 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	f040 80b8 	bne.w	8006d8e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8167 	beq.w	8006f02 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	f080 815f 	bcs.w	8006f02 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 8086 	bne.w	8006d6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1da      	bne.n	8006c60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e1      	bne.n	8006caa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e3      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3c:	f023 0310 	bic.w	r3, r3, #16
 8006d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e4      	bne.n	8006d2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fb fa25 	bl	80021b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8ce 	bl	8006f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d8c:	e0b9      	b.n	8006f02 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80ab 	beq.w	8006f06 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80a6 	beq.w	8006f06 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e4      	bne.n	8006dba <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e14:	633a      	str	r2, [r7, #48]	; 0x30
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e3      	bne.n	8006df0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69b9      	ldr	r1, [r7, #24]
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e4      	bne.n	8006e3c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f852 	bl	8006f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e84:	e03f      	b.n	8006f06 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x570>
 8006e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fe12 	bl	8007ad2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eae:	e02d      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01c      	beq.n	8006f0a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
    }
    return;
 8006ed8:	e017      	b.n	8006f0a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d012      	beq.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
 8006ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fdc3 	bl	8007a7e <UART_EndTransmit_IT>
    return;
 8006ef8:	e008      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006efa:	bf00      	nop
 8006efc:	e006      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006efe:	bf00      	nop
 8006f00:	e004      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006f0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006f0c:	37e8      	adds	r7, #232	; 0xe8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop

08006f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f44:	b08a      	sub	sp, #40	; 0x28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4ba4      	ldr	r3, [pc, #656]	; (8007200 <UART_SetConfig+0x2c0>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a99      	ldr	r2, [pc, #612]	; (8007204 <UART_SetConfig+0x2c4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a90      	ldr	r2, [pc, #576]	; (8007208 <UART_SetConfig+0x2c8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d126      	bne.n	8007018 <UART_SetConfig+0xd8>
 8006fca:	4b90      	ldr	r3, [pc, #576]	; (800720c <UART_SetConfig+0x2cc>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d81b      	bhi.n	8007010 <UART_SetConfig+0xd0>
 8006fd8:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <UART_SetConfig+0xa0>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	08006ff1 	.word	0x08006ff1
 8006fe4:	08007001 	.word	0x08007001
 8006fe8:	08006ff9 	.word	0x08006ff9
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e116      	b.n	8007226 <UART_SetConfig+0x2e6>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e112      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007006:	e10e      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700e:	e10a      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007016:	e106      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a7c      	ldr	r2, [pc, #496]	; (8007210 <UART_SetConfig+0x2d0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d138      	bne.n	8007094 <UART_SetConfig+0x154>
 8007022:	4b7a      	ldr	r3, [pc, #488]	; (800720c <UART_SetConfig+0x2cc>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007028:	f003 030c 	and.w	r3, r3, #12
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d82d      	bhi.n	800708c <UART_SetConfig+0x14c>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <UART_SetConfig+0xf8>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800708d 	.word	0x0800708d
 8007044:	0800708d 	.word	0x0800708d
 8007048:	0800707d 	.word	0x0800707d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	0800708d 	.word	0x0800708d
 8007054:	0800708d 	.word	0x0800708d
 8007058:	08007075 	.word	0x08007075
 800705c:	0800708d 	.word	0x0800708d
 8007060:	0800708d 	.word	0x0800708d
 8007064:	0800708d 	.word	0x0800708d
 8007068:	08007085 	.word	0x08007085
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007072:	e0d8      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007074:	2302      	movs	r3, #2
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707a:	e0d4      	b.n	8007226 <UART_SetConfig+0x2e6>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007082:	e0d0      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800708a:	e0cc      	b.n	8007226 <UART_SetConfig+0x2e6>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007092:	e0c8      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a5e      	ldr	r2, [pc, #376]	; (8007214 <UART_SetConfig+0x2d4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d125      	bne.n	80070ea <UART_SetConfig+0x1aa>
 800709e:	4b5b      	ldr	r3, [pc, #364]	; (800720c <UART_SetConfig+0x2cc>)
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070a8:	2b30      	cmp	r3, #48	; 0x30
 80070aa:	d016      	beq.n	80070da <UART_SetConfig+0x19a>
 80070ac:	2b30      	cmp	r3, #48	; 0x30
 80070ae:	d818      	bhi.n	80070e2 <UART_SetConfig+0x1a2>
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d00a      	beq.n	80070ca <UART_SetConfig+0x18a>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d814      	bhi.n	80070e2 <UART_SetConfig+0x1a2>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <UART_SetConfig+0x182>
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d008      	beq.n	80070d2 <UART_SetConfig+0x192>
 80070c0:	e00f      	b.n	80070e2 <UART_SetConfig+0x1a2>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c8:	e0ad      	b.n	8007226 <UART_SetConfig+0x2e6>
 80070ca:	2302      	movs	r3, #2
 80070cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d0:	e0a9      	b.n	8007226 <UART_SetConfig+0x2e6>
 80070d2:	2304      	movs	r3, #4
 80070d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d8:	e0a5      	b.n	8007226 <UART_SetConfig+0x2e6>
 80070da:	2308      	movs	r3, #8
 80070dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e0:	e0a1      	b.n	8007226 <UART_SetConfig+0x2e6>
 80070e2:	2310      	movs	r3, #16
 80070e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e8:	e09d      	b.n	8007226 <UART_SetConfig+0x2e6>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a4a      	ldr	r2, [pc, #296]	; (8007218 <UART_SetConfig+0x2d8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d125      	bne.n	8007140 <UART_SetConfig+0x200>
 80070f4:	4b45      	ldr	r3, [pc, #276]	; (800720c <UART_SetConfig+0x2cc>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007100:	d016      	beq.n	8007130 <UART_SetConfig+0x1f0>
 8007102:	2bc0      	cmp	r3, #192	; 0xc0
 8007104:	d818      	bhi.n	8007138 <UART_SetConfig+0x1f8>
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d00a      	beq.n	8007120 <UART_SetConfig+0x1e0>
 800710a:	2b80      	cmp	r3, #128	; 0x80
 800710c:	d814      	bhi.n	8007138 <UART_SetConfig+0x1f8>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <UART_SetConfig+0x1d8>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d008      	beq.n	8007128 <UART_SetConfig+0x1e8>
 8007116:	e00f      	b.n	8007138 <UART_SetConfig+0x1f8>
 8007118:	2300      	movs	r3, #0
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711e:	e082      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007126:	e07e      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712e:	e07a      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007136:	e076      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800713e:	e072      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a35      	ldr	r2, [pc, #212]	; (800721c <UART_SetConfig+0x2dc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d12a      	bne.n	80071a0 <UART_SetConfig+0x260>
 800714a:	4b30      	ldr	r3, [pc, #192]	; (800720c <UART_SetConfig+0x2cc>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007158:	d01a      	beq.n	8007190 <UART_SetConfig+0x250>
 800715a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800715e:	d81b      	bhi.n	8007198 <UART_SetConfig+0x258>
 8007160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007164:	d00c      	beq.n	8007180 <UART_SetConfig+0x240>
 8007166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716a:	d815      	bhi.n	8007198 <UART_SetConfig+0x258>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <UART_SetConfig+0x238>
 8007170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007174:	d008      	beq.n	8007188 <UART_SetConfig+0x248>
 8007176:	e00f      	b.n	8007198 <UART_SetConfig+0x258>
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717e:	e052      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007180:	2302      	movs	r3, #2
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e04e      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007188:	2304      	movs	r3, #4
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e04a      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007190:	2308      	movs	r3, #8
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e046      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e042      	b.n	8007226 <UART_SetConfig+0x2e6>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a17      	ldr	r2, [pc, #92]	; (8007204 <UART_SetConfig+0x2c4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d13a      	bne.n	8007220 <UART_SetConfig+0x2e0>
 80071aa:	4b18      	ldr	r3, [pc, #96]	; (800720c <UART_SetConfig+0x2cc>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071b8:	d01a      	beq.n	80071f0 <UART_SetConfig+0x2b0>
 80071ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071be:	d81b      	bhi.n	80071f8 <UART_SetConfig+0x2b8>
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c4:	d00c      	beq.n	80071e0 <UART_SetConfig+0x2a0>
 80071c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ca:	d815      	bhi.n	80071f8 <UART_SetConfig+0x2b8>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <UART_SetConfig+0x298>
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d4:	d008      	beq.n	80071e8 <UART_SetConfig+0x2a8>
 80071d6:	e00f      	b.n	80071f8 <UART_SetConfig+0x2b8>
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e022      	b.n	8007226 <UART_SetConfig+0x2e6>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e01e      	b.n	8007226 <UART_SetConfig+0x2e6>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e01a      	b.n	8007226 <UART_SetConfig+0x2e6>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f6:	e016      	b.n	8007226 <UART_SetConfig+0x2e6>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fe:	e012      	b.n	8007226 <UART_SetConfig+0x2e6>
 8007200:	efff69f3 	.word	0xefff69f3
 8007204:	40008000 	.word	0x40008000
 8007208:	40013800 	.word	0x40013800
 800720c:	40021000 	.word	0x40021000
 8007210:	40004400 	.word	0x40004400
 8007214:	40004800 	.word	0x40004800
 8007218:	40004c00 	.word	0x40004c00
 800721c:	40005000 	.word	0x40005000
 8007220:	2310      	movs	r3, #16
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a9f      	ldr	r2, [pc, #636]	; (80074a8 <UART_SetConfig+0x568>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d17a      	bne.n	8007326 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007234:	2b08      	cmp	r3, #8
 8007236:	d824      	bhi.n	8007282 <UART_SetConfig+0x342>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x300>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007265 	.word	0x08007265
 8007244:	08007283 	.word	0x08007283
 8007248:	0800726d 	.word	0x0800726d
 800724c:	08007283 	.word	0x08007283
 8007250:	08007273 	.word	0x08007273
 8007254:	08007283 	.word	0x08007283
 8007258:	08007283 	.word	0x08007283
 800725c:	08007283 	.word	0x08007283
 8007260:	0800727b 	.word	0x0800727b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007264:	f7fd fb6e 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8007268:	61f8      	str	r0, [r7, #28]
        break;
 800726a:	e010      	b.n	800728e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4b8f      	ldr	r3, [pc, #572]	; (80074ac <UART_SetConfig+0x56c>)
 800726e:	61fb      	str	r3, [r7, #28]
        break;
 8007270:	e00d      	b.n	800728e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fd facf 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8007276:	61f8      	str	r0, [r7, #28]
        break;
 8007278:	e009      	b.n	800728e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800727e:	61fb      	str	r3, [r7, #28]
        break;
 8007280:	e005      	b.n	800728e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800728c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80fb 	beq.w	800748c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4413      	add	r3, r2
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d305      	bcc.n	80072b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d903      	bls.n	80072ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072b8:	e0e8      	b.n	800748c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2200      	movs	r2, #0
 80072be:	461c      	mov	r4, r3
 80072c0:	4615      	mov	r5, r2
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	022b      	lsls	r3, r5, #8
 80072cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072d0:	0222      	lsls	r2, r4, #8
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	6849      	ldr	r1, [r1, #4]
 80072d6:	0849      	lsrs	r1, r1, #1
 80072d8:	2000      	movs	r0, #0
 80072da:	4688      	mov	r8, r1
 80072dc:	4681      	mov	r9, r0
 80072de:	eb12 0a08 	adds.w	sl, r2, r8
 80072e2:	eb43 0b09 	adc.w	fp, r3, r9
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f4:	4650      	mov	r0, sl
 80072f6:	4659      	mov	r1, fp
 80072f8:	f7f9 fcc6 	bl	8000c88 <__aeabi_uldivmod>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4613      	mov	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800730a:	d308      	bcc.n	800731e <UART_SetConfig+0x3de>
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007312:	d204      	bcs.n	800731e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	e0b6      	b.n	800748c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007324:	e0b2      	b.n	800748c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732e:	d15e      	bne.n	80073ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007334:	2b08      	cmp	r3, #8
 8007336:	d828      	bhi.n	800738a <UART_SetConfig+0x44a>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x400>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007365 	.word	0x08007365
 8007344:	0800736d 	.word	0x0800736d
 8007348:	08007375 	.word	0x08007375
 800734c:	0800738b 	.word	0x0800738b
 8007350:	0800737b 	.word	0x0800737b
 8007354:	0800738b 	.word	0x0800738b
 8007358:	0800738b 	.word	0x0800738b
 800735c:	0800738b 	.word	0x0800738b
 8007360:	08007383 	.word	0x08007383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007364:	f7fd faee 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8007368:	61f8      	str	r0, [r7, #28]
        break;
 800736a:	e014      	b.n	8007396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fd fb00 	bl	8004970 <HAL_RCC_GetPCLK2Freq>
 8007370:	61f8      	str	r0, [r7, #28]
        break;
 8007372:	e010      	b.n	8007396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007374:	4b4d      	ldr	r3, [pc, #308]	; (80074ac <UART_SetConfig+0x56c>)
 8007376:	61fb      	str	r3, [r7, #28]
        break;
 8007378:	e00d      	b.n	8007396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737a:	f7fd fa4b 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 800737e:	61f8      	str	r0, [r7, #28]
        break;
 8007380:	e009      	b.n	8007396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007386:	61fb      	str	r3, [r7, #28]
        break;
 8007388:	e005      	b.n	8007396 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d077      	beq.n	800748c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	005a      	lsls	r2, r3, #1
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	441a      	add	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d916      	bls.n	80073e6 <UART_SetConfig+0x4a6>
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073be:	d212      	bcs.n	80073e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f023 030f 	bic.w	r3, r3, #15
 80073c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	4313      	orrs	r3, r2
 80073da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	8afa      	ldrh	r2, [r7, #22]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e052      	b.n	800748c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073ec:	e04e      	b.n	800748c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d827      	bhi.n	8007446 <UART_SetConfig+0x506>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <UART_SetConfig+0x4bc>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007421 	.word	0x08007421
 8007400:	08007429 	.word	0x08007429
 8007404:	08007431 	.word	0x08007431
 8007408:	08007447 	.word	0x08007447
 800740c:	08007437 	.word	0x08007437
 8007410:	08007447 	.word	0x08007447
 8007414:	08007447 	.word	0x08007447
 8007418:	08007447 	.word	0x08007447
 800741c:	0800743f 	.word	0x0800743f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fd fa90 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8007424:	61f8      	str	r0, [r7, #28]
        break;
 8007426:	e014      	b.n	8007452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007428:	f7fd faa2 	bl	8004970 <HAL_RCC_GetPCLK2Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e010      	b.n	8007452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <UART_SetConfig+0x56c>)
 8007432:	61fb      	str	r3, [r7, #28]
        break;
 8007434:	e00d      	b.n	8007452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007436:	f7fd f9ed 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 800743a:	61f8      	str	r0, [r7, #28]
        break;
 800743c:	e009      	b.n	8007452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007442:	61fb      	str	r3, [r7, #28]
        break;
 8007444:	e005      	b.n	8007452 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007450:	bf00      	nop
    }

    if (pclk != 0U)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d019      	beq.n	800748c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	085a      	lsrs	r2, r3, #1
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d909      	bls.n	8007486 <UART_SetConfig+0x546>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007478:	d205      	bcs.n	8007486 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	e002      	b.n	800748c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800749c:	4618      	mov	r0, r3
 800749e:	3728      	adds	r7, #40	; 0x28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	40008000 	.word	0x40008000
 80074ac:	00f42400 	.word	0x00f42400

080074b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00a      	beq.n	8007562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ae:	d10a      	bne.n	80075c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b098      	sub	sp, #96	; 0x60
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007604:	f7fa fcba 	bl	8001f7c <HAL_GetTick>
 8007608:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b08      	cmp	r3, #8
 8007616:	d12e      	bne.n	8007676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007620:	2200      	movs	r2, #0
 8007622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f88c 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d021      	beq.n	8007676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007646:	653b      	str	r3, [r7, #80]	; 0x50
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007650:	647b      	str	r3, [r7, #68]	; 0x44
 8007652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e062      	b.n	800773c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d149      	bne.n	8007718 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768c:	2200      	movs	r2, #0
 800768e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f856 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d03c      	beq.n	8007718 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	623b      	str	r3, [r7, #32]
   return(result);
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30
 80076be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e6      	bne.n	800769e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3308      	adds	r3, #8
 80076d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f0:	61fa      	str	r2, [r7, #28]
 80076f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	617b      	str	r3, [r7, #20]
   return(result);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e011      	b.n	800773c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3758      	adds	r7, #88	; 0x58
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007754:	e049      	b.n	80077ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775c:	d045      	beq.n	80077ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775e:	f7fa fc0d 	bl	8001f7c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	429a      	cmp	r2, r3
 800776c:	d302      	bcc.n	8007774 <UART_WaitOnFlagUntilTimeout+0x30>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e048      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d031      	beq.n	80077ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b08      	cmp	r3, #8
 8007792:	d110      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2208      	movs	r2, #8
 800779a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f838 	bl	8007812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2208      	movs	r2, #8
 80077a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e029      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c4:	d111      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f81e 	bl	8007812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e00f      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	4013      	ands	r3, r2
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	bf0c      	ite	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	2300      	movne	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	429a      	cmp	r2, r3
 8007806:	d0a6      	beq.n	8007756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007812:	b480      	push	{r7}
 8007814:	b095      	sub	sp, #84	; 0x54
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007838:	643b      	str	r3, [r7, #64]	; 0x40
 800783a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800783e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e6      	bne.n	800781a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	61fb      	str	r3, [r7, #28]
   return(result);
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	64bb      	str	r3, [r7, #72]	; 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3308      	adds	r3, #8
 800786a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800786c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e5      	bne.n	800784c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	2b01      	cmp	r3, #1
 8007886:	d118      	bne.n	80078ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	60bb      	str	r3, [r7, #8]
   return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 0310 	bic.w	r3, r3, #16
 800789c:	647b      	str	r3, [r7, #68]	; 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	613b      	str	r3, [r7, #16]
   return(result);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078ce:	bf00      	nop
 80078d0:	3754      	adds	r7, #84	; 0x54
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fb0b 	bl	8006f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b08f      	sub	sp, #60	; 0x3c
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007912:	2b21      	cmp	r3, #33	; 0x21
 8007914:	d14d      	bne.n	80079b2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d132      	bne.n	8007988 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007942:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	60bb      	str	r3, [r7, #8]
   return(result);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6979      	ldr	r1, [r7, #20]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	613b      	str	r3, [r7, #16]
   return(result);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e6      	bne.n	8007954 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007986:	e014      	b.n	80079b2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	b292      	uxth	r2, r2
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80079b2:	bf00      	nop
 80079b4:	373c      	adds	r7, #60	; 0x3c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079be:	b480      	push	{r7}
 80079c0:	b091      	sub	sp, #68	; 0x44
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ca:	2b21      	cmp	r3, #33	; 0x21
 80079cc:	d151      	bne.n	8007a72 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d132      	bne.n	8007a40 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	623b      	str	r3, [r7, #32]
   return(result);
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	633b      	str	r3, [r7, #48]	; 0x30
 80079fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	69b9      	ldr	r1, [r7, #24]
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	617b      	str	r3, [r7, #20]
   return(result);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007a3e:	e018      	b.n	8007a72 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a52:	b292      	uxth	r2, r2
 8007a54:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	1c9a      	adds	r2, r3, #2
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007a72:	bf00      	nop
 8007a74:	3744      	adds	r7, #68	; 0x44
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	61fb      	str	r3, [r7, #28]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f9 fab1 	bl	800102c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aca:	bf00      	nop
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <__cvt>:
 8007ae6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aea:	ec55 4b10 	vmov	r4, r5, d0
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	460e      	mov	r6, r1
 8007af2:	4619      	mov	r1, r3
 8007af4:	462b      	mov	r3, r5
 8007af6:	bfbb      	ittet	lt
 8007af8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007afc:	461d      	movlt	r5, r3
 8007afe:	2300      	movge	r3, #0
 8007b00:	232d      	movlt	r3, #45	; 0x2d
 8007b02:	700b      	strb	r3, [r1, #0]
 8007b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	f023 0820 	bic.w	r8, r3, #32
 8007b10:	bfbc      	itt	lt
 8007b12:	4622      	movlt	r2, r4
 8007b14:	4614      	movlt	r4, r2
 8007b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b1a:	d005      	beq.n	8007b28 <__cvt+0x42>
 8007b1c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b20:	d100      	bne.n	8007b24 <__cvt+0x3e>
 8007b22:	3601      	adds	r6, #1
 8007b24:	2102      	movs	r1, #2
 8007b26:	e000      	b.n	8007b2a <__cvt+0x44>
 8007b28:	2103      	movs	r1, #3
 8007b2a:	ab03      	add	r3, sp, #12
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	ab02      	add	r3, sp, #8
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	ec45 4b10 	vmov	d0, r4, r5
 8007b36:	4653      	mov	r3, sl
 8007b38:	4632      	mov	r2, r6
 8007b3a:	f001 f8b5 	bl	8008ca8 <_dtoa_r>
 8007b3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b42:	4607      	mov	r7, r0
 8007b44:	d102      	bne.n	8007b4c <__cvt+0x66>
 8007b46:	f019 0f01 	tst.w	r9, #1
 8007b4a:	d022      	beq.n	8007b92 <__cvt+0xac>
 8007b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b50:	eb07 0906 	add.w	r9, r7, r6
 8007b54:	d110      	bne.n	8007b78 <__cvt+0x92>
 8007b56:	783b      	ldrb	r3, [r7, #0]
 8007b58:	2b30      	cmp	r3, #48	; 0x30
 8007b5a:	d10a      	bne.n	8007b72 <__cvt+0x8c>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4620      	mov	r0, r4
 8007b62:	4629      	mov	r1, r5
 8007b64:	f7f8 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b68:	b918      	cbnz	r0, 8007b72 <__cvt+0x8c>
 8007b6a:	f1c6 0601 	rsb	r6, r6, #1
 8007b6e:	f8ca 6000 	str.w	r6, [sl]
 8007b72:	f8da 3000 	ldr.w	r3, [sl]
 8007b76:	4499      	add	r9, r3
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b84:	b108      	cbz	r0, 8007b8a <__cvt+0xa4>
 8007b86:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b8a:	2230      	movs	r2, #48	; 0x30
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	454b      	cmp	r3, r9
 8007b90:	d307      	bcc.n	8007ba2 <__cvt+0xbc>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b96:	1bdb      	subs	r3, r3, r7
 8007b98:	4638      	mov	r0, r7
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	b004      	add	sp, #16
 8007b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba2:	1c59      	adds	r1, r3, #1
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e7f0      	b.n	8007b8c <__cvt+0xa6>

08007baa <__exponent>:
 8007baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bac:	4603      	mov	r3, r0
 8007bae:	2900      	cmp	r1, #0
 8007bb0:	bfb8      	it	lt
 8007bb2:	4249      	neglt	r1, r1
 8007bb4:	f803 2b02 	strb.w	r2, [r3], #2
 8007bb8:	bfb4      	ite	lt
 8007bba:	222d      	movlt	r2, #45	; 0x2d
 8007bbc:	222b      	movge	r2, #43	; 0x2b
 8007bbe:	2909      	cmp	r1, #9
 8007bc0:	7042      	strb	r2, [r0, #1]
 8007bc2:	dd2a      	ble.n	8007c1a <__exponent+0x70>
 8007bc4:	f10d 0207 	add.w	r2, sp, #7
 8007bc8:	4617      	mov	r7, r2
 8007bca:	260a      	movs	r6, #10
 8007bcc:	4694      	mov	ip, r2
 8007bce:	fb91 f5f6 	sdiv	r5, r1, r6
 8007bd2:	fb06 1415 	mls	r4, r6, r5, r1
 8007bd6:	3430      	adds	r4, #48	; 0x30
 8007bd8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007bdc:	460c      	mov	r4, r1
 8007bde:	2c63      	cmp	r4, #99	; 0x63
 8007be0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007be4:	4629      	mov	r1, r5
 8007be6:	dcf1      	bgt.n	8007bcc <__exponent+0x22>
 8007be8:	3130      	adds	r1, #48	; 0x30
 8007bea:	f1ac 0402 	sub.w	r4, ip, #2
 8007bee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007bf2:	1c41      	adds	r1, r0, #1
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	42ba      	cmp	r2, r7
 8007bf8:	d30a      	bcc.n	8007c10 <__exponent+0x66>
 8007bfa:	f10d 0209 	add.w	r2, sp, #9
 8007bfe:	eba2 020c 	sub.w	r2, r2, ip
 8007c02:	42bc      	cmp	r4, r7
 8007c04:	bf88      	it	hi
 8007c06:	2200      	movhi	r2, #0
 8007c08:	4413      	add	r3, r2
 8007c0a:	1a18      	subs	r0, r3, r0
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c10:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c14:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c18:	e7ed      	b.n	8007bf6 <__exponent+0x4c>
 8007c1a:	2330      	movs	r3, #48	; 0x30
 8007c1c:	3130      	adds	r1, #48	; 0x30
 8007c1e:	7083      	strb	r3, [r0, #2]
 8007c20:	70c1      	strb	r1, [r0, #3]
 8007c22:	1d03      	adds	r3, r0, #4
 8007c24:	e7f1      	b.n	8007c0a <__exponent+0x60>
	...

08007c28 <_printf_float>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	ed2d 8b02 	vpush	{d8}
 8007c30:	b08d      	sub	sp, #52	; 0x34
 8007c32:	460c      	mov	r4, r1
 8007c34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c38:	4616      	mov	r6, r2
 8007c3a:	461f      	mov	r7, r3
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	f000 ff2b 	bl	8008a98 <_localeconv_r>
 8007c42:	f8d0 a000 	ldr.w	sl, [r0]
 8007c46:	4650      	mov	r0, sl
 8007c48:	f7f8 fb12 	bl	8000270 <strlen>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	f8d8 3000 	ldr.w	r3, [r8]
 8007c58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c5c:	3307      	adds	r3, #7
 8007c5e:	f023 0307 	bic.w	r3, r3, #7
 8007c62:	f103 0208 	add.w	r2, r3, #8
 8007c66:	f8c8 2000 	str.w	r2, [r8]
 8007c6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c78:	ee08 0a10 	vmov	s16, r0
 8007c7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c84:	4b9e      	ldr	r3, [pc, #632]	; (8007f00 <_printf_float+0x2d8>)
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8a:	f7f8 ff4f 	bl	8000b2c <__aeabi_dcmpun>
 8007c8e:	bb88      	cbnz	r0, 8007cf4 <_printf_float+0xcc>
 8007c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c94:	4b9a      	ldr	r3, [pc, #616]	; (8007f00 <_printf_float+0x2d8>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c9a:	f7f8 ff29 	bl	8000af0 <__aeabi_dcmple>
 8007c9e:	bb48      	cbnz	r0, 8007cf4 <_printf_float+0xcc>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 ff18 	bl	8000adc <__aeabi_dcmplt>
 8007cac:	b110      	cbz	r0, 8007cb4 <_printf_float+0x8c>
 8007cae:	232d      	movs	r3, #45	; 0x2d
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	4a93      	ldr	r2, [pc, #588]	; (8007f04 <_printf_float+0x2dc>)
 8007cb6:	4b94      	ldr	r3, [pc, #592]	; (8007f08 <_printf_float+0x2e0>)
 8007cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cbc:	bf94      	ite	ls
 8007cbe:	4690      	movls	r8, r2
 8007cc0:	4698      	movhi	r8, r3
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	9b05      	ldr	r3, [sp, #20]
 8007cc8:	f023 0304 	bic.w	r3, r3, #4
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	9700      	str	r7, [sp, #0]
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f9da 	bl	8008094 <_printf_common>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f040 8090 	bne.w	8007e06 <_printf_float+0x1de>
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cea:	b00d      	add	sp, #52	; 0x34
 8007cec:	ecbd 8b02 	vpop	{d8}
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 ff16 	bl	8000b2c <__aeabi_dcmpun>
 8007d00:	b140      	cbz	r0, 8007d14 <_printf_float+0xec>
 8007d02:	464b      	mov	r3, r9
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfbc      	itt	lt
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d0e:	4a7f      	ldr	r2, [pc, #508]	; (8007f0c <_printf_float+0x2e4>)
 8007d10:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <_printf_float+0x2e8>)
 8007d12:	e7d1      	b.n	8007cb8 <_printf_float+0x90>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d1a:	9206      	str	r2, [sp, #24]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	d13f      	bne.n	8007da0 <_printf_float+0x178>
 8007d20:	2306      	movs	r3, #6
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	6861      	ldr	r1, [r4, #4]
 8007d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9303      	str	r3, [sp, #12]
 8007d30:	ab0a      	add	r3, sp, #40	; 0x28
 8007d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d36:	ab09      	add	r3, sp, #36	; 0x24
 8007d38:	ec49 8b10 	vmov	d0, r8, r9
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	6022      	str	r2, [r4, #0]
 8007d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff fece 	bl	8007ae6 <__cvt>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4e:	2b47      	cmp	r3, #71	; 0x47
 8007d50:	4680      	mov	r8, r0
 8007d52:	d108      	bne.n	8007d66 <_printf_float+0x13e>
 8007d54:	1cc8      	adds	r0, r1, #3
 8007d56:	db02      	blt.n	8007d5e <_printf_float+0x136>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	dd41      	ble.n	8007de2 <_printf_float+0x1ba>
 8007d5e:	f1ab 0302 	sub.w	r3, fp, #2
 8007d62:	fa5f fb83 	uxtb.w	fp, r3
 8007d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d6a:	d820      	bhi.n	8007dae <_printf_float+0x186>
 8007d6c:	3901      	subs	r1, #1
 8007d6e:	465a      	mov	r2, fp
 8007d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d74:	9109      	str	r1, [sp, #36]	; 0x24
 8007d76:	f7ff ff18 	bl	8007baa <__exponent>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7c:	1813      	adds	r3, r2, r0
 8007d7e:	2a01      	cmp	r2, #1
 8007d80:	4681      	mov	r9, r0
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	dc02      	bgt.n	8007d8c <_printf_float+0x164>
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	07d2      	lsls	r2, r2, #31
 8007d8a:	d501      	bpl.n	8007d90 <_printf_float+0x168>
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d09c      	beq.n	8007cd2 <_printf_float+0xaa>
 8007d98:	232d      	movs	r3, #45	; 0x2d
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9e:	e798      	b.n	8007cd2 <_printf_float+0xaa>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	2a47      	cmp	r2, #71	; 0x47
 8007da4:	d1be      	bne.n	8007d24 <_printf_float+0xfc>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1bc      	bne.n	8007d24 <_printf_float+0xfc>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7b9      	b.n	8007d22 <_printf_float+0xfa>
 8007dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007db2:	d118      	bne.n	8007de6 <_printf_float+0x1be>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	dd0b      	ble.n	8007dd2 <_printf_float+0x1aa>
 8007dba:	6121      	str	r1, [r4, #16]
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_printf_float+0x19c>
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d502      	bpl.n	8007dca <_printf_float+0x1a2>
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	440b      	add	r3, r1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dcc:	f04f 0900 	mov.w	r9, #0
 8007dd0:	e7de      	b.n	8007d90 <_printf_float+0x168>
 8007dd2:	b913      	cbnz	r3, 8007dda <_printf_float+0x1b2>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	07d2      	lsls	r2, r2, #31
 8007dd8:	d501      	bpl.n	8007dde <_printf_float+0x1b6>
 8007dda:	3302      	adds	r3, #2
 8007ddc:	e7f4      	b.n	8007dc8 <_printf_float+0x1a0>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7f2      	b.n	8007dc8 <_printf_float+0x1a0>
 8007de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	4299      	cmp	r1, r3
 8007dea:	db05      	blt.n	8007df8 <_printf_float+0x1d0>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	6121      	str	r1, [r4, #16]
 8007df0:	07d8      	lsls	r0, r3, #31
 8007df2:	d5ea      	bpl.n	8007dca <_printf_float+0x1a2>
 8007df4:	1c4b      	adds	r3, r1, #1
 8007df6:	e7e7      	b.n	8007dc8 <_printf_float+0x1a0>
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	bfd4      	ite	le
 8007dfc:	f1c1 0202 	rsble	r2, r1, #2
 8007e00:	2201      	movgt	r2, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	e7e0      	b.n	8007dc8 <_printf_float+0x1a0>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	055a      	lsls	r2, r3, #21
 8007e0a:	d407      	bmi.n	8007e1c <_printf_float+0x1f4>
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	4642      	mov	r2, r8
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	d12c      	bne.n	8007e74 <_printf_float+0x24c>
 8007e1a:	e764      	b.n	8007ce6 <_printf_float+0xbe>
 8007e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e20:	f240 80e0 	bls.w	8007fe4 <_printf_float+0x3bc>
 8007e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f7f8 fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d034      	beq.n	8007e9e <_printf_float+0x276>
 8007e34:	4a37      	ldr	r2, [pc, #220]	; (8007f14 <_printf_float+0x2ec>)
 8007e36:	2301      	movs	r3, #1
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f af51 	beq.w	8007ce6 <_printf_float+0xbe>
 8007e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	db02      	blt.n	8007e52 <_printf_float+0x22a>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07d8      	lsls	r0, r3, #31
 8007e50:	d510      	bpl.n	8007e74 <_printf_float+0x24c>
 8007e52:	ee18 3a10 	vmov	r3, s16
 8007e56:	4652      	mov	r2, sl
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af41 	beq.w	8007ce6 <_printf_float+0xbe>
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	f104 091a 	add.w	r9, r4, #26
 8007e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4543      	cmp	r3, r8
 8007e72:	dc09      	bgt.n	8007e88 <_printf_float+0x260>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	f100 8107 	bmi.w	800808a <_printf_float+0x462>
 8007e7c:	68e0      	ldr	r0, [r4, #12]
 8007e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e80:	4298      	cmp	r0, r3
 8007e82:	bfb8      	it	lt
 8007e84:	4618      	movlt	r0, r3
 8007e86:	e730      	b.n	8007cea <_printf_float+0xc2>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af27 	beq.w	8007ce6 <_printf_float+0xbe>
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	e7e6      	b.n	8007e6c <_printf_float+0x244>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc39      	bgt.n	8007f18 <_printf_float+0x2f0>
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <_printf_float+0x2ec>)
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af19 	beq.w	8007ce6 <_printf_float+0xbe>
 8007eb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d102      	bne.n	8007ec2 <_printf_float+0x29a>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	07d9      	lsls	r1, r3, #31
 8007ec0:	d5d8      	bpl.n	8007e74 <_printf_float+0x24c>
 8007ec2:	ee18 3a10 	vmov	r3, s16
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af09 	beq.w	8007ce6 <_printf_float+0xbe>
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	425b      	negs	r3, r3
 8007ee0:	454b      	cmp	r3, r9
 8007ee2:	dc01      	bgt.n	8007ee8 <_printf_float+0x2c0>
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee6:	e792      	b.n	8007e0e <_printf_float+0x1e6>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f aef7 	beq.w	8007ce6 <_printf_float+0xbe>
 8007ef8:	f109 0901 	add.w	r9, r9, #1
 8007efc:	e7ee      	b.n	8007edc <_printf_float+0x2b4>
 8007efe:	bf00      	nop
 8007f00:	7fefffff 	.word	0x7fefffff
 8007f04:	0800c3c0 	.word	0x0800c3c0
 8007f08:	0800c3c4 	.word	0x0800c3c4
 8007f0c:	0800c3c8 	.word	0x0800c3c8
 8007f10:	0800c3cc 	.word	0x0800c3cc
 8007f14:	0800c3d0 	.word	0x0800c3d0
 8007f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	bfa8      	it	ge
 8007f20:	461a      	movge	r2, r3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	4691      	mov	r9, r2
 8007f26:	dc37      	bgt.n	8007f98 <_printf_float+0x370>
 8007f28:	f04f 0b00 	mov.w	fp, #0
 8007f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f30:	f104 021a 	add.w	r2, r4, #26
 8007f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	455b      	cmp	r3, fp
 8007f3e:	dc33      	bgt.n	8007fa8 <_printf_float+0x380>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db3b      	blt.n	8007fc0 <_printf_float+0x398>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d438      	bmi.n	8007fc0 <_printf_float+0x398>
 8007f4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f52:	eba2 0903 	sub.w	r9, r2, r3
 8007f56:	9b05      	ldr	r3, [sp, #20]
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	4591      	cmp	r9, r2
 8007f5c:	bfa8      	it	ge
 8007f5e:	4691      	movge	r9, r2
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	dc35      	bgt.n	8007fd2 <_printf_float+0x3aa>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6e:	f104 0a1a 	add.w	sl, r4, #26
 8007f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	f77f af79 	ble.w	8007e74 <_printf_float+0x24c>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4652      	mov	r2, sl
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f aeaa 	beq.w	8007ce6 <_printf_float+0xbe>
 8007f92:	f108 0801 	add.w	r8, r8, #1
 8007f96:	e7ec      	b.n	8007f72 <_printf_float+0x34a>
 8007f98:	4613      	mov	r3, r2
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d1c0      	bne.n	8007f28 <_printf_float+0x300>
 8007fa6:	e69e      	b.n	8007ce6 <_printf_float+0xbe>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	9205      	str	r2, [sp, #20]
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae97 	beq.w	8007ce6 <_printf_float+0xbe>
 8007fb8:	9a05      	ldr	r2, [sp, #20]
 8007fba:	f10b 0b01 	add.w	fp, fp, #1
 8007fbe:	e7b9      	b.n	8007f34 <_printf_float+0x30c>
 8007fc0:	ee18 3a10 	vmov	r3, s16
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d1be      	bne.n	8007f4e <_printf_float+0x326>
 8007fd0:	e689      	b.n	8007ce6 <_printf_float+0xbe>
 8007fd2:	9a05      	ldr	r2, [sp, #20]
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	4442      	add	r2, r8
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d1c1      	bne.n	8007f66 <_printf_float+0x33e>
 8007fe2:	e680      	b.n	8007ce6 <_printf_float+0xbe>
 8007fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe6:	2a01      	cmp	r2, #1
 8007fe8:	dc01      	bgt.n	8007fee <_printf_float+0x3c6>
 8007fea:	07db      	lsls	r3, r3, #31
 8007fec:	d53a      	bpl.n	8008064 <_printf_float+0x43c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae74 	beq.w	8007ce6 <_printf_float+0xbe>
 8007ffe:	ee18 3a10 	vmov	r3, s16
 8008002:	4652      	mov	r2, sl
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f ae6b 	beq.w	8007ce6 <_printf_float+0xbe>
 8008010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800801c:	f7f8 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008020:	b9d8      	cbnz	r0, 800805a <_printf_float+0x432>
 8008022:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008026:	f108 0201 	add.w	r2, r8, #1
 800802a:	4631      	mov	r1, r6
 800802c:	4628      	mov	r0, r5
 800802e:	47b8      	blx	r7
 8008030:	3001      	adds	r0, #1
 8008032:	d10e      	bne.n	8008052 <_printf_float+0x42a>
 8008034:	e657      	b.n	8007ce6 <_printf_float+0xbe>
 8008036:	2301      	movs	r3, #1
 8008038:	4652      	mov	r2, sl
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	f43f ae50 	beq.w	8007ce6 <_printf_float+0xbe>
 8008046:	f108 0801 	add.w	r8, r8, #1
 800804a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804c:	3b01      	subs	r3, #1
 800804e:	4543      	cmp	r3, r8
 8008050:	dcf1      	bgt.n	8008036 <_printf_float+0x40e>
 8008052:	464b      	mov	r3, r9
 8008054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008058:	e6da      	b.n	8007e10 <_printf_float+0x1e8>
 800805a:	f04f 0800 	mov.w	r8, #0
 800805e:	f104 0a1a 	add.w	sl, r4, #26
 8008062:	e7f2      	b.n	800804a <_printf_float+0x422>
 8008064:	2301      	movs	r3, #1
 8008066:	4642      	mov	r2, r8
 8008068:	e7df      	b.n	800802a <_printf_float+0x402>
 800806a:	2301      	movs	r3, #1
 800806c:	464a      	mov	r2, r9
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae36 	beq.w	8007ce6 <_printf_float+0xbe>
 800807a:	f108 0801 	add.w	r8, r8, #1
 800807e:	68e3      	ldr	r3, [r4, #12]
 8008080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008082:	1a5b      	subs	r3, r3, r1
 8008084:	4543      	cmp	r3, r8
 8008086:	dcf0      	bgt.n	800806a <_printf_float+0x442>
 8008088:	e6f8      	b.n	8007e7c <_printf_float+0x254>
 800808a:	f04f 0800 	mov.w	r8, #0
 800808e:	f104 0919 	add.w	r9, r4, #25
 8008092:	e7f4      	b.n	800807e <_printf_float+0x456>

08008094 <_printf_common>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	4616      	mov	r6, r2
 800809a:	4699      	mov	r9, r3
 800809c:	688a      	ldr	r2, [r1, #8]
 800809e:	690b      	ldr	r3, [r1, #16]
 80080a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	bfb8      	it	lt
 80080a8:	4613      	movlt	r3, r2
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080b0:	4607      	mov	r7, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	b10a      	cbz	r2, 80080ba <_printf_common+0x26>
 80080b6:	3301      	adds	r3, #1
 80080b8:	6033      	str	r3, [r6, #0]
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	0699      	lsls	r1, r3, #26
 80080be:	bf42      	ittt	mi
 80080c0:	6833      	ldrmi	r3, [r6, #0]
 80080c2:	3302      	addmi	r3, #2
 80080c4:	6033      	strmi	r3, [r6, #0]
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	f015 0506 	ands.w	r5, r5, #6
 80080cc:	d106      	bne.n	80080dc <_printf_common+0x48>
 80080ce:	f104 0a19 	add.w	sl, r4, #25
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	6832      	ldr	r2, [r6, #0]
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dc26      	bgt.n	800812a <_printf_common+0x96>
 80080dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080e0:	1e13      	subs	r3, r2, #0
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	bf18      	it	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	0692      	lsls	r2, r2, #26
 80080ea:	d42b      	bmi.n	8008144 <_printf_common+0xb0>
 80080ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080f0:	4649      	mov	r1, r9
 80080f2:	4638      	mov	r0, r7
 80080f4:	47c0      	blx	r8
 80080f6:	3001      	adds	r0, #1
 80080f8:	d01e      	beq.n	8008138 <_printf_common+0xa4>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	f003 0306 	and.w	r3, r3, #6
 8008102:	2b04      	cmp	r3, #4
 8008104:	bf02      	ittt	eq
 8008106:	68e5      	ldreq	r5, [r4, #12]
 8008108:	6833      	ldreq	r3, [r6, #0]
 800810a:	1aed      	subeq	r5, r5, r3
 800810c:	68a3      	ldr	r3, [r4, #8]
 800810e:	bf0c      	ite	eq
 8008110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008114:	2500      	movne	r5, #0
 8008116:	4293      	cmp	r3, r2
 8008118:	bfc4      	itt	gt
 800811a:	1a9b      	subgt	r3, r3, r2
 800811c:	18ed      	addgt	r5, r5, r3
 800811e:	2600      	movs	r6, #0
 8008120:	341a      	adds	r4, #26
 8008122:	42b5      	cmp	r5, r6
 8008124:	d11a      	bne.n	800815c <_printf_common+0xc8>
 8008126:	2000      	movs	r0, #0
 8008128:	e008      	b.n	800813c <_printf_common+0xa8>
 800812a:	2301      	movs	r3, #1
 800812c:	4652      	mov	r2, sl
 800812e:	4649      	mov	r1, r9
 8008130:	4638      	mov	r0, r7
 8008132:	47c0      	blx	r8
 8008134:	3001      	adds	r0, #1
 8008136:	d103      	bne.n	8008140 <_printf_common+0xac>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800813c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008140:	3501      	adds	r5, #1
 8008142:	e7c6      	b.n	80080d2 <_printf_common+0x3e>
 8008144:	18e1      	adds	r1, r4, r3
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	2030      	movs	r0, #48	; 0x30
 800814a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800814e:	4422      	add	r2, r4
 8008150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008158:	3302      	adds	r3, #2
 800815a:	e7c7      	b.n	80080ec <_printf_common+0x58>
 800815c:	2301      	movs	r3, #1
 800815e:	4622      	mov	r2, r4
 8008160:	4649      	mov	r1, r9
 8008162:	4638      	mov	r0, r7
 8008164:	47c0      	blx	r8
 8008166:	3001      	adds	r0, #1
 8008168:	d0e6      	beq.n	8008138 <_printf_common+0xa4>
 800816a:	3601      	adds	r6, #1
 800816c:	e7d9      	b.n	8008122 <_printf_common+0x8e>
	...

08008170 <_printf_i>:
 8008170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	7e0f      	ldrb	r7, [r1, #24]
 8008176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008178:	2f78      	cmp	r7, #120	; 0x78
 800817a:	4691      	mov	r9, r2
 800817c:	4680      	mov	r8, r0
 800817e:	460c      	mov	r4, r1
 8008180:	469a      	mov	sl, r3
 8008182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008186:	d807      	bhi.n	8008198 <_printf_i+0x28>
 8008188:	2f62      	cmp	r7, #98	; 0x62
 800818a:	d80a      	bhi.n	80081a2 <_printf_i+0x32>
 800818c:	2f00      	cmp	r7, #0
 800818e:	f000 80d4 	beq.w	800833a <_printf_i+0x1ca>
 8008192:	2f58      	cmp	r7, #88	; 0x58
 8008194:	f000 80c0 	beq.w	8008318 <_printf_i+0x1a8>
 8008198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800819c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081a0:	e03a      	b.n	8008218 <_printf_i+0xa8>
 80081a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081a6:	2b15      	cmp	r3, #21
 80081a8:	d8f6      	bhi.n	8008198 <_printf_i+0x28>
 80081aa:	a101      	add	r1, pc, #4	; (adr r1, 80081b0 <_printf_i+0x40>)
 80081ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081b0:	08008209 	.word	0x08008209
 80081b4:	0800821d 	.word	0x0800821d
 80081b8:	08008199 	.word	0x08008199
 80081bc:	08008199 	.word	0x08008199
 80081c0:	08008199 	.word	0x08008199
 80081c4:	08008199 	.word	0x08008199
 80081c8:	0800821d 	.word	0x0800821d
 80081cc:	08008199 	.word	0x08008199
 80081d0:	08008199 	.word	0x08008199
 80081d4:	08008199 	.word	0x08008199
 80081d8:	08008199 	.word	0x08008199
 80081dc:	08008321 	.word	0x08008321
 80081e0:	08008249 	.word	0x08008249
 80081e4:	080082db 	.word	0x080082db
 80081e8:	08008199 	.word	0x08008199
 80081ec:	08008199 	.word	0x08008199
 80081f0:	08008343 	.word	0x08008343
 80081f4:	08008199 	.word	0x08008199
 80081f8:	08008249 	.word	0x08008249
 80081fc:	08008199 	.word	0x08008199
 8008200:	08008199 	.word	0x08008199
 8008204:	080082e3 	.word	0x080082e3
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	1d1a      	adds	r2, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	602a      	str	r2, [r5, #0]
 8008210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008218:	2301      	movs	r3, #1
 800821a:	e09f      	b.n	800835c <_printf_i+0x1ec>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	682b      	ldr	r3, [r5, #0]
 8008220:	0607      	lsls	r7, r0, #24
 8008222:	f103 0104 	add.w	r1, r3, #4
 8008226:	6029      	str	r1, [r5, #0]
 8008228:	d501      	bpl.n	800822e <_printf_i+0xbe>
 800822a:	681e      	ldr	r6, [r3, #0]
 800822c:	e003      	b.n	8008236 <_printf_i+0xc6>
 800822e:	0646      	lsls	r6, r0, #25
 8008230:	d5fb      	bpl.n	800822a <_printf_i+0xba>
 8008232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008236:	2e00      	cmp	r6, #0
 8008238:	da03      	bge.n	8008242 <_printf_i+0xd2>
 800823a:	232d      	movs	r3, #45	; 0x2d
 800823c:	4276      	negs	r6, r6
 800823e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008242:	485a      	ldr	r0, [pc, #360]	; (80083ac <_printf_i+0x23c>)
 8008244:	230a      	movs	r3, #10
 8008246:	e012      	b.n	800826e <_printf_i+0xfe>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	6029      	str	r1, [r5, #0]
 8008250:	0605      	lsls	r5, r0, #24
 8008252:	d501      	bpl.n	8008258 <_printf_i+0xe8>
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	e002      	b.n	800825e <_printf_i+0xee>
 8008258:	0641      	lsls	r1, r0, #25
 800825a:	d5fb      	bpl.n	8008254 <_printf_i+0xe4>
 800825c:	881e      	ldrh	r6, [r3, #0]
 800825e:	4853      	ldr	r0, [pc, #332]	; (80083ac <_printf_i+0x23c>)
 8008260:	2f6f      	cmp	r7, #111	; 0x6f
 8008262:	bf0c      	ite	eq
 8008264:	2308      	moveq	r3, #8
 8008266:	230a      	movne	r3, #10
 8008268:	2100      	movs	r1, #0
 800826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826e:	6865      	ldr	r5, [r4, #4]
 8008270:	60a5      	str	r5, [r4, #8]
 8008272:	2d00      	cmp	r5, #0
 8008274:	bfa2      	ittt	ge
 8008276:	6821      	ldrge	r1, [r4, #0]
 8008278:	f021 0104 	bicge.w	r1, r1, #4
 800827c:	6021      	strge	r1, [r4, #0]
 800827e:	b90e      	cbnz	r6, 8008284 <_printf_i+0x114>
 8008280:	2d00      	cmp	r5, #0
 8008282:	d04b      	beq.n	800831c <_printf_i+0x1ac>
 8008284:	4615      	mov	r5, r2
 8008286:	fbb6 f1f3 	udiv	r1, r6, r3
 800828a:	fb03 6711 	mls	r7, r3, r1, r6
 800828e:	5dc7      	ldrb	r7, [r0, r7]
 8008290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008294:	4637      	mov	r7, r6
 8008296:	42bb      	cmp	r3, r7
 8008298:	460e      	mov	r6, r1
 800829a:	d9f4      	bls.n	8008286 <_printf_i+0x116>
 800829c:	2b08      	cmp	r3, #8
 800829e:	d10b      	bne.n	80082b8 <_printf_i+0x148>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	07de      	lsls	r6, r3, #31
 80082a4:	d508      	bpl.n	80082b8 <_printf_i+0x148>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4299      	cmp	r1, r3
 80082ac:	bfde      	ittt	le
 80082ae:	2330      	movle	r3, #48	; 0x30
 80082b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082b8:	1b52      	subs	r2, r2, r5
 80082ba:	6122      	str	r2, [r4, #16]
 80082bc:	f8cd a000 	str.w	sl, [sp]
 80082c0:	464b      	mov	r3, r9
 80082c2:	aa03      	add	r2, sp, #12
 80082c4:	4621      	mov	r1, r4
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7ff fee4 	bl	8008094 <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d14a      	bne.n	8008366 <_printf_i+0x1f6>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d4:	b004      	add	sp, #16
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f043 0320 	orr.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	4833      	ldr	r0, [pc, #204]	; (80083b0 <_printf_i+0x240>)
 80082e4:	2778      	movs	r7, #120	; 0x78
 80082e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	6829      	ldr	r1, [r5, #0]
 80082ee:	061f      	lsls	r7, r3, #24
 80082f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082f4:	d402      	bmi.n	80082fc <_printf_i+0x18c>
 80082f6:	065f      	lsls	r7, r3, #25
 80082f8:	bf48      	it	mi
 80082fa:	b2b6      	uxthmi	r6, r6
 80082fc:	07df      	lsls	r7, r3, #31
 80082fe:	bf48      	it	mi
 8008300:	f043 0320 	orrmi.w	r3, r3, #32
 8008304:	6029      	str	r1, [r5, #0]
 8008306:	bf48      	it	mi
 8008308:	6023      	strmi	r3, [r4, #0]
 800830a:	b91e      	cbnz	r6, 8008314 <_printf_i+0x1a4>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	f023 0320 	bic.w	r3, r3, #32
 8008312:	6023      	str	r3, [r4, #0]
 8008314:	2310      	movs	r3, #16
 8008316:	e7a7      	b.n	8008268 <_printf_i+0xf8>
 8008318:	4824      	ldr	r0, [pc, #144]	; (80083ac <_printf_i+0x23c>)
 800831a:	e7e4      	b.n	80082e6 <_printf_i+0x176>
 800831c:	4615      	mov	r5, r2
 800831e:	e7bd      	b.n	800829c <_printf_i+0x12c>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6826      	ldr	r6, [r4, #0]
 8008324:	6961      	ldr	r1, [r4, #20]
 8008326:	1d18      	adds	r0, r3, #4
 8008328:	6028      	str	r0, [r5, #0]
 800832a:	0635      	lsls	r5, r6, #24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	d501      	bpl.n	8008334 <_printf_i+0x1c4>
 8008330:	6019      	str	r1, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0x1ca>
 8008334:	0670      	lsls	r0, r6, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0x1c0>
 8008338:	8019      	strh	r1, [r3, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	6123      	str	r3, [r4, #16]
 800833e:	4615      	mov	r5, r2
 8008340:	e7bc      	b.n	80082bc <_printf_i+0x14c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	4628      	mov	r0, r5
 8008350:	f7f7 ff3e 	bl	80001d0 <memchr>
 8008354:	b108      	cbz	r0, 800835a <_printf_i+0x1ea>
 8008356:	1b40      	subs	r0, r0, r5
 8008358:	6060      	str	r0, [r4, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	2300      	movs	r3, #0
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	e7aa      	b.n	80082bc <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	462a      	mov	r2, r5
 800836a:	4649      	mov	r1, r9
 800836c:	4640      	mov	r0, r8
 800836e:	47d0      	blx	sl
 8008370:	3001      	adds	r0, #1
 8008372:	d0ad      	beq.n	80082d0 <_printf_i+0x160>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	079b      	lsls	r3, r3, #30
 8008378:	d413      	bmi.n	80083a2 <_printf_i+0x232>
 800837a:	68e0      	ldr	r0, [r4, #12]
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	4298      	cmp	r0, r3
 8008380:	bfb8      	it	lt
 8008382:	4618      	movlt	r0, r3
 8008384:	e7a6      	b.n	80082d4 <_printf_i+0x164>
 8008386:	2301      	movs	r3, #1
 8008388:	4632      	mov	r2, r6
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	47d0      	blx	sl
 8008390:	3001      	adds	r0, #1
 8008392:	d09d      	beq.n	80082d0 <_printf_i+0x160>
 8008394:	3501      	adds	r5, #1
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	9903      	ldr	r1, [sp, #12]
 800839a:	1a5b      	subs	r3, r3, r1
 800839c:	42ab      	cmp	r3, r5
 800839e:	dcf2      	bgt.n	8008386 <_printf_i+0x216>
 80083a0:	e7eb      	b.n	800837a <_printf_i+0x20a>
 80083a2:	2500      	movs	r5, #0
 80083a4:	f104 0619 	add.w	r6, r4, #25
 80083a8:	e7f5      	b.n	8008396 <_printf_i+0x226>
 80083aa:	bf00      	nop
 80083ac:	0800c3d2 	.word	0x0800c3d2
 80083b0:	0800c3e3 	.word	0x0800c3e3

080083b4 <_scanf_float>:
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b087      	sub	sp, #28
 80083ba:	4617      	mov	r7, r2
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	688b      	ldr	r3, [r1, #8]
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083c6:	bf83      	ittte	hi
 80083c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083cc:	195b      	addhi	r3, r3, r5
 80083ce:	9302      	strhi	r3, [sp, #8]
 80083d0:	2300      	movls	r3, #0
 80083d2:	bf86      	itte	hi
 80083d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083d8:	608b      	strhi	r3, [r1, #8]
 80083da:	9302      	strls	r3, [sp, #8]
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	468b      	mov	fp, r1
 80083e0:	2500      	movs	r5, #0
 80083e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80083ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083ee:	4680      	mov	r8, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	465e      	mov	r6, fp
 80083f4:	46aa      	mov	sl, r5
 80083f6:	46a9      	mov	r9, r5
 80083f8:	9501      	str	r5, [sp, #4]
 80083fa:	68a2      	ldr	r2, [r4, #8]
 80083fc:	b152      	cbz	r2, 8008414 <_scanf_float+0x60>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b4e      	cmp	r3, #78	; 0x4e
 8008404:	d864      	bhi.n	80084d0 <_scanf_float+0x11c>
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d83c      	bhi.n	8008484 <_scanf_float+0xd0>
 800840a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800840e:	b2c8      	uxtb	r0, r1
 8008410:	280e      	cmp	r0, #14
 8008412:	d93a      	bls.n	800848a <_scanf_float+0xd6>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	d003      	beq.n	8008422 <_scanf_float+0x6e>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008426:	f1ba 0f01 	cmp.w	sl, #1
 800842a:	f200 8113 	bhi.w	8008654 <_scanf_float+0x2a0>
 800842e:	455e      	cmp	r6, fp
 8008430:	f200 8105 	bhi.w	800863e <_scanf_float+0x28a>
 8008434:	2501      	movs	r5, #1
 8008436:	4628      	mov	r0, r5
 8008438:	b007      	add	sp, #28
 800843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008442:	2a0d      	cmp	r2, #13
 8008444:	d8e6      	bhi.n	8008414 <_scanf_float+0x60>
 8008446:	a101      	add	r1, pc, #4	; (adr r1, 800844c <_scanf_float+0x98>)
 8008448:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800844c:	0800858b 	.word	0x0800858b
 8008450:	08008415 	.word	0x08008415
 8008454:	08008415 	.word	0x08008415
 8008458:	08008415 	.word	0x08008415
 800845c:	080085eb 	.word	0x080085eb
 8008460:	080085c3 	.word	0x080085c3
 8008464:	08008415 	.word	0x08008415
 8008468:	08008415 	.word	0x08008415
 800846c:	08008599 	.word	0x08008599
 8008470:	08008415 	.word	0x08008415
 8008474:	08008415 	.word	0x08008415
 8008478:	08008415 	.word	0x08008415
 800847c:	08008415 	.word	0x08008415
 8008480:	08008551 	.word	0x08008551
 8008484:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008488:	e7db      	b.n	8008442 <_scanf_float+0x8e>
 800848a:	290e      	cmp	r1, #14
 800848c:	d8c2      	bhi.n	8008414 <_scanf_float+0x60>
 800848e:	a001      	add	r0, pc, #4	; (adr r0, 8008494 <_scanf_float+0xe0>)
 8008490:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008494:	08008543 	.word	0x08008543
 8008498:	08008415 	.word	0x08008415
 800849c:	08008543 	.word	0x08008543
 80084a0:	080085d7 	.word	0x080085d7
 80084a4:	08008415 	.word	0x08008415
 80084a8:	080084f1 	.word	0x080084f1
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	0800852d 	.word	0x0800852d
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	0800852d 	.word	0x0800852d
 80084d0:	2b6e      	cmp	r3, #110	; 0x6e
 80084d2:	d809      	bhi.n	80084e8 <_scanf_float+0x134>
 80084d4:	2b60      	cmp	r3, #96	; 0x60
 80084d6:	d8b2      	bhi.n	800843e <_scanf_float+0x8a>
 80084d8:	2b54      	cmp	r3, #84	; 0x54
 80084da:	d077      	beq.n	80085cc <_scanf_float+0x218>
 80084dc:	2b59      	cmp	r3, #89	; 0x59
 80084de:	d199      	bne.n	8008414 <_scanf_float+0x60>
 80084e0:	2d07      	cmp	r5, #7
 80084e2:	d197      	bne.n	8008414 <_scanf_float+0x60>
 80084e4:	2508      	movs	r5, #8
 80084e6:	e029      	b.n	800853c <_scanf_float+0x188>
 80084e8:	2b74      	cmp	r3, #116	; 0x74
 80084ea:	d06f      	beq.n	80085cc <_scanf_float+0x218>
 80084ec:	2b79      	cmp	r3, #121	; 0x79
 80084ee:	e7f6      	b.n	80084de <_scanf_float+0x12a>
 80084f0:	6821      	ldr	r1, [r4, #0]
 80084f2:	05c8      	lsls	r0, r1, #23
 80084f4:	d51a      	bpl.n	800852c <_scanf_float+0x178>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084fc:	6021      	str	r1, [r4, #0]
 80084fe:	f109 0901 	add.w	r9, r9, #1
 8008502:	b11b      	cbz	r3, 800850c <_scanf_float+0x158>
 8008504:	3b01      	subs	r3, #1
 8008506:	3201      	adds	r2, #1
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	60a2      	str	r2, [r4, #8]
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	3b01      	subs	r3, #1
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	3301      	adds	r3, #1
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3b01      	subs	r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	f340 8084 	ble.w	800862c <_scanf_float+0x278>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	e766      	b.n	80083fa <_scanf_float+0x46>
 800852c:	eb1a 0f05 	cmn.w	sl, r5
 8008530:	f47f af70 	bne.w	8008414 <_scanf_float+0x60>
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	f806 3b01 	strb.w	r3, [r6], #1
 8008540:	e7e4      	b.n	800850c <_scanf_float+0x158>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	0610      	lsls	r0, r2, #24
 8008546:	f57f af65 	bpl.w	8008414 <_scanf_float+0x60>
 800854a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800854e:	e7f4      	b.n	800853a <_scanf_float+0x186>
 8008550:	f1ba 0f00 	cmp.w	sl, #0
 8008554:	d10e      	bne.n	8008574 <_scanf_float+0x1c0>
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	d10e      	bne.n	800857a <_scanf_float+0x1c6>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008562:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008566:	d108      	bne.n	800857a <_scanf_float+0x1c6>
 8008568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	f04f 0a01 	mov.w	sl, #1
 8008572:	e7e3      	b.n	800853c <_scanf_float+0x188>
 8008574:	f1ba 0f02 	cmp.w	sl, #2
 8008578:	d055      	beq.n	8008626 <_scanf_float+0x272>
 800857a:	2d01      	cmp	r5, #1
 800857c:	d002      	beq.n	8008584 <_scanf_float+0x1d0>
 800857e:	2d04      	cmp	r5, #4
 8008580:	f47f af48 	bne.w	8008414 <_scanf_float+0x60>
 8008584:	3501      	adds	r5, #1
 8008586:	b2ed      	uxtb	r5, r5
 8008588:	e7d8      	b.n	800853c <_scanf_float+0x188>
 800858a:	f1ba 0f01 	cmp.w	sl, #1
 800858e:	f47f af41 	bne.w	8008414 <_scanf_float+0x60>
 8008592:	f04f 0a02 	mov.w	sl, #2
 8008596:	e7d1      	b.n	800853c <_scanf_float+0x188>
 8008598:	b97d      	cbnz	r5, 80085ba <_scanf_float+0x206>
 800859a:	f1b9 0f00 	cmp.w	r9, #0
 800859e:	f47f af3c 	bne.w	800841a <_scanf_float+0x66>
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085ac:	f47f af39 	bne.w	8008422 <_scanf_float+0x6e>
 80085b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	2501      	movs	r5, #1
 80085b8:	e7c0      	b.n	800853c <_scanf_float+0x188>
 80085ba:	2d03      	cmp	r5, #3
 80085bc:	d0e2      	beq.n	8008584 <_scanf_float+0x1d0>
 80085be:	2d05      	cmp	r5, #5
 80085c0:	e7de      	b.n	8008580 <_scanf_float+0x1cc>
 80085c2:	2d02      	cmp	r5, #2
 80085c4:	f47f af26 	bne.w	8008414 <_scanf_float+0x60>
 80085c8:	2503      	movs	r5, #3
 80085ca:	e7b7      	b.n	800853c <_scanf_float+0x188>
 80085cc:	2d06      	cmp	r5, #6
 80085ce:	f47f af21 	bne.w	8008414 <_scanf_float+0x60>
 80085d2:	2507      	movs	r5, #7
 80085d4:	e7b2      	b.n	800853c <_scanf_float+0x188>
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	0591      	lsls	r1, r2, #22
 80085da:	f57f af1b 	bpl.w	8008414 <_scanf_float+0x60>
 80085de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085e8:	e7a8      	b.n	800853c <_scanf_float+0x188>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085f4:	d006      	beq.n	8008604 <_scanf_float+0x250>
 80085f6:	0550      	lsls	r0, r2, #21
 80085f8:	f57f af0c 	bpl.w	8008414 <_scanf_float+0x60>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	f43f af0f 	beq.w	8008422 <_scanf_float+0x6e>
 8008604:	0591      	lsls	r1, r2, #22
 8008606:	bf58      	it	pl
 8008608:	9901      	ldrpl	r1, [sp, #4]
 800860a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800860e:	bf58      	it	pl
 8008610:	eba9 0101 	subpl.w	r1, r9, r1
 8008614:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008618:	bf58      	it	pl
 800861a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	f04f 0900 	mov.w	r9, #0
 8008624:	e78a      	b.n	800853c <_scanf_float+0x188>
 8008626:	f04f 0a03 	mov.w	sl, #3
 800862a:	e787      	b.n	800853c <_scanf_float+0x188>
 800862c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008630:	4639      	mov	r1, r7
 8008632:	4640      	mov	r0, r8
 8008634:	4798      	blx	r3
 8008636:	2800      	cmp	r0, #0
 8008638:	f43f aedf 	beq.w	80083fa <_scanf_float+0x46>
 800863c:	e6ea      	b.n	8008414 <_scanf_float+0x60>
 800863e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008646:	463a      	mov	r2, r7
 8008648:	4640      	mov	r0, r8
 800864a:	4798      	blx	r3
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	3b01      	subs	r3, #1
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	e6ec      	b.n	800842e <_scanf_float+0x7a>
 8008654:	1e6b      	subs	r3, r5, #1
 8008656:	2b06      	cmp	r3, #6
 8008658:	d825      	bhi.n	80086a6 <_scanf_float+0x2f2>
 800865a:	2d02      	cmp	r5, #2
 800865c:	d836      	bhi.n	80086cc <_scanf_float+0x318>
 800865e:	455e      	cmp	r6, fp
 8008660:	f67f aee8 	bls.w	8008434 <_scanf_float+0x80>
 8008664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008668:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800866c:	463a      	mov	r2, r7
 800866e:	4640      	mov	r0, r8
 8008670:	4798      	blx	r3
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	3b01      	subs	r3, #1
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	e7f1      	b.n	800865e <_scanf_float+0x2aa>
 800867a:	9802      	ldr	r0, [sp, #8]
 800867c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008680:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008684:	9002      	str	r0, [sp, #8]
 8008686:	463a      	mov	r2, r7
 8008688:	4640      	mov	r0, r8
 800868a:	4798      	blx	r3
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	3b01      	subs	r3, #1
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008696:	fa5f fa8a 	uxtb.w	sl, sl
 800869a:	f1ba 0f02 	cmp.w	sl, #2
 800869e:	d1ec      	bne.n	800867a <_scanf_float+0x2c6>
 80086a0:	3d03      	subs	r5, #3
 80086a2:	b2ed      	uxtb	r5, r5
 80086a4:	1b76      	subs	r6, r6, r5
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	05da      	lsls	r2, r3, #23
 80086aa:	d52f      	bpl.n	800870c <_scanf_float+0x358>
 80086ac:	055b      	lsls	r3, r3, #21
 80086ae:	d510      	bpl.n	80086d2 <_scanf_float+0x31e>
 80086b0:	455e      	cmp	r6, fp
 80086b2:	f67f aebf 	bls.w	8008434 <_scanf_float+0x80>
 80086b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086be:	463a      	mov	r2, r7
 80086c0:	4640      	mov	r0, r8
 80086c2:	4798      	blx	r3
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	e7f1      	b.n	80086b0 <_scanf_float+0x2fc>
 80086cc:	46aa      	mov	sl, r5
 80086ce:	9602      	str	r6, [sp, #8]
 80086d0:	e7df      	b.n	8008692 <_scanf_float+0x2de>
 80086d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	2965      	cmp	r1, #101	; 0x65
 80086da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80086de:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	d00c      	beq.n	8008700 <_scanf_float+0x34c>
 80086e6:	2945      	cmp	r1, #69	; 0x45
 80086e8:	d00a      	beq.n	8008700 <_scanf_float+0x34c>
 80086ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ee:	463a      	mov	r2, r7
 80086f0:	4640      	mov	r0, r8
 80086f2:	4798      	blx	r3
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	1eb5      	subs	r5, r6, #2
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008704:	463a      	mov	r2, r7
 8008706:	4640      	mov	r0, r8
 8008708:	4798      	blx	r3
 800870a:	462e      	mov	r6, r5
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	f015 0510 	ands.w	r5, r5, #16
 8008712:	d158      	bne.n	80087c6 <_scanf_float+0x412>
 8008714:	7035      	strb	r5, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800871c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008720:	d11c      	bne.n	800875c <_scanf_float+0x3a8>
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	454b      	cmp	r3, r9
 8008726:	eba3 0209 	sub.w	r2, r3, r9
 800872a:	d124      	bne.n	8008776 <_scanf_float+0x3c2>
 800872c:	2200      	movs	r2, #0
 800872e:	4659      	mov	r1, fp
 8008730:	4640      	mov	r0, r8
 8008732:	f002 fc65 	bl	800b000 <_strtod_r>
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	6821      	ldr	r1, [r4, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f011 0f02 	tst.w	r1, #2
 8008740:	ec57 6b10 	vmov	r6, r7, d0
 8008744:	f103 0204 	add.w	r2, r3, #4
 8008748:	d020      	beq.n	800878c <_scanf_float+0x3d8>
 800874a:	9903      	ldr	r1, [sp, #12]
 800874c:	600a      	str	r2, [r1, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	e9c3 6700 	strd	r6, r7, [r3]
 8008754:	68e3      	ldr	r3, [r4, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60e3      	str	r3, [r4, #12]
 800875a:	e66c      	b.n	8008436 <_scanf_float+0x82>
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0e4      	beq.n	800872c <_scanf_float+0x378>
 8008762:	9905      	ldr	r1, [sp, #20]
 8008764:	230a      	movs	r3, #10
 8008766:	462a      	mov	r2, r5
 8008768:	3101      	adds	r1, #1
 800876a:	4640      	mov	r0, r8
 800876c:	f002 fcd0 	bl	800b110 <_strtol_r>
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	9e05      	ldr	r6, [sp, #20]
 8008774:	1ac2      	subs	r2, r0, r3
 8008776:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800877a:	429e      	cmp	r6, r3
 800877c:	bf28      	it	cs
 800877e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008782:	4912      	ldr	r1, [pc, #72]	; (80087cc <_scanf_float+0x418>)
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f91b 	bl	80089c0 <siprintf>
 800878a:	e7cf      	b.n	800872c <_scanf_float+0x378>
 800878c:	f011 0f04 	tst.w	r1, #4
 8008790:	9903      	ldr	r1, [sp, #12]
 8008792:	600a      	str	r2, [r1, #0]
 8008794:	d1db      	bne.n	800874e <_scanf_float+0x39a>
 8008796:	f8d3 8000 	ldr.w	r8, [r3]
 800879a:	ee10 2a10 	vmov	r2, s0
 800879e:	ee10 0a10 	vmov	r0, s0
 80087a2:	463b      	mov	r3, r7
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f8 f9c1 	bl	8000b2c <__aeabi_dcmpun>
 80087aa:	b128      	cbz	r0, 80087b8 <_scanf_float+0x404>
 80087ac:	4808      	ldr	r0, [pc, #32]	; (80087d0 <_scanf_float+0x41c>)
 80087ae:	f000 f9eb 	bl	8008b88 <nanf>
 80087b2:	ed88 0a00 	vstr	s0, [r8]
 80087b6:	e7cd      	b.n	8008754 <_scanf_float+0x3a0>
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f8 fa14 	bl	8000be8 <__aeabi_d2f>
 80087c0:	f8c8 0000 	str.w	r0, [r8]
 80087c4:	e7c6      	b.n	8008754 <_scanf_float+0x3a0>
 80087c6:	2500      	movs	r5, #0
 80087c8:	e635      	b.n	8008436 <_scanf_float+0x82>
 80087ca:	bf00      	nop
 80087cc:	0800c3f4 	.word	0x0800c3f4
 80087d0:	0800c785 	.word	0x0800c785

080087d4 <std>:
 80087d4:	2300      	movs	r3, #0
 80087d6:	b510      	push	{r4, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	e9c0 3300 	strd	r3, r3, [r0]
 80087de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087e2:	6083      	str	r3, [r0, #8]
 80087e4:	8181      	strh	r1, [r0, #12]
 80087e6:	6643      	str	r3, [r0, #100]	; 0x64
 80087e8:	81c2      	strh	r2, [r0, #14]
 80087ea:	6183      	str	r3, [r0, #24]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2208      	movs	r2, #8
 80087f0:	305c      	adds	r0, #92	; 0x5c
 80087f2:	f000 f948 	bl	8008a86 <memset>
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <std+0x58>)
 80087f8:	6263      	str	r3, [r4, #36]	; 0x24
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <std+0x5c>)
 80087fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <std+0x60>)
 8008800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <std+0x64>)
 8008804:	6323      	str	r3, [r4, #48]	; 0x30
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <std+0x68>)
 8008808:	6224      	str	r4, [r4, #32]
 800880a:	429c      	cmp	r4, r3
 800880c:	d006      	beq.n	800881c <std+0x48>
 800880e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008812:	4294      	cmp	r4, r2
 8008814:	d002      	beq.n	800881c <std+0x48>
 8008816:	33d0      	adds	r3, #208	; 0xd0
 8008818:	429c      	cmp	r4, r3
 800881a:	d105      	bne.n	8008828 <std+0x54>
 800881c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	f000 b9ac 	b.w	8008b80 <__retarget_lock_init_recursive>
 8008828:	bd10      	pop	{r4, pc}
 800882a:	bf00      	nop
 800882c:	08008a01 	.word	0x08008a01
 8008830:	08008a23 	.word	0x08008a23
 8008834:	08008a5b 	.word	0x08008a5b
 8008838:	08008a7f 	.word	0x08008a7f
 800883c:	20000410 	.word	0x20000410

08008840 <stdio_exit_handler>:
 8008840:	4a02      	ldr	r2, [pc, #8]	; (800884c <stdio_exit_handler+0xc>)
 8008842:	4903      	ldr	r1, [pc, #12]	; (8008850 <stdio_exit_handler+0x10>)
 8008844:	4803      	ldr	r0, [pc, #12]	; (8008854 <stdio_exit_handler+0x14>)
 8008846:	f000 b869 	b.w	800891c <_fwalk_sglue>
 800884a:	bf00      	nop
 800884c:	2000000c 	.word	0x2000000c
 8008850:	0800b4d1 	.word	0x0800b4d1
 8008854:	20000018 	.word	0x20000018

08008858 <cleanup_stdio>:
 8008858:	6841      	ldr	r1, [r0, #4]
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <cleanup_stdio+0x34>)
 800885c:	4299      	cmp	r1, r3
 800885e:	b510      	push	{r4, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	d001      	beq.n	8008868 <cleanup_stdio+0x10>
 8008864:	f002 fe34 	bl	800b4d0 <_fflush_r>
 8008868:	68a1      	ldr	r1, [r4, #8]
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <cleanup_stdio+0x38>)
 800886c:	4299      	cmp	r1, r3
 800886e:	d002      	beq.n	8008876 <cleanup_stdio+0x1e>
 8008870:	4620      	mov	r0, r4
 8008872:	f002 fe2d 	bl	800b4d0 <_fflush_r>
 8008876:	68e1      	ldr	r1, [r4, #12]
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <cleanup_stdio+0x3c>)
 800887a:	4299      	cmp	r1, r3
 800887c:	d004      	beq.n	8008888 <cleanup_stdio+0x30>
 800887e:	4620      	mov	r0, r4
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f002 be24 	b.w	800b4d0 <_fflush_r>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	20000410 	.word	0x20000410
 8008890:	20000478 	.word	0x20000478
 8008894:	200004e0 	.word	0x200004e0

08008898 <global_stdio_init.part.0>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <global_stdio_init.part.0+0x30>)
 800889c:	4c0b      	ldr	r4, [pc, #44]	; (80088cc <global_stdio_init.part.0+0x34>)
 800889e:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <global_stdio_init.part.0+0x38>)
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	4620      	mov	r0, r4
 80088a4:	2200      	movs	r2, #0
 80088a6:	2104      	movs	r1, #4
 80088a8:	f7ff ff94 	bl	80087d4 <std>
 80088ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088b0:	2201      	movs	r2, #1
 80088b2:	2109      	movs	r1, #9
 80088b4:	f7ff ff8e 	bl	80087d4 <std>
 80088b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088bc:	2202      	movs	r2, #2
 80088be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c2:	2112      	movs	r1, #18
 80088c4:	f7ff bf86 	b.w	80087d4 <std>
 80088c8:	20000548 	.word	0x20000548
 80088cc:	20000410 	.word	0x20000410
 80088d0:	08008841 	.word	0x08008841

080088d4 <__sfp_lock_acquire>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sfp_lock_acquire+0x8>)
 80088d6:	f000 b954 	b.w	8008b82 <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	20000551 	.word	0x20000551

080088e0 <__sfp_lock_release>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sfp_lock_release+0x8>)
 80088e2:	f000 b94f 	b.w	8008b84 <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	20000551 	.word	0x20000551

080088ec <__sinit>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	f7ff fff0 	bl	80088d4 <__sfp_lock_acquire>
 80088f4:	6a23      	ldr	r3, [r4, #32]
 80088f6:	b11b      	cbz	r3, 8008900 <__sinit+0x14>
 80088f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fc:	f7ff bff0 	b.w	80088e0 <__sfp_lock_release>
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <__sinit+0x28>)
 8008902:	6223      	str	r3, [r4, #32]
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__sinit+0x2c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f5      	bne.n	80088f8 <__sinit+0xc>
 800890c:	f7ff ffc4 	bl	8008898 <global_stdio_init.part.0>
 8008910:	e7f2      	b.n	80088f8 <__sinit+0xc>
 8008912:	bf00      	nop
 8008914:	08008859 	.word	0x08008859
 8008918:	20000548 	.word	0x20000548

0800891c <_fwalk_sglue>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	4607      	mov	r7, r0
 8008922:	4688      	mov	r8, r1
 8008924:	4614      	mov	r4, r2
 8008926:	2600      	movs	r6, #0
 8008928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800892c:	f1b9 0901 	subs.w	r9, r9, #1
 8008930:	d505      	bpl.n	800893e <_fwalk_sglue+0x22>
 8008932:	6824      	ldr	r4, [r4, #0]
 8008934:	2c00      	cmp	r4, #0
 8008936:	d1f7      	bne.n	8008928 <_fwalk_sglue+0xc>
 8008938:	4630      	mov	r0, r6
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d907      	bls.n	8008954 <_fwalk_sglue+0x38>
 8008944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008948:	3301      	adds	r3, #1
 800894a:	d003      	beq.n	8008954 <_fwalk_sglue+0x38>
 800894c:	4629      	mov	r1, r5
 800894e:	4638      	mov	r0, r7
 8008950:	47c0      	blx	r8
 8008952:	4306      	orrs	r6, r0
 8008954:	3568      	adds	r5, #104	; 0x68
 8008956:	e7e9      	b.n	800892c <_fwalk_sglue+0x10>

08008958 <sniprintf>:
 8008958:	b40c      	push	{r2, r3}
 800895a:	b530      	push	{r4, r5, lr}
 800895c:	4b17      	ldr	r3, [pc, #92]	; (80089bc <sniprintf+0x64>)
 800895e:	1e0c      	subs	r4, r1, #0
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	b09d      	sub	sp, #116	; 0x74
 8008964:	da08      	bge.n	8008978 <sniprintf+0x20>
 8008966:	238b      	movs	r3, #139	; 0x8b
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800896e:	b01d      	add	sp, #116	; 0x74
 8008970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008974:	b002      	add	sp, #8
 8008976:	4770      	bx	lr
 8008978:	f44f 7302 	mov.w	r3, #520	; 0x208
 800897c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008980:	bf14      	ite	ne
 8008982:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008986:	4623      	moveq	r3, r4
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008990:	9002      	str	r0, [sp, #8]
 8008992:	9006      	str	r0, [sp, #24]
 8008994:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008998:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800899a:	ab21      	add	r3, sp, #132	; 0x84
 800899c:	a902      	add	r1, sp, #8
 800899e:	4628      	mov	r0, r5
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f002 fc11 	bl	800b1c8 <_svfiprintf_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	bfbc      	itt	lt
 80089aa:	238b      	movlt	r3, #139	; 0x8b
 80089ac:	602b      	strlt	r3, [r5, #0]
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	d0dd      	beq.n	800896e <sniprintf+0x16>
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e7d9      	b.n	800896e <sniprintf+0x16>
 80089ba:	bf00      	nop
 80089bc:	20000064 	.word	0x20000064

080089c0 <siprintf>:
 80089c0:	b40e      	push	{r1, r2, r3}
 80089c2:	b500      	push	{lr}
 80089c4:	b09c      	sub	sp, #112	; 0x70
 80089c6:	ab1d      	add	r3, sp, #116	; 0x74
 80089c8:	9002      	str	r0, [sp, #8]
 80089ca:	9006      	str	r0, [sp, #24]
 80089cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <siprintf+0x38>)
 80089d2:	9107      	str	r1, [sp, #28]
 80089d4:	9104      	str	r1, [sp, #16]
 80089d6:	4909      	ldr	r1, [pc, #36]	; (80089fc <siprintf+0x3c>)
 80089d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089dc:	9105      	str	r1, [sp, #20]
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	a902      	add	r1, sp, #8
 80089e4:	f002 fbf0 	bl	800b1c8 <_svfiprintf_r>
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	b01c      	add	sp, #112	; 0x70
 80089f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f4:	b003      	add	sp, #12
 80089f6:	4770      	bx	lr
 80089f8:	20000064 	.word	0x20000064
 80089fc:	ffff0208 	.word	0xffff0208

08008a00 <__sread>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	460c      	mov	r4, r1
 8008a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a08:	f000 f86c 	bl	8008ae4 <_read_r>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	bfab      	itete	ge
 8008a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a12:	89a3      	ldrhlt	r3, [r4, #12]
 8008a14:	181b      	addge	r3, r3, r0
 8008a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a1a:	bfac      	ite	ge
 8008a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a1e:	81a3      	strhlt	r3, [r4, #12]
 8008a20:	bd10      	pop	{r4, pc}

08008a22 <__swrite>:
 8008a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	461f      	mov	r7, r3
 8008a28:	898b      	ldrh	r3, [r1, #12]
 8008a2a:	05db      	lsls	r3, r3, #23
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	4616      	mov	r6, r2
 8008a32:	d505      	bpl.n	8008a40 <__swrite+0x1e>
 8008a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a38:	2302      	movs	r3, #2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f000 f840 	bl	8008ac0 <_lseek_r>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	463b      	mov	r3, r7
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a56:	f000 b857 	b.w	8008b08 <_write_r>

08008a5a <__sseek>:
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a62:	f000 f82d 	bl	8008ac0 <_lseek_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	bf15      	itete	ne
 8008a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a76:	81a3      	strheq	r3, [r4, #12]
 8008a78:	bf18      	it	ne
 8008a7a:	81a3      	strhne	r3, [r4, #12]
 8008a7c:	bd10      	pop	{r4, pc}

08008a7e <__sclose>:
 8008a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a82:	f000 b80d 	b.w	8008aa0 <_close_r>

08008a86 <memset>:
 8008a86:	4402      	add	r2, r0
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d100      	bne.n	8008a90 <memset+0xa>
 8008a8e:	4770      	bx	lr
 8008a90:	f803 1b01 	strb.w	r1, [r3], #1
 8008a94:	e7f9      	b.n	8008a8a <memset+0x4>
	...

08008a98 <_localeconv_r>:
 8008a98:	4800      	ldr	r0, [pc, #0]	; (8008a9c <_localeconv_r+0x4>)
 8008a9a:	4770      	bx	lr
 8008a9c:	20000158 	.word	0x20000158

08008aa0 <_close_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_close_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7f9 f94f 	bl	8001d4e <_close>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_close_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_close_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	2000054c 	.word	0x2000054c

08008ac0 <_lseek_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	; (8008ae0 <_lseek_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f9 f964 	bl	8001d9c <_lseek>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_lseek_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_lseek_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	2000054c 	.word	0x2000054c

08008ae4 <_read_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <_read_r+0x20>)
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	4611      	mov	r1, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f9 f8f2 	bl	8001cdc <_read>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_read_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_read_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	2000054c 	.word	0x2000054c

08008b08 <_write_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_write_r+0x20>)
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f9 f8fd 	bl	8001d16 <_write>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_write_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_write_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	2000054c 	.word	0x2000054c

08008b2c <__errno>:
 8008b2c:	4b01      	ldr	r3, [pc, #4]	; (8008b34 <__errno+0x8>)
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000064 	.word	0x20000064

08008b38 <__libc_init_array>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	4d0d      	ldr	r5, [pc, #52]	; (8008b70 <__libc_init_array+0x38>)
 8008b3c:	4c0d      	ldr	r4, [pc, #52]	; (8008b74 <__libc_init_array+0x3c>)
 8008b3e:	1b64      	subs	r4, r4, r5
 8008b40:	10a4      	asrs	r4, r4, #2
 8008b42:	2600      	movs	r6, #0
 8008b44:	42a6      	cmp	r6, r4
 8008b46:	d109      	bne.n	8008b5c <__libc_init_array+0x24>
 8008b48:	4d0b      	ldr	r5, [pc, #44]	; (8008b78 <__libc_init_array+0x40>)
 8008b4a:	4c0c      	ldr	r4, [pc, #48]	; (8008b7c <__libc_init_array+0x44>)
 8008b4c:	f003 fbd8 	bl	800c300 <_init>
 8008b50:	1b64      	subs	r4, r4, r5
 8008b52:	10a4      	asrs	r4, r4, #2
 8008b54:	2600      	movs	r6, #0
 8008b56:	42a6      	cmp	r6, r4
 8008b58:	d105      	bne.n	8008b66 <__libc_init_array+0x2e>
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b60:	4798      	blx	r3
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7ee      	b.n	8008b44 <__libc_init_array+0xc>
 8008b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6a:	4798      	blx	r3
 8008b6c:	3601      	adds	r6, #1
 8008b6e:	e7f2      	b.n	8008b56 <__libc_init_array+0x1e>
 8008b70:	0800c7f0 	.word	0x0800c7f0
 8008b74:	0800c7f0 	.word	0x0800c7f0
 8008b78:	0800c7f0 	.word	0x0800c7f0
 8008b7c:	0800c7f4 	.word	0x0800c7f4

08008b80 <__retarget_lock_init_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <__retarget_lock_acquire_recursive>:
 8008b82:	4770      	bx	lr

08008b84 <__retarget_lock_release_recursive>:
 8008b84:	4770      	bx	lr
	...

08008b88 <nanf>:
 8008b88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b90 <nanf+0x8>
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	7fc00000 	.word	0x7fc00000

08008b94 <quorem>:
 8008b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	6903      	ldr	r3, [r0, #16]
 8008b9a:	690c      	ldr	r4, [r1, #16]
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	db7e      	blt.n	8008ca0 <quorem+0x10c>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	f101 0814 	add.w	r8, r1, #20
 8008ba8:	f100 0514 	add.w	r5, r0, #20
 8008bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bca:	d331      	bcc.n	8008c30 <quorem+0x9c>
 8008bcc:	f04f 0e00 	mov.w	lr, #0
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	46ac      	mov	ip, r5
 8008bd4:	46f2      	mov	sl, lr
 8008bd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bda:	b293      	uxth	r3, r2
 8008bdc:	fb06 e303 	mla	r3, r6, r3, lr
 8008be0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008be4:	0c1a      	lsrs	r2, r3, #16
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	ebaa 0303 	sub.w	r3, sl, r3
 8008bec:	f8dc a000 	ldr.w	sl, [ip]
 8008bf0:	fa13 f38a 	uxtah	r3, r3, sl
 8008bf4:	fb06 220e 	mla	r2, r6, lr, r2
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c00:	b292      	uxth	r2, r2
 8008c02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c0a:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c0e:	4581      	cmp	r9, r0
 8008c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c14:	f84c 3b04 	str.w	r3, [ip], #4
 8008c18:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c1c:	d2db      	bcs.n	8008bd6 <quorem+0x42>
 8008c1e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c22:	b92b      	cbnz	r3, 8008c30 <quorem+0x9c>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	3b04      	subs	r3, #4
 8008c28:	429d      	cmp	r5, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	d32c      	bcc.n	8008c88 <quorem+0xf4>
 8008c2e:	613c      	str	r4, [r7, #16]
 8008c30:	4638      	mov	r0, r7
 8008c32:	f001 f9f1 	bl	800a018 <__mcmp>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	db22      	blt.n	8008c80 <quorem+0xec>
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	2000      	movs	r0, #0
 8008c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c44:	f8d1 c000 	ldr.w	ip, [r1]
 8008c48:	b293      	uxth	r3, r2
 8008c4a:	1ac3      	subs	r3, r0, r3
 8008c4c:	0c12      	lsrs	r2, r2, #16
 8008c4e:	fa13 f38c 	uxtah	r3, r3, ip
 8008c52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c60:	45c1      	cmp	r9, r8
 8008c62:	f841 3b04 	str.w	r3, [r1], #4
 8008c66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c6a:	d2e9      	bcs.n	8008c40 <quorem+0xac>
 8008c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c74:	b922      	cbnz	r2, 8008c80 <quorem+0xec>
 8008c76:	3b04      	subs	r3, #4
 8008c78:	429d      	cmp	r5, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	d30a      	bcc.n	8008c94 <quorem+0x100>
 8008c7e:	613c      	str	r4, [r7, #16]
 8008c80:	4630      	mov	r0, r6
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	3b04      	subs	r3, #4
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	d1ce      	bne.n	8008c2e <quorem+0x9a>
 8008c90:	3c01      	subs	r4, #1
 8008c92:	e7c9      	b.n	8008c28 <quorem+0x94>
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	3b04      	subs	r3, #4
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d1f0      	bne.n	8008c7e <quorem+0xea>
 8008c9c:	3c01      	subs	r4, #1
 8008c9e:	e7eb      	b.n	8008c78 <quorem+0xe4>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7ee      	b.n	8008c82 <quorem+0xee>
 8008ca4:	0000      	movs	r0, r0
	...

08008ca8 <_dtoa_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	ed2d 8b04 	vpush	{d8-d9}
 8008cb0:	69c5      	ldr	r5, [r0, #28]
 8008cb2:	b093      	sub	sp, #76	; 0x4c
 8008cb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cb8:	ec57 6b10 	vmov	r6, r7, d0
 8008cbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cc0:	9107      	str	r1, [sp, #28]
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8008cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc8:	b975      	cbnz	r5, 8008ce8 <_dtoa_r+0x40>
 8008cca:	2010      	movs	r0, #16
 8008ccc:	f000 fe2a 	bl	8009924 <malloc>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	61e0      	str	r0, [r4, #28]
 8008cd4:	b920      	cbnz	r0, 8008ce0 <_dtoa_r+0x38>
 8008cd6:	4bae      	ldr	r3, [pc, #696]	; (8008f90 <_dtoa_r+0x2e8>)
 8008cd8:	21ef      	movs	r1, #239	; 0xef
 8008cda:	48ae      	ldr	r0, [pc, #696]	; (8008f94 <_dtoa_r+0x2ec>)
 8008cdc:	f002 fc74 	bl	800b5c8 <__assert_func>
 8008ce0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ce4:	6005      	str	r5, [r0, #0]
 8008ce6:	60c5      	str	r5, [r0, #12]
 8008ce8:	69e3      	ldr	r3, [r4, #28]
 8008cea:	6819      	ldr	r1, [r3, #0]
 8008cec:	b151      	cbz	r1, 8008d04 <_dtoa_r+0x5c>
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	604a      	str	r2, [r1, #4]
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4093      	lsls	r3, r2
 8008cf6:	608b      	str	r3, [r1, #8]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 ff07 	bl	8009b0c <_Bfree>
 8008cfe:	69e3      	ldr	r3, [r4, #28]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	1e3b      	subs	r3, r7, #0
 8008d06:	bfbb      	ittet	lt
 8008d08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d0c:	9303      	strlt	r3, [sp, #12]
 8008d0e:	2300      	movge	r3, #0
 8008d10:	2201      	movlt	r2, #1
 8008d12:	bfac      	ite	ge
 8008d14:	f8c8 3000 	strge.w	r3, [r8]
 8008d18:	f8c8 2000 	strlt.w	r2, [r8]
 8008d1c:	4b9e      	ldr	r3, [pc, #632]	; (8008f98 <_dtoa_r+0x2f0>)
 8008d1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d22:	ea33 0308 	bics.w	r3, r3, r8
 8008d26:	d11b      	bne.n	8008d60 <_dtoa_r+0xb8>
 8008d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d34:	4333      	orrs	r3, r6
 8008d36:	f000 8593 	beq.w	8009860 <_dtoa_r+0xbb8>
 8008d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d3c:	b963      	cbnz	r3, 8008d58 <_dtoa_r+0xb0>
 8008d3e:	4b97      	ldr	r3, [pc, #604]	; (8008f9c <_dtoa_r+0x2f4>)
 8008d40:	e027      	b.n	8008d92 <_dtoa_r+0xea>
 8008d42:	4b97      	ldr	r3, [pc, #604]	; (8008fa0 <_dtoa_r+0x2f8>)
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	9800      	ldr	r0, [sp, #0]
 8008d4e:	b013      	add	sp, #76	; 0x4c
 8008d50:	ecbd 8b04 	vpop	{d8-d9}
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	4b90      	ldr	r3, [pc, #576]	; (8008f9c <_dtoa_r+0x2f4>)
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	3303      	adds	r3, #3
 8008d5e:	e7f3      	b.n	8008d48 <_dtoa_r+0xa0>
 8008d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d64:	2200      	movs	r2, #0
 8008d66:	ec51 0b17 	vmov	r0, r1, d7
 8008d6a:	eeb0 8a47 	vmov.f32	s16, s14
 8008d6e:	eef0 8a67 	vmov.f32	s17, s15
 8008d72:	2300      	movs	r3, #0
 8008d74:	f7f7 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d78:	4681      	mov	r9, r0
 8008d7a:	b160      	cbz	r0, 8008d96 <_dtoa_r+0xee>
 8008d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d7e:	2301      	movs	r3, #1
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8568 	beq.w	800985a <_dtoa_r+0xbb2>
 8008d8a:	4b86      	ldr	r3, [pc, #536]	; (8008fa4 <_dtoa_r+0x2fc>)
 8008d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	e7da      	b.n	8008d4c <_dtoa_r+0xa4>
 8008d96:	aa10      	add	r2, sp, #64	; 0x40
 8008d98:	a911      	add	r1, sp, #68	; 0x44
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008da0:	eef0 0a68 	vmov.f32	s1, s17
 8008da4:	f001 fa4e 	bl	800a244 <__d2b>
 8008da8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dac:	4682      	mov	sl, r0
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	d07f      	beq.n	8008eb2 <_dtoa_r+0x20a>
 8008db2:	ee18 3a90 	vmov	r3, s17
 8008db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008dbe:	ec51 0b18 	vmov	r0, r1, d8
 8008dc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008dca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008dce:	4619      	mov	r1, r3
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4b75      	ldr	r3, [pc, #468]	; (8008fa8 <_dtoa_r+0x300>)
 8008dd4:	f7f7 fa58 	bl	8000288 <__aeabi_dsub>
 8008dd8:	a367      	add	r3, pc, #412	; (adr r3, 8008f78 <_dtoa_r+0x2d0>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	a367      	add	r3, pc, #412	; (adr r3, 8008f80 <_dtoa_r+0x2d8>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fa50 	bl	800028c <__adddf3>
 8008dec:	4606      	mov	r6, r0
 8008dee:	4628      	mov	r0, r5
 8008df0:	460f      	mov	r7, r1
 8008df2:	f7f7 fb97 	bl	8000524 <__aeabi_i2d>
 8008df6:	a364      	add	r3, pc, #400	; (adr r3, 8008f88 <_dtoa_r+0x2e0>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fa40 	bl	800028c <__adddf3>
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	460f      	mov	r7, r1
 8008e10:	f7f7 fea2 	bl	8000b58 <__aeabi_d2iz>
 8008e14:	2200      	movs	r2, #0
 8008e16:	4683      	mov	fp, r0
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	f7f7 fe5d 	bl	8000adc <__aeabi_dcmplt>
 8008e22:	b148      	cbz	r0, 8008e38 <_dtoa_r+0x190>
 8008e24:	4658      	mov	r0, fp
 8008e26:	f7f7 fb7d 	bl	8000524 <__aeabi_i2d>
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	f7f7 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e32:	b908      	cbnz	r0, 8008e38 <_dtoa_r+0x190>
 8008e34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e38:	f1bb 0f16 	cmp.w	fp, #22
 8008e3c:	d857      	bhi.n	8008eee <_dtoa_r+0x246>
 8008e3e:	4b5b      	ldr	r3, [pc, #364]	; (8008fac <_dtoa_r+0x304>)
 8008e40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	ec51 0b18 	vmov	r0, r1, d8
 8008e4c:	f7f7 fe46 	bl	8000adc <__aeabi_dcmplt>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d04e      	beq.n	8008ef2 <_dtoa_r+0x24a>
 8008e54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e58:	2300      	movs	r3, #0
 8008e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e5e:	1b5b      	subs	r3, r3, r5
 8008e60:	1e5a      	subs	r2, r3, #1
 8008e62:	bf45      	ittet	mi
 8008e64:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e68:	9305      	strmi	r3, [sp, #20]
 8008e6a:	2300      	movpl	r3, #0
 8008e6c:	2300      	movmi	r3, #0
 8008e6e:	9206      	str	r2, [sp, #24]
 8008e70:	bf54      	ite	pl
 8008e72:	9305      	strpl	r3, [sp, #20]
 8008e74:	9306      	strmi	r3, [sp, #24]
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	db3c      	blt.n	8008ef6 <_dtoa_r+0x24e>
 8008e7c:	9b06      	ldr	r3, [sp, #24]
 8008e7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e82:	445b      	add	r3, fp
 8008e84:	9306      	str	r3, [sp, #24]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d868      	bhi.n	8008f62 <_dtoa_r+0x2ba>
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	bfc4      	itt	gt
 8008e94:	3b04      	subgt	r3, #4
 8008e96:	9307      	strgt	r3, [sp, #28]
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008e9e:	bfcc      	ite	gt
 8008ea0:	2500      	movgt	r5, #0
 8008ea2:	2501      	movle	r5, #1
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	f200 8085 	bhi.w	8008fb4 <_dtoa_r+0x30c>
 8008eaa:	e8df f003 	tbb	[pc, r3]
 8008eae:	3b2e      	.short	0x3b2e
 8008eb0:	5839      	.short	0x5839
 8008eb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008eb6:	441d      	add	r5, r3
 8008eb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	bfc1      	itttt	gt
 8008ec0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ec4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ec8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ecc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ed0:	bfd6      	itet	le
 8008ed2:	f1c3 0320 	rsble	r3, r3, #32
 8008ed6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008eda:	fa06 f003 	lslle.w	r0, r6, r3
 8008ede:	f7f7 fb11 	bl	8000504 <__aeabi_ui2d>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ee8:	3d01      	subs	r5, #1
 8008eea:	920e      	str	r2, [sp, #56]	; 0x38
 8008eec:	e76f      	b.n	8008dce <_dtoa_r+0x126>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e7b3      	b.n	8008e5a <_dtoa_r+0x1b2>
 8008ef2:	900c      	str	r0, [sp, #48]	; 0x30
 8008ef4:	e7b2      	b.n	8008e5c <_dtoa_r+0x1b4>
 8008ef6:	9b05      	ldr	r3, [sp, #20]
 8008ef8:	eba3 030b 	sub.w	r3, r3, fp
 8008efc:	9305      	str	r3, [sp, #20]
 8008efe:	f1cb 0300 	rsb	r3, fp, #0
 8008f02:	9308      	str	r3, [sp, #32]
 8008f04:	2300      	movs	r3, #0
 8008f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f08:	e7bf      	b.n	8008e8a <_dtoa_r+0x1e2>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc52      	bgt.n	8008fba <_dtoa_r+0x312>
 8008f14:	2301      	movs	r3, #1
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f1e:	e00b      	b.n	8008f38 <_dtoa_r+0x290>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e7f3      	b.n	8008f0c <_dtoa_r+0x264>
 8008f24:	2300      	movs	r3, #0
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2a:	445b      	add	r3, fp
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	bfb8      	it	lt
 8008f36:	2301      	movlt	r3, #1
 8008f38:	69e0      	ldr	r0, [r4, #28]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	f102 0614 	add.w	r6, r2, #20
 8008f42:	429e      	cmp	r6, r3
 8008f44:	d93d      	bls.n	8008fc2 <_dtoa_r+0x31a>
 8008f46:	6041      	str	r1, [r0, #4]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fd9f 	bl	8009a8c <_Balloc>
 8008f4e:	9000      	str	r0, [sp, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d139      	bne.n	8008fc8 <_dtoa_r+0x320>
 8008f54:	4b16      	ldr	r3, [pc, #88]	; (8008fb0 <_dtoa_r+0x308>)
 8008f56:	4602      	mov	r2, r0
 8008f58:	f240 11af 	movw	r1, #431	; 0x1af
 8008f5c:	e6bd      	b.n	8008cda <_dtoa_r+0x32>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e7e1      	b.n	8008f26 <_dtoa_r+0x27e>
 8008f62:	2501      	movs	r5, #1
 8008f64:	2300      	movs	r3, #0
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	9509      	str	r5, [sp, #36]	; 0x24
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	2312      	movs	r3, #18
 8008f76:	e7d1      	b.n	8008f1c <_dtoa_r+0x274>
 8008f78:	636f4361 	.word	0x636f4361
 8008f7c:	3fd287a7 	.word	0x3fd287a7
 8008f80:	8b60c8b3 	.word	0x8b60c8b3
 8008f84:	3fc68a28 	.word	0x3fc68a28
 8008f88:	509f79fb 	.word	0x509f79fb
 8008f8c:	3fd34413 	.word	0x3fd34413
 8008f90:	0800c406 	.word	0x0800c406
 8008f94:	0800c41d 	.word	0x0800c41d
 8008f98:	7ff00000 	.word	0x7ff00000
 8008f9c:	0800c402 	.word	0x0800c402
 8008fa0:	0800c3f9 	.word	0x0800c3f9
 8008fa4:	0800c3d1 	.word	0x0800c3d1
 8008fa8:	3ff80000 	.word	0x3ff80000
 8008fac:	0800c508 	.word	0x0800c508
 8008fb0:	0800c475 	.word	0x0800c475
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb8:	e7d7      	b.n	8008f6a <_dtoa_r+0x2c2>
 8008fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	e7ba      	b.n	8008f38 <_dtoa_r+0x290>
 8008fc2:	3101      	adds	r1, #1
 8008fc4:	0052      	lsls	r2, r2, #1
 8008fc6:	e7ba      	b.n	8008f3e <_dtoa_r+0x296>
 8008fc8:	69e3      	ldr	r3, [r4, #28]
 8008fca:	9a00      	ldr	r2, [sp, #0]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	2b0e      	cmp	r3, #14
 8008fd2:	f200 80a8 	bhi.w	8009126 <_dtoa_r+0x47e>
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	f000 80a5 	beq.w	8009126 <_dtoa_r+0x47e>
 8008fdc:	f1bb 0f00 	cmp.w	fp, #0
 8008fe0:	dd38      	ble.n	8009054 <_dtoa_r+0x3ac>
 8008fe2:	4bc0      	ldr	r3, [pc, #768]	; (80092e4 <_dtoa_r+0x63c>)
 8008fe4:	f00b 020f 	and.w	r2, fp, #15
 8008fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ff0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ff4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ff8:	d019      	beq.n	800902e <_dtoa_r+0x386>
 8008ffa:	4bbb      	ldr	r3, [pc, #748]	; (80092e8 <_dtoa_r+0x640>)
 8008ffc:	ec51 0b18 	vmov	r0, r1, d8
 8009000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009004:	f7f7 fc22 	bl	800084c <__aeabi_ddiv>
 8009008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800900c:	f008 080f 	and.w	r8, r8, #15
 8009010:	2503      	movs	r5, #3
 8009012:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80092e8 <_dtoa_r+0x640>
 8009016:	f1b8 0f00 	cmp.w	r8, #0
 800901a:	d10a      	bne.n	8009032 <_dtoa_r+0x38a>
 800901c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009020:	4632      	mov	r2, r6
 8009022:	463b      	mov	r3, r7
 8009024:	f7f7 fc12 	bl	800084c <__aeabi_ddiv>
 8009028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800902c:	e02b      	b.n	8009086 <_dtoa_r+0x3de>
 800902e:	2502      	movs	r5, #2
 8009030:	e7ef      	b.n	8009012 <_dtoa_r+0x36a>
 8009032:	f018 0f01 	tst.w	r8, #1
 8009036:	d008      	beq.n	800904a <_dtoa_r+0x3a2>
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	3501      	adds	r5, #1
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800904e:	f109 0908 	add.w	r9, r9, #8
 8009052:	e7e0      	b.n	8009016 <_dtoa_r+0x36e>
 8009054:	f000 809f 	beq.w	8009196 <_dtoa_r+0x4ee>
 8009058:	f1cb 0600 	rsb	r6, fp, #0
 800905c:	4ba1      	ldr	r3, [pc, #644]	; (80092e4 <_dtoa_r+0x63c>)
 800905e:	4fa2      	ldr	r7, [pc, #648]	; (80092e8 <_dtoa_r+0x640>)
 8009060:	f006 020f 	and.w	r2, r6, #15
 8009064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	ec51 0b18 	vmov	r0, r1, d8
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009078:	1136      	asrs	r6, r6, #4
 800907a:	2300      	movs	r3, #0
 800907c:	2502      	movs	r5, #2
 800907e:	2e00      	cmp	r6, #0
 8009080:	d17e      	bne.n	8009180 <_dtoa_r+0x4d8>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1d0      	bne.n	8009028 <_dtoa_r+0x380>
 8009086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009088:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8084 	beq.w	800919a <_dtoa_r+0x4f2>
 8009092:	4b96      	ldr	r3, [pc, #600]	; (80092ec <_dtoa_r+0x644>)
 8009094:	2200      	movs	r2, #0
 8009096:	4640      	mov	r0, r8
 8009098:	4649      	mov	r1, r9
 800909a:	f7f7 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d07b      	beq.n	800919a <_dtoa_r+0x4f2>
 80090a2:	9b04      	ldr	r3, [sp, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d078      	beq.n	800919a <_dtoa_r+0x4f2>
 80090a8:	9b01      	ldr	r3, [sp, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd39      	ble.n	8009122 <_dtoa_r+0x47a>
 80090ae:	4b90      	ldr	r3, [pc, #576]	; (80092f0 <_dtoa_r+0x648>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 fa9f 	bl	80005f8 <__aeabi_dmul>
 80090ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090be:	9e01      	ldr	r6, [sp, #4]
 80090c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80090c4:	3501      	adds	r5, #1
 80090c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7f7 fa2a 	bl	8000524 <__aeabi_i2d>
 80090d0:	4642      	mov	r2, r8
 80090d2:	464b      	mov	r3, r9
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	4b86      	ldr	r3, [pc, #536]	; (80092f4 <_dtoa_r+0x64c>)
 80090da:	2200      	movs	r2, #0
 80090dc:	f7f7 f8d6 	bl	800028c <__adddf3>
 80090e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e8:	9303      	str	r3, [sp, #12]
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d158      	bne.n	80091a0 <_dtoa_r+0x4f8>
 80090ee:	4b82      	ldr	r3, [pc, #520]	; (80092f8 <_dtoa_r+0x650>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090fe:	4680      	mov	r8, r0
 8009100:	4689      	mov	r9, r1
 8009102:	f7f7 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 8009106:	2800      	cmp	r0, #0
 8009108:	f040 8296 	bne.w	8009638 <_dtoa_r+0x990>
 800910c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009110:	4640      	mov	r0, r8
 8009112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fce0 	bl	8000adc <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	f040 8289 	bne.w	8009634 <_dtoa_r+0x98c>
 8009122:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009128:	2b00      	cmp	r3, #0
 800912a:	f2c0 814e 	blt.w	80093ca <_dtoa_r+0x722>
 800912e:	f1bb 0f0e 	cmp.w	fp, #14
 8009132:	f300 814a 	bgt.w	80093ca <_dtoa_r+0x722>
 8009136:	4b6b      	ldr	r3, [pc, #428]	; (80092e4 <_dtoa_r+0x63c>)
 8009138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800913c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	f280 80dc 	bge.w	8009300 <_dtoa_r+0x658>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f300 80d8 	bgt.w	8009300 <_dtoa_r+0x658>
 8009150:	f040 826f 	bne.w	8009632 <_dtoa_r+0x98a>
 8009154:	4b68      	ldr	r3, [pc, #416]	; (80092f8 <_dtoa_r+0x650>)
 8009156:	2200      	movs	r2, #0
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009164:	f7f7 fcce 	bl	8000b04 <__aeabi_dcmpge>
 8009168:	9e04      	ldr	r6, [sp, #16]
 800916a:	4637      	mov	r7, r6
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 8245 	bne.w	80095fc <_dtoa_r+0x954>
 8009172:	9d00      	ldr	r5, [sp, #0]
 8009174:	2331      	movs	r3, #49	; 0x31
 8009176:	f805 3b01 	strb.w	r3, [r5], #1
 800917a:	f10b 0b01 	add.w	fp, fp, #1
 800917e:	e241      	b.n	8009604 <_dtoa_r+0x95c>
 8009180:	07f2      	lsls	r2, r6, #31
 8009182:	d505      	bpl.n	8009190 <_dtoa_r+0x4e8>
 8009184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009188:	f7f7 fa36 	bl	80005f8 <__aeabi_dmul>
 800918c:	3501      	adds	r5, #1
 800918e:	2301      	movs	r3, #1
 8009190:	1076      	asrs	r6, r6, #1
 8009192:	3708      	adds	r7, #8
 8009194:	e773      	b.n	800907e <_dtoa_r+0x3d6>
 8009196:	2502      	movs	r5, #2
 8009198:	e775      	b.n	8009086 <_dtoa_r+0x3de>
 800919a:	9e04      	ldr	r6, [sp, #16]
 800919c:	465f      	mov	r7, fp
 800919e:	e792      	b.n	80090c6 <_dtoa_r+0x41e>
 80091a0:	9900      	ldr	r1, [sp, #0]
 80091a2:	4b50      	ldr	r3, [pc, #320]	; (80092e4 <_dtoa_r+0x63c>)
 80091a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091a8:	4431      	add	r1, r6
 80091aa:	9102      	str	r1, [sp, #8]
 80091ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091ae:	eeb0 9a47 	vmov.f32	s18, s14
 80091b2:	eef0 9a67 	vmov.f32	s19, s15
 80091b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091be:	2900      	cmp	r1, #0
 80091c0:	d044      	beq.n	800924c <_dtoa_r+0x5a4>
 80091c2:	494e      	ldr	r1, [pc, #312]	; (80092fc <_dtoa_r+0x654>)
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f7 fb41 	bl	800084c <__aeabi_ddiv>
 80091ca:	ec53 2b19 	vmov	r2, r3, d9
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	9d00      	ldr	r5, [sp, #0]
 80091d4:	ec41 0b19 	vmov	d9, r0, r1
 80091d8:	4649      	mov	r1, r9
 80091da:	4640      	mov	r0, r8
 80091dc:	f7f7 fcbc 	bl	8000b58 <__aeabi_d2iz>
 80091e0:	4606      	mov	r6, r0
 80091e2:	f7f7 f99f 	bl	8000524 <__aeabi_i2d>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	3630      	adds	r6, #48	; 0x30
 80091f4:	f805 6b01 	strb.w	r6, [r5], #1
 80091f8:	ec53 2b19 	vmov	r2, r3, d9
 80091fc:	4680      	mov	r8, r0
 80091fe:	4689      	mov	r9, r1
 8009200:	f7f7 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	d164      	bne.n	80092d2 <_dtoa_r+0x62a>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	4937      	ldr	r1, [pc, #220]	; (80092ec <_dtoa_r+0x644>)
 800920e:	2000      	movs	r0, #0
 8009210:	f7f7 f83a 	bl	8000288 <__aeabi_dsub>
 8009214:	ec53 2b19 	vmov	r2, r3, d9
 8009218:	f7f7 fc60 	bl	8000adc <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	f040 80b6 	bne.w	800938e <_dtoa_r+0x6e6>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	429d      	cmp	r5, r3
 8009226:	f43f af7c 	beq.w	8009122 <_dtoa_r+0x47a>
 800922a:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <_dtoa_r+0x648>)
 800922c:	ec51 0b19 	vmov	r0, r1, d9
 8009230:	2200      	movs	r2, #0
 8009232:	f7f7 f9e1 	bl	80005f8 <__aeabi_dmul>
 8009236:	4b2e      	ldr	r3, [pc, #184]	; (80092f0 <_dtoa_r+0x648>)
 8009238:	ec41 0b19 	vmov	d9, r0, r1
 800923c:	2200      	movs	r2, #0
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	4680      	mov	r8, r0
 8009248:	4689      	mov	r9, r1
 800924a:	e7c5      	b.n	80091d8 <_dtoa_r+0x530>
 800924c:	ec51 0b17 	vmov	r0, r1, d7
 8009250:	f7f7 f9d2 	bl	80005f8 <__aeabi_dmul>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	9d00      	ldr	r5, [sp, #0]
 8009258:	930f      	str	r3, [sp, #60]	; 0x3c
 800925a:	ec41 0b19 	vmov	d9, r0, r1
 800925e:	4649      	mov	r1, r9
 8009260:	4640      	mov	r0, r8
 8009262:	f7f7 fc79 	bl	8000b58 <__aeabi_d2iz>
 8009266:	4606      	mov	r6, r0
 8009268:	f7f7 f95c 	bl	8000524 <__aeabi_i2d>
 800926c:	3630      	adds	r6, #48	; 0x30
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 f807 	bl	8000288 <__aeabi_dsub>
 800927a:	f805 6b01 	strb.w	r6, [r5], #1
 800927e:	9b02      	ldr	r3, [sp, #8]
 8009280:	429d      	cmp	r5, r3
 8009282:	4680      	mov	r8, r0
 8009284:	4689      	mov	r9, r1
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	d124      	bne.n	80092d6 <_dtoa_r+0x62e>
 800928c:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <_dtoa_r+0x654>)
 800928e:	ec51 0b19 	vmov	r0, r1, d9
 8009292:	f7f6 fffb 	bl	800028c <__adddf3>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f7 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d173      	bne.n	800938e <_dtoa_r+0x6e6>
 80092a6:	ec53 2b19 	vmov	r2, r3, d9
 80092aa:	4914      	ldr	r1, [pc, #80]	; (80092fc <_dtoa_r+0x654>)
 80092ac:	2000      	movs	r0, #0
 80092ae:	f7f6 ffeb 	bl	8000288 <__aeabi_dsub>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4640      	mov	r0, r8
 80092b8:	4649      	mov	r1, r9
 80092ba:	f7f7 fc0f 	bl	8000adc <__aeabi_dcmplt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f af2f 	beq.w	8009122 <_dtoa_r+0x47a>
 80092c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092c6:	1e6b      	subs	r3, r5, #1
 80092c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092ce:	2b30      	cmp	r3, #48	; 0x30
 80092d0:	d0f8      	beq.n	80092c4 <_dtoa_r+0x61c>
 80092d2:	46bb      	mov	fp, r7
 80092d4:	e04a      	b.n	800936c <_dtoa_r+0x6c4>
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <_dtoa_r+0x648>)
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	4680      	mov	r8, r0
 80092de:	4689      	mov	r9, r1
 80092e0:	e7bd      	b.n	800925e <_dtoa_r+0x5b6>
 80092e2:	bf00      	nop
 80092e4:	0800c508 	.word	0x0800c508
 80092e8:	0800c4e0 	.word	0x0800c4e0
 80092ec:	3ff00000 	.word	0x3ff00000
 80092f0:	40240000 	.word	0x40240000
 80092f4:	401c0000 	.word	0x401c0000
 80092f8:	40140000 	.word	0x40140000
 80092fc:	3fe00000 	.word	0x3fe00000
 8009300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009304:	9d00      	ldr	r5, [sp, #0]
 8009306:	4642      	mov	r2, r8
 8009308:	464b      	mov	r3, r9
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f7 fa9d 	bl	800084c <__aeabi_ddiv>
 8009312:	f7f7 fc21 	bl	8000b58 <__aeabi_d2iz>
 8009316:	9001      	str	r0, [sp, #4]
 8009318:	f7f7 f904 	bl	8000524 <__aeabi_i2d>
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffac 	bl	8000288 <__aeabi_dsub>
 8009330:	9e01      	ldr	r6, [sp, #4]
 8009332:	9f04      	ldr	r7, [sp, #16]
 8009334:	3630      	adds	r6, #48	; 0x30
 8009336:	f805 6b01 	strb.w	r6, [r5], #1
 800933a:	9e00      	ldr	r6, [sp, #0]
 800933c:	1bae      	subs	r6, r5, r6
 800933e:	42b7      	cmp	r7, r6
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	d134      	bne.n	80093b0 <_dtoa_r+0x708>
 8009346:	f7f6 ffa1 	bl	800028c <__adddf3>
 800934a:	4642      	mov	r2, r8
 800934c:	464b      	mov	r3, r9
 800934e:	4606      	mov	r6, r0
 8009350:	460f      	mov	r7, r1
 8009352:	f7f7 fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8009356:	b9c8      	cbnz	r0, 800938c <_dtoa_r+0x6e4>
 8009358:	4642      	mov	r2, r8
 800935a:	464b      	mov	r3, r9
 800935c:	4630      	mov	r0, r6
 800935e:	4639      	mov	r1, r7
 8009360:	f7f7 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009364:	b110      	cbz	r0, 800936c <_dtoa_r+0x6c4>
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	07db      	lsls	r3, r3, #31
 800936a:	d40f      	bmi.n	800938c <_dtoa_r+0x6e4>
 800936c:	4651      	mov	r1, sl
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fbcc 	bl	8009b0c <_Bfree>
 8009374:	2300      	movs	r3, #0
 8009376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009378:	702b      	strb	r3, [r5, #0]
 800937a:	f10b 0301 	add.w	r3, fp, #1
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009382:	2b00      	cmp	r3, #0
 8009384:	f43f ace2 	beq.w	8008d4c <_dtoa_r+0xa4>
 8009388:	601d      	str	r5, [r3, #0]
 800938a:	e4df      	b.n	8008d4c <_dtoa_r+0xa4>
 800938c:	465f      	mov	r7, fp
 800938e:	462b      	mov	r3, r5
 8009390:	461d      	mov	r5, r3
 8009392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009396:	2a39      	cmp	r2, #57	; 0x39
 8009398:	d106      	bne.n	80093a8 <_dtoa_r+0x700>
 800939a:	9a00      	ldr	r2, [sp, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d1f7      	bne.n	8009390 <_dtoa_r+0x6e8>
 80093a0:	9900      	ldr	r1, [sp, #0]
 80093a2:	2230      	movs	r2, #48	; 0x30
 80093a4:	3701      	adds	r7, #1
 80093a6:	700a      	strb	r2, [r1, #0]
 80093a8:	781a      	ldrb	r2, [r3, #0]
 80093aa:	3201      	adds	r2, #1
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e790      	b.n	80092d2 <_dtoa_r+0x62a>
 80093b0:	4ba3      	ldr	r3, [pc, #652]	; (8009640 <_dtoa_r+0x998>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	2200      	movs	r2, #0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4606      	mov	r6, r0
 80093be:	460f      	mov	r7, r1
 80093c0:	f7f7 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d09e      	beq.n	8009306 <_dtoa_r+0x65e>
 80093c8:	e7d0      	b.n	800936c <_dtoa_r+0x6c4>
 80093ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	f000 80ca 	beq.w	8009566 <_dtoa_r+0x8be>
 80093d2:	9a07      	ldr	r2, [sp, #28]
 80093d4:	2a01      	cmp	r2, #1
 80093d6:	f300 80ad 	bgt.w	8009534 <_dtoa_r+0x88c>
 80093da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093dc:	2a00      	cmp	r2, #0
 80093de:	f000 80a5 	beq.w	800952c <_dtoa_r+0x884>
 80093e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093e6:	9e08      	ldr	r6, [sp, #32]
 80093e8:	9d05      	ldr	r5, [sp, #20]
 80093ea:	9a05      	ldr	r2, [sp, #20]
 80093ec:	441a      	add	r2, r3
 80093ee:	9205      	str	r2, [sp, #20]
 80093f0:	9a06      	ldr	r2, [sp, #24]
 80093f2:	2101      	movs	r1, #1
 80093f4:	441a      	add	r2, r3
 80093f6:	4620      	mov	r0, r4
 80093f8:	9206      	str	r2, [sp, #24]
 80093fa:	f000 fc87 	bl	8009d0c <__i2b>
 80093fe:	4607      	mov	r7, r0
 8009400:	b165      	cbz	r5, 800941c <_dtoa_r+0x774>
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd09      	ble.n	800941c <_dtoa_r+0x774>
 8009408:	42ab      	cmp	r3, r5
 800940a:	9a05      	ldr	r2, [sp, #20]
 800940c:	bfa8      	it	ge
 800940e:	462b      	movge	r3, r5
 8009410:	1ad2      	subs	r2, r2, r3
 8009412:	9205      	str	r2, [sp, #20]
 8009414:	9a06      	ldr	r2, [sp, #24]
 8009416:	1aed      	subs	r5, r5, r3
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	9306      	str	r3, [sp, #24]
 800941c:	9b08      	ldr	r3, [sp, #32]
 800941e:	b1f3      	cbz	r3, 800945e <_dtoa_r+0x7b6>
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80a3 	beq.w	800956e <_dtoa_r+0x8c6>
 8009428:	2e00      	cmp	r6, #0
 800942a:	dd10      	ble.n	800944e <_dtoa_r+0x7a6>
 800942c:	4639      	mov	r1, r7
 800942e:	4632      	mov	r2, r6
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fd2b 	bl	8009e8c <__pow5mult>
 8009436:	4652      	mov	r2, sl
 8009438:	4601      	mov	r1, r0
 800943a:	4607      	mov	r7, r0
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fc7b 	bl	8009d38 <__multiply>
 8009442:	4651      	mov	r1, sl
 8009444:	4680      	mov	r8, r0
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fb60 	bl	8009b0c <_Bfree>
 800944c:	46c2      	mov	sl, r8
 800944e:	9b08      	ldr	r3, [sp, #32]
 8009450:	1b9a      	subs	r2, r3, r6
 8009452:	d004      	beq.n	800945e <_dtoa_r+0x7b6>
 8009454:	4651      	mov	r1, sl
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fd18 	bl	8009e8c <__pow5mult>
 800945c:	4682      	mov	sl, r0
 800945e:	2101      	movs	r1, #1
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fc53 	bl	8009d0c <__i2b>
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	4606      	mov	r6, r0
 800946c:	f340 8081 	ble.w	8009572 <_dtoa_r+0x8ca>
 8009470:	461a      	mov	r2, r3
 8009472:	4601      	mov	r1, r0
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fd09 	bl	8009e8c <__pow5mult>
 800947a:	9b07      	ldr	r3, [sp, #28]
 800947c:	2b01      	cmp	r3, #1
 800947e:	4606      	mov	r6, r0
 8009480:	dd7a      	ble.n	8009578 <_dtoa_r+0x8d0>
 8009482:	f04f 0800 	mov.w	r8, #0
 8009486:	6933      	ldr	r3, [r6, #16]
 8009488:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800948c:	6918      	ldr	r0, [r3, #16]
 800948e:	f000 fbef 	bl	8009c70 <__hi0bits>
 8009492:	f1c0 0020 	rsb	r0, r0, #32
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	4418      	add	r0, r3
 800949a:	f010 001f 	ands.w	r0, r0, #31
 800949e:	f000 8094 	beq.w	80095ca <_dtoa_r+0x922>
 80094a2:	f1c0 0320 	rsb	r3, r0, #32
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	f340 8085 	ble.w	80095b6 <_dtoa_r+0x90e>
 80094ac:	9b05      	ldr	r3, [sp, #20]
 80094ae:	f1c0 001c 	rsb	r0, r0, #28
 80094b2:	4403      	add	r3, r0
 80094b4:	9305      	str	r3, [sp, #20]
 80094b6:	9b06      	ldr	r3, [sp, #24]
 80094b8:	4403      	add	r3, r0
 80094ba:	4405      	add	r5, r0
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dd05      	ble.n	80094d0 <_dtoa_r+0x828>
 80094c4:	4651      	mov	r1, sl
 80094c6:	461a      	mov	r2, r3
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 fd39 	bl	8009f40 <__lshift>
 80094ce:	4682      	mov	sl, r0
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dd05      	ble.n	80094e2 <_dtoa_r+0x83a>
 80094d6:	4631      	mov	r1, r6
 80094d8:	461a      	mov	r2, r3
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fd30 	bl	8009f40 <__lshift>
 80094e0:	4606      	mov	r6, r0
 80094e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d072      	beq.n	80095ce <_dtoa_r+0x926>
 80094e8:	4631      	mov	r1, r6
 80094ea:	4650      	mov	r0, sl
 80094ec:	f000 fd94 	bl	800a018 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	da6c      	bge.n	80095ce <_dtoa_r+0x926>
 80094f4:	2300      	movs	r3, #0
 80094f6:	4651      	mov	r1, sl
 80094f8:	220a      	movs	r2, #10
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fb28 	bl	8009b50 <__multadd>
 8009500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009502:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009506:	4682      	mov	sl, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 81b0 	beq.w	800986e <_dtoa_r+0xbc6>
 800950e:	2300      	movs	r3, #0
 8009510:	4639      	mov	r1, r7
 8009512:	220a      	movs	r2, #10
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fb1b 	bl	8009b50 <__multadd>
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	4607      	mov	r7, r0
 8009520:	f300 8096 	bgt.w	8009650 <_dtoa_r+0x9a8>
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	2b02      	cmp	r3, #2
 8009528:	dc59      	bgt.n	80095de <_dtoa_r+0x936>
 800952a:	e091      	b.n	8009650 <_dtoa_r+0x9a8>
 800952c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800952e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009532:	e758      	b.n	80093e6 <_dtoa_r+0x73e>
 8009534:	9b04      	ldr	r3, [sp, #16]
 8009536:	1e5e      	subs	r6, r3, #1
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	42b3      	cmp	r3, r6
 800953c:	bfbf      	itttt	lt
 800953e:	9b08      	ldrlt	r3, [sp, #32]
 8009540:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009542:	9608      	strlt	r6, [sp, #32]
 8009544:	1af3      	sublt	r3, r6, r3
 8009546:	bfb4      	ite	lt
 8009548:	18d2      	addlt	r2, r2, r3
 800954a:	1b9e      	subge	r6, r3, r6
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	bfbc      	itt	lt
 8009550:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009552:	2600      	movlt	r6, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfb7      	itett	lt
 8009558:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800955c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009560:	1a9d      	sublt	r5, r3, r2
 8009562:	2300      	movlt	r3, #0
 8009564:	e741      	b.n	80093ea <_dtoa_r+0x742>
 8009566:	9e08      	ldr	r6, [sp, #32]
 8009568:	9d05      	ldr	r5, [sp, #20]
 800956a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800956c:	e748      	b.n	8009400 <_dtoa_r+0x758>
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	e770      	b.n	8009454 <_dtoa_r+0x7ac>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2b01      	cmp	r3, #1
 8009576:	dc19      	bgt.n	80095ac <_dtoa_r+0x904>
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	b9bb      	cbnz	r3, 80095ac <_dtoa_r+0x904>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009582:	b99b      	cbnz	r3, 80095ac <_dtoa_r+0x904>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800958a:	0d1b      	lsrs	r3, r3, #20
 800958c:	051b      	lsls	r3, r3, #20
 800958e:	b183      	cbz	r3, 80095b2 <_dtoa_r+0x90a>
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	3301      	adds	r3, #1
 8009594:	9305      	str	r3, [sp, #20]
 8009596:	9b06      	ldr	r3, [sp, #24]
 8009598:	3301      	adds	r3, #1
 800959a:	9306      	str	r3, [sp, #24]
 800959c:	f04f 0801 	mov.w	r8, #1
 80095a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f af6f 	bne.w	8009486 <_dtoa_r+0x7de>
 80095a8:	2001      	movs	r0, #1
 80095aa:	e774      	b.n	8009496 <_dtoa_r+0x7ee>
 80095ac:	f04f 0800 	mov.w	r8, #0
 80095b0:	e7f6      	b.n	80095a0 <_dtoa_r+0x8f8>
 80095b2:	4698      	mov	r8, r3
 80095b4:	e7f4      	b.n	80095a0 <_dtoa_r+0x8f8>
 80095b6:	d082      	beq.n	80094be <_dtoa_r+0x816>
 80095b8:	9a05      	ldr	r2, [sp, #20]
 80095ba:	331c      	adds	r3, #28
 80095bc:	441a      	add	r2, r3
 80095be:	9205      	str	r2, [sp, #20]
 80095c0:	9a06      	ldr	r2, [sp, #24]
 80095c2:	441a      	add	r2, r3
 80095c4:	441d      	add	r5, r3
 80095c6:	9206      	str	r2, [sp, #24]
 80095c8:	e779      	b.n	80094be <_dtoa_r+0x816>
 80095ca:	4603      	mov	r3, r0
 80095cc:	e7f4      	b.n	80095b8 <_dtoa_r+0x910>
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dc37      	bgt.n	8009644 <_dtoa_r+0x99c>
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	dd34      	ble.n	8009644 <_dtoa_r+0x99c>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	b963      	cbnz	r3, 80095fc <_dtoa_r+0x954>
 80095e2:	4631      	mov	r1, r6
 80095e4:	2205      	movs	r2, #5
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fab2 	bl	8009b50 <__multadd>
 80095ec:	4601      	mov	r1, r0
 80095ee:	4606      	mov	r6, r0
 80095f0:	4650      	mov	r0, sl
 80095f2:	f000 fd11 	bl	800a018 <__mcmp>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f73f adbb 	bgt.w	8009172 <_dtoa_r+0x4ca>
 80095fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fe:	9d00      	ldr	r5, [sp, #0]
 8009600:	ea6f 0b03 	mvn.w	fp, r3
 8009604:	f04f 0800 	mov.w	r8, #0
 8009608:	4631      	mov	r1, r6
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fa7e 	bl	8009b0c <_Bfree>
 8009610:	2f00      	cmp	r7, #0
 8009612:	f43f aeab 	beq.w	800936c <_dtoa_r+0x6c4>
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	d005      	beq.n	8009628 <_dtoa_r+0x980>
 800961c:	45b8      	cmp	r8, r7
 800961e:	d003      	beq.n	8009628 <_dtoa_r+0x980>
 8009620:	4641      	mov	r1, r8
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fa72 	bl	8009b0c <_Bfree>
 8009628:	4639      	mov	r1, r7
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fa6e 	bl	8009b0c <_Bfree>
 8009630:	e69c      	b.n	800936c <_dtoa_r+0x6c4>
 8009632:	2600      	movs	r6, #0
 8009634:	4637      	mov	r7, r6
 8009636:	e7e1      	b.n	80095fc <_dtoa_r+0x954>
 8009638:	46bb      	mov	fp, r7
 800963a:	4637      	mov	r7, r6
 800963c:	e599      	b.n	8009172 <_dtoa_r+0x4ca>
 800963e:	bf00      	nop
 8009640:	40240000 	.word	0x40240000
 8009644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 80c8 	beq.w	80097dc <_dtoa_r+0xb34>
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	2d00      	cmp	r5, #0
 8009652:	dd05      	ble.n	8009660 <_dtoa_r+0x9b8>
 8009654:	4639      	mov	r1, r7
 8009656:	462a      	mov	r2, r5
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fc71 	bl	8009f40 <__lshift>
 800965e:	4607      	mov	r7, r0
 8009660:	f1b8 0f00 	cmp.w	r8, #0
 8009664:	d05b      	beq.n	800971e <_dtoa_r+0xa76>
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fa0f 	bl	8009a8c <_Balloc>
 800966e:	4605      	mov	r5, r0
 8009670:	b928      	cbnz	r0, 800967e <_dtoa_r+0x9d6>
 8009672:	4b83      	ldr	r3, [pc, #524]	; (8009880 <_dtoa_r+0xbd8>)
 8009674:	4602      	mov	r2, r0
 8009676:	f240 21ef 	movw	r1, #751	; 0x2ef
 800967a:	f7ff bb2e 	b.w	8008cda <_dtoa_r+0x32>
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	3202      	adds	r2, #2
 8009682:	0092      	lsls	r2, r2, #2
 8009684:	f107 010c 	add.w	r1, r7, #12
 8009688:	300c      	adds	r0, #12
 800968a:	f001 ff85 	bl	800b598 <memcpy>
 800968e:	2201      	movs	r2, #1
 8009690:	4629      	mov	r1, r5
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fc54 	bl	8009f40 <__lshift>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a2:	4413      	add	r3, r2
 80096a4:	9308      	str	r3, [sp, #32]
 80096a6:	9b02      	ldr	r3, [sp, #8]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	46b8      	mov	r8, r7
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	4607      	mov	r7, r0
 80096b2:	9b04      	ldr	r3, [sp, #16]
 80096b4:	4631      	mov	r1, r6
 80096b6:	3b01      	subs	r3, #1
 80096b8:	4650      	mov	r0, sl
 80096ba:	9301      	str	r3, [sp, #4]
 80096bc:	f7ff fa6a 	bl	8008b94 <quorem>
 80096c0:	4641      	mov	r1, r8
 80096c2:	9002      	str	r0, [sp, #8]
 80096c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096c8:	4650      	mov	r0, sl
 80096ca:	f000 fca5 	bl	800a018 <__mcmp>
 80096ce:	463a      	mov	r2, r7
 80096d0:	9005      	str	r0, [sp, #20]
 80096d2:	4631      	mov	r1, r6
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fcbb 	bl	800a050 <__mdiff>
 80096da:	68c2      	ldr	r2, [r0, #12]
 80096dc:	4605      	mov	r5, r0
 80096de:	bb02      	cbnz	r2, 8009722 <_dtoa_r+0xa7a>
 80096e0:	4601      	mov	r1, r0
 80096e2:	4650      	mov	r0, sl
 80096e4:	f000 fc98 	bl	800a018 <__mcmp>
 80096e8:	4602      	mov	r2, r0
 80096ea:	4629      	mov	r1, r5
 80096ec:	4620      	mov	r0, r4
 80096ee:	9209      	str	r2, [sp, #36]	; 0x24
 80096f0:	f000 fa0c 	bl	8009b0c <_Bfree>
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f8:	9d04      	ldr	r5, [sp, #16]
 80096fa:	ea43 0102 	orr.w	r1, r3, r2
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	4319      	orrs	r1, r3
 8009702:	d110      	bne.n	8009726 <_dtoa_r+0xa7e>
 8009704:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009708:	d029      	beq.n	800975e <_dtoa_r+0xab6>
 800970a:	9b05      	ldr	r3, [sp, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	dd02      	ble.n	8009716 <_dtoa_r+0xa6e>
 8009710:	9b02      	ldr	r3, [sp, #8]
 8009712:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	f883 9000 	strb.w	r9, [r3]
 800971c:	e774      	b.n	8009608 <_dtoa_r+0x960>
 800971e:	4638      	mov	r0, r7
 8009720:	e7ba      	b.n	8009698 <_dtoa_r+0x9f0>
 8009722:	2201      	movs	r2, #1
 8009724:	e7e1      	b.n	80096ea <_dtoa_r+0xa42>
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	db04      	blt.n	8009736 <_dtoa_r+0xa8e>
 800972c:	9907      	ldr	r1, [sp, #28]
 800972e:	430b      	orrs	r3, r1
 8009730:	9906      	ldr	r1, [sp, #24]
 8009732:	430b      	orrs	r3, r1
 8009734:	d120      	bne.n	8009778 <_dtoa_r+0xad0>
 8009736:	2a00      	cmp	r2, #0
 8009738:	dded      	ble.n	8009716 <_dtoa_r+0xa6e>
 800973a:	4651      	mov	r1, sl
 800973c:	2201      	movs	r2, #1
 800973e:	4620      	mov	r0, r4
 8009740:	f000 fbfe 	bl	8009f40 <__lshift>
 8009744:	4631      	mov	r1, r6
 8009746:	4682      	mov	sl, r0
 8009748:	f000 fc66 	bl	800a018 <__mcmp>
 800974c:	2800      	cmp	r0, #0
 800974e:	dc03      	bgt.n	8009758 <_dtoa_r+0xab0>
 8009750:	d1e1      	bne.n	8009716 <_dtoa_r+0xa6e>
 8009752:	f019 0f01 	tst.w	r9, #1
 8009756:	d0de      	beq.n	8009716 <_dtoa_r+0xa6e>
 8009758:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800975c:	d1d8      	bne.n	8009710 <_dtoa_r+0xa68>
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	2339      	movs	r3, #57	; 0x39
 8009762:	7013      	strb	r3, [r2, #0]
 8009764:	462b      	mov	r3, r5
 8009766:	461d      	mov	r5, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800976e:	2a39      	cmp	r2, #57	; 0x39
 8009770:	d06c      	beq.n	800984c <_dtoa_r+0xba4>
 8009772:	3201      	adds	r2, #1
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	e747      	b.n	8009608 <_dtoa_r+0x960>
 8009778:	2a00      	cmp	r2, #0
 800977a:	dd07      	ble.n	800978c <_dtoa_r+0xae4>
 800977c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009780:	d0ed      	beq.n	800975e <_dtoa_r+0xab6>
 8009782:	9a01      	ldr	r2, [sp, #4]
 8009784:	f109 0301 	add.w	r3, r9, #1
 8009788:	7013      	strb	r3, [r2, #0]
 800978a:	e73d      	b.n	8009608 <_dtoa_r+0x960>
 800978c:	9b04      	ldr	r3, [sp, #16]
 800978e:	9a08      	ldr	r2, [sp, #32]
 8009790:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009794:	4293      	cmp	r3, r2
 8009796:	d043      	beq.n	8009820 <_dtoa_r+0xb78>
 8009798:	4651      	mov	r1, sl
 800979a:	2300      	movs	r3, #0
 800979c:	220a      	movs	r2, #10
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f9d6 	bl	8009b50 <__multadd>
 80097a4:	45b8      	cmp	r8, r7
 80097a6:	4682      	mov	sl, r0
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	f04f 020a 	mov.w	r2, #10
 80097b0:	4641      	mov	r1, r8
 80097b2:	4620      	mov	r0, r4
 80097b4:	d107      	bne.n	80097c6 <_dtoa_r+0xb1e>
 80097b6:	f000 f9cb 	bl	8009b50 <__multadd>
 80097ba:	4680      	mov	r8, r0
 80097bc:	4607      	mov	r7, r0
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	e775      	b.n	80096b2 <_dtoa_r+0xa0a>
 80097c6:	f000 f9c3 	bl	8009b50 <__multadd>
 80097ca:	4639      	mov	r1, r7
 80097cc:	4680      	mov	r8, r0
 80097ce:	2300      	movs	r3, #0
 80097d0:	220a      	movs	r2, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 f9bc 	bl	8009b50 <__multadd>
 80097d8:	4607      	mov	r7, r0
 80097da:	e7f0      	b.n	80097be <_dtoa_r+0xb16>
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	9d00      	ldr	r5, [sp, #0]
 80097e2:	4631      	mov	r1, r6
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7ff f9d5 	bl	8008b94 <quorem>
 80097ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097ee:	9b00      	ldr	r3, [sp, #0]
 80097f0:	f805 9b01 	strb.w	r9, [r5], #1
 80097f4:	1aea      	subs	r2, r5, r3
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	dd07      	ble.n	800980c <_dtoa_r+0xb64>
 80097fc:	4651      	mov	r1, sl
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4620      	mov	r0, r4
 8009804:	f000 f9a4 	bl	8009b50 <__multadd>
 8009808:	4682      	mov	sl, r0
 800980a:	e7ea      	b.n	80097e2 <_dtoa_r+0xb3a>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	bfc8      	it	gt
 8009812:	461d      	movgt	r5, r3
 8009814:	9b00      	ldr	r3, [sp, #0]
 8009816:	bfd8      	it	le
 8009818:	2501      	movle	r5, #1
 800981a:	441d      	add	r5, r3
 800981c:	f04f 0800 	mov.w	r8, #0
 8009820:	4651      	mov	r1, sl
 8009822:	2201      	movs	r2, #1
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fb8b 	bl	8009f40 <__lshift>
 800982a:	4631      	mov	r1, r6
 800982c:	4682      	mov	sl, r0
 800982e:	f000 fbf3 	bl	800a018 <__mcmp>
 8009832:	2800      	cmp	r0, #0
 8009834:	dc96      	bgt.n	8009764 <_dtoa_r+0xabc>
 8009836:	d102      	bne.n	800983e <_dtoa_r+0xb96>
 8009838:	f019 0f01 	tst.w	r9, #1
 800983c:	d192      	bne.n	8009764 <_dtoa_r+0xabc>
 800983e:	462b      	mov	r3, r5
 8009840:	461d      	mov	r5, r3
 8009842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009846:	2a30      	cmp	r2, #48	; 0x30
 8009848:	d0fa      	beq.n	8009840 <_dtoa_r+0xb98>
 800984a:	e6dd      	b.n	8009608 <_dtoa_r+0x960>
 800984c:	9a00      	ldr	r2, [sp, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d189      	bne.n	8009766 <_dtoa_r+0xabe>
 8009852:	f10b 0b01 	add.w	fp, fp, #1
 8009856:	2331      	movs	r3, #49	; 0x31
 8009858:	e796      	b.n	8009788 <_dtoa_r+0xae0>
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <_dtoa_r+0xbdc>)
 800985c:	f7ff ba99 	b.w	8008d92 <_dtoa_r+0xea>
 8009860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f aa6d 	bne.w	8008d42 <_dtoa_r+0x9a>
 8009868:	4b07      	ldr	r3, [pc, #28]	; (8009888 <_dtoa_r+0xbe0>)
 800986a:	f7ff ba92 	b.w	8008d92 <_dtoa_r+0xea>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	dcb5      	bgt.n	80097e0 <_dtoa_r+0xb38>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	2b02      	cmp	r3, #2
 8009878:	f73f aeb1 	bgt.w	80095de <_dtoa_r+0x936>
 800987c:	e7b0      	b.n	80097e0 <_dtoa_r+0xb38>
 800987e:	bf00      	nop
 8009880:	0800c475 	.word	0x0800c475
 8009884:	0800c3d0 	.word	0x0800c3d0
 8009888:	0800c3f9 	.word	0x0800c3f9

0800988c <_free_r>:
 800988c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800988e:	2900      	cmp	r1, #0
 8009890:	d044      	beq.n	800991c <_free_r+0x90>
 8009892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009896:	9001      	str	r0, [sp, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f1a1 0404 	sub.w	r4, r1, #4
 800989e:	bfb8      	it	lt
 80098a0:	18e4      	addlt	r4, r4, r3
 80098a2:	f000 f8e7 	bl	8009a74 <__malloc_lock>
 80098a6:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <_free_r+0x94>)
 80098a8:	9801      	ldr	r0, [sp, #4]
 80098aa:	6813      	ldr	r3, [r2, #0]
 80098ac:	b933      	cbnz	r3, 80098bc <_free_r+0x30>
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	6014      	str	r4, [r2, #0]
 80098b2:	b003      	add	sp, #12
 80098b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b8:	f000 b8e2 	b.w	8009a80 <__malloc_unlock>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d908      	bls.n	80098d2 <_free_r+0x46>
 80098c0:	6825      	ldr	r5, [r4, #0]
 80098c2:	1961      	adds	r1, r4, r5
 80098c4:	428b      	cmp	r3, r1
 80098c6:	bf01      	itttt	eq
 80098c8:	6819      	ldreq	r1, [r3, #0]
 80098ca:	685b      	ldreq	r3, [r3, #4]
 80098cc:	1949      	addeq	r1, r1, r5
 80098ce:	6021      	streq	r1, [r4, #0]
 80098d0:	e7ed      	b.n	80098ae <_free_r+0x22>
 80098d2:	461a      	mov	r2, r3
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	b10b      	cbz	r3, 80098dc <_free_r+0x50>
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d9fa      	bls.n	80098d2 <_free_r+0x46>
 80098dc:	6811      	ldr	r1, [r2, #0]
 80098de:	1855      	adds	r5, r2, r1
 80098e0:	42a5      	cmp	r5, r4
 80098e2:	d10b      	bne.n	80098fc <_free_r+0x70>
 80098e4:	6824      	ldr	r4, [r4, #0]
 80098e6:	4421      	add	r1, r4
 80098e8:	1854      	adds	r4, r2, r1
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	d1e0      	bne.n	80098b2 <_free_r+0x26>
 80098f0:	681c      	ldr	r4, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	6053      	str	r3, [r2, #4]
 80098f6:	440c      	add	r4, r1
 80098f8:	6014      	str	r4, [r2, #0]
 80098fa:	e7da      	b.n	80098b2 <_free_r+0x26>
 80098fc:	d902      	bls.n	8009904 <_free_r+0x78>
 80098fe:	230c      	movs	r3, #12
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	e7d6      	b.n	80098b2 <_free_r+0x26>
 8009904:	6825      	ldr	r5, [r4, #0]
 8009906:	1961      	adds	r1, r4, r5
 8009908:	428b      	cmp	r3, r1
 800990a:	bf04      	itt	eq
 800990c:	6819      	ldreq	r1, [r3, #0]
 800990e:	685b      	ldreq	r3, [r3, #4]
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	bf04      	itt	eq
 8009914:	1949      	addeq	r1, r1, r5
 8009916:	6021      	streq	r1, [r4, #0]
 8009918:	6054      	str	r4, [r2, #4]
 800991a:	e7ca      	b.n	80098b2 <_free_r+0x26>
 800991c:	b003      	add	sp, #12
 800991e:	bd30      	pop	{r4, r5, pc}
 8009920:	20000554 	.word	0x20000554

08009924 <malloc>:
 8009924:	4b02      	ldr	r3, [pc, #8]	; (8009930 <malloc+0xc>)
 8009926:	4601      	mov	r1, r0
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	f000 b823 	b.w	8009974 <_malloc_r>
 800992e:	bf00      	nop
 8009930:	20000064 	.word	0x20000064

08009934 <sbrk_aligned>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	4e0e      	ldr	r6, [pc, #56]	; (8009970 <sbrk_aligned+0x3c>)
 8009938:	460c      	mov	r4, r1
 800993a:	6831      	ldr	r1, [r6, #0]
 800993c:	4605      	mov	r5, r0
 800993e:	b911      	cbnz	r1, 8009946 <sbrk_aligned+0x12>
 8009940:	f001 fe1a 	bl	800b578 <_sbrk_r>
 8009944:	6030      	str	r0, [r6, #0]
 8009946:	4621      	mov	r1, r4
 8009948:	4628      	mov	r0, r5
 800994a:	f001 fe15 	bl	800b578 <_sbrk_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d00a      	beq.n	8009968 <sbrk_aligned+0x34>
 8009952:	1cc4      	adds	r4, r0, #3
 8009954:	f024 0403 	bic.w	r4, r4, #3
 8009958:	42a0      	cmp	r0, r4
 800995a:	d007      	beq.n	800996c <sbrk_aligned+0x38>
 800995c:	1a21      	subs	r1, r4, r0
 800995e:	4628      	mov	r0, r5
 8009960:	f001 fe0a 	bl	800b578 <_sbrk_r>
 8009964:	3001      	adds	r0, #1
 8009966:	d101      	bne.n	800996c <sbrk_aligned+0x38>
 8009968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800996c:	4620      	mov	r0, r4
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	20000558 	.word	0x20000558

08009974 <_malloc_r>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	1ccd      	adds	r5, r1, #3
 800997a:	f025 0503 	bic.w	r5, r5, #3
 800997e:	3508      	adds	r5, #8
 8009980:	2d0c      	cmp	r5, #12
 8009982:	bf38      	it	cc
 8009984:	250c      	movcc	r5, #12
 8009986:	2d00      	cmp	r5, #0
 8009988:	4607      	mov	r7, r0
 800998a:	db01      	blt.n	8009990 <_malloc_r+0x1c>
 800998c:	42a9      	cmp	r1, r5
 800998e:	d905      	bls.n	800999c <_malloc_r+0x28>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	2600      	movs	r6, #0
 8009996:	4630      	mov	r0, r6
 8009998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a70 <_malloc_r+0xfc>
 80099a0:	f000 f868 	bl	8009a74 <__malloc_lock>
 80099a4:	f8d8 3000 	ldr.w	r3, [r8]
 80099a8:	461c      	mov	r4, r3
 80099aa:	bb5c      	cbnz	r4, 8009a04 <_malloc_r+0x90>
 80099ac:	4629      	mov	r1, r5
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ffc0 	bl	8009934 <sbrk_aligned>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	4604      	mov	r4, r0
 80099b8:	d155      	bne.n	8009a66 <_malloc_r+0xf2>
 80099ba:	f8d8 4000 	ldr.w	r4, [r8]
 80099be:	4626      	mov	r6, r4
 80099c0:	2e00      	cmp	r6, #0
 80099c2:	d145      	bne.n	8009a50 <_malloc_r+0xdc>
 80099c4:	2c00      	cmp	r4, #0
 80099c6:	d048      	beq.n	8009a5a <_malloc_r+0xe6>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	4631      	mov	r1, r6
 80099cc:	4638      	mov	r0, r7
 80099ce:	eb04 0903 	add.w	r9, r4, r3
 80099d2:	f001 fdd1 	bl	800b578 <_sbrk_r>
 80099d6:	4581      	cmp	r9, r0
 80099d8:	d13f      	bne.n	8009a5a <_malloc_r+0xe6>
 80099da:	6821      	ldr	r1, [r4, #0]
 80099dc:	1a6d      	subs	r5, r5, r1
 80099de:	4629      	mov	r1, r5
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7ff ffa7 	bl	8009934 <sbrk_aligned>
 80099e6:	3001      	adds	r0, #1
 80099e8:	d037      	beq.n	8009a5a <_malloc_r+0xe6>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	442b      	add	r3, r5
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	f8d8 3000 	ldr.w	r3, [r8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d038      	beq.n	8009a6a <_malloc_r+0xf6>
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	42a2      	cmp	r2, r4
 80099fc:	d12b      	bne.n	8009a56 <_malloc_r+0xe2>
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	e00f      	b.n	8009a24 <_malloc_r+0xb0>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	1b52      	subs	r2, r2, r5
 8009a08:	d41f      	bmi.n	8009a4a <_malloc_r+0xd6>
 8009a0a:	2a0b      	cmp	r2, #11
 8009a0c:	d917      	bls.n	8009a3e <_malloc_r+0xca>
 8009a0e:	1961      	adds	r1, r4, r5
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	6025      	str	r5, [r4, #0]
 8009a14:	bf18      	it	ne
 8009a16:	6059      	strne	r1, [r3, #4]
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	bf08      	it	eq
 8009a1c:	f8c8 1000 	streq.w	r1, [r8]
 8009a20:	5162      	str	r2, [r4, r5]
 8009a22:	604b      	str	r3, [r1, #4]
 8009a24:	4638      	mov	r0, r7
 8009a26:	f104 060b 	add.w	r6, r4, #11
 8009a2a:	f000 f829 	bl	8009a80 <__malloc_unlock>
 8009a2e:	f026 0607 	bic.w	r6, r6, #7
 8009a32:	1d23      	adds	r3, r4, #4
 8009a34:	1af2      	subs	r2, r6, r3
 8009a36:	d0ae      	beq.n	8009996 <_malloc_r+0x22>
 8009a38:	1b9b      	subs	r3, r3, r6
 8009a3a:	50a3      	str	r3, [r4, r2]
 8009a3c:	e7ab      	b.n	8009996 <_malloc_r+0x22>
 8009a3e:	42a3      	cmp	r3, r4
 8009a40:	6862      	ldr	r2, [r4, #4]
 8009a42:	d1dd      	bne.n	8009a00 <_malloc_r+0x8c>
 8009a44:	f8c8 2000 	str.w	r2, [r8]
 8009a48:	e7ec      	b.n	8009a24 <_malloc_r+0xb0>
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	6864      	ldr	r4, [r4, #4]
 8009a4e:	e7ac      	b.n	80099aa <_malloc_r+0x36>
 8009a50:	4634      	mov	r4, r6
 8009a52:	6876      	ldr	r6, [r6, #4]
 8009a54:	e7b4      	b.n	80099c0 <_malloc_r+0x4c>
 8009a56:	4613      	mov	r3, r2
 8009a58:	e7cc      	b.n	80099f4 <_malloc_r+0x80>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	603b      	str	r3, [r7, #0]
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f000 f80e 	bl	8009a80 <__malloc_unlock>
 8009a64:	e797      	b.n	8009996 <_malloc_r+0x22>
 8009a66:	6025      	str	r5, [r4, #0]
 8009a68:	e7dc      	b.n	8009a24 <_malloc_r+0xb0>
 8009a6a:	605b      	str	r3, [r3, #4]
 8009a6c:	deff      	udf	#255	; 0xff
 8009a6e:	bf00      	nop
 8009a70:	20000554 	.word	0x20000554

08009a74 <__malloc_lock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__malloc_lock+0x8>)
 8009a76:	f7ff b884 	b.w	8008b82 <__retarget_lock_acquire_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	20000550 	.word	0x20000550

08009a80 <__malloc_unlock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__malloc_unlock+0x8>)
 8009a82:	f7ff b87f 	b.w	8008b84 <__retarget_lock_release_recursive>
 8009a86:	bf00      	nop
 8009a88:	20000550 	.word	0x20000550

08009a8c <_Balloc>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	69c6      	ldr	r6, [r0, #28]
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	b976      	cbnz	r6, 8009ab4 <_Balloc+0x28>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f7ff ff44 	bl	8009924 <malloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	61e0      	str	r0, [r4, #28]
 8009aa0:	b920      	cbnz	r0, 8009aac <_Balloc+0x20>
 8009aa2:	4b18      	ldr	r3, [pc, #96]	; (8009b04 <_Balloc+0x78>)
 8009aa4:	4818      	ldr	r0, [pc, #96]	; (8009b08 <_Balloc+0x7c>)
 8009aa6:	216b      	movs	r1, #107	; 0x6b
 8009aa8:	f001 fd8e 	bl	800b5c8 <__assert_func>
 8009aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab0:	6006      	str	r6, [r0, #0]
 8009ab2:	60c6      	str	r6, [r0, #12]
 8009ab4:	69e6      	ldr	r6, [r4, #28]
 8009ab6:	68f3      	ldr	r3, [r6, #12]
 8009ab8:	b183      	cbz	r3, 8009adc <_Balloc+0x50>
 8009aba:	69e3      	ldr	r3, [r4, #28]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ac2:	b9b8      	cbnz	r0, 8009af4 <_Balloc+0x68>
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8009aca:	1d72      	adds	r2, r6, #5
 8009acc:	0092      	lsls	r2, r2, #2
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f001 fd98 	bl	800b604 <_calloc_r>
 8009ad4:	b160      	cbz	r0, 8009af0 <_Balloc+0x64>
 8009ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ada:	e00e      	b.n	8009afa <_Balloc+0x6e>
 8009adc:	2221      	movs	r2, #33	; 0x21
 8009ade:	2104      	movs	r1, #4
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f001 fd8f 	bl	800b604 <_calloc_r>
 8009ae6:	69e3      	ldr	r3, [r4, #28]
 8009ae8:	60f0      	str	r0, [r6, #12]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e4      	bne.n	8009aba <_Balloc+0x2e>
 8009af0:	2000      	movs	r0, #0
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	6802      	ldr	r2, [r0, #0]
 8009af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009afa:	2300      	movs	r3, #0
 8009afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b00:	e7f7      	b.n	8009af2 <_Balloc+0x66>
 8009b02:	bf00      	nop
 8009b04:	0800c406 	.word	0x0800c406
 8009b08:	0800c486 	.word	0x0800c486

08009b0c <_Bfree>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	69c6      	ldr	r6, [r0, #28]
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	b976      	cbnz	r6, 8009b34 <_Bfree+0x28>
 8009b16:	2010      	movs	r0, #16
 8009b18:	f7ff ff04 	bl	8009924 <malloc>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	61e8      	str	r0, [r5, #28]
 8009b20:	b920      	cbnz	r0, 8009b2c <_Bfree+0x20>
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <_Bfree+0x3c>)
 8009b24:	4809      	ldr	r0, [pc, #36]	; (8009b4c <_Bfree+0x40>)
 8009b26:	218f      	movs	r1, #143	; 0x8f
 8009b28:	f001 fd4e 	bl	800b5c8 <__assert_func>
 8009b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b30:	6006      	str	r6, [r0, #0]
 8009b32:	60c6      	str	r6, [r0, #12]
 8009b34:	b13c      	cbz	r4, 8009b46 <_Bfree+0x3a>
 8009b36:	69eb      	ldr	r3, [r5, #28]
 8009b38:	6862      	ldr	r2, [r4, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b40:	6021      	str	r1, [r4, #0]
 8009b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	0800c406 	.word	0x0800c406
 8009b4c:	0800c486 	.word	0x0800c486

08009b50 <__multadd>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	690d      	ldr	r5, [r1, #16]
 8009b56:	4607      	mov	r7, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	461e      	mov	r6, r3
 8009b5c:	f101 0c14 	add.w	ip, r1, #20
 8009b60:	2000      	movs	r0, #0
 8009b62:	f8dc 3000 	ldr.w	r3, [ip]
 8009b66:	b299      	uxth	r1, r3
 8009b68:	fb02 6101 	mla	r1, r2, r1, r6
 8009b6c:	0c1e      	lsrs	r6, r3, #16
 8009b6e:	0c0b      	lsrs	r3, r1, #16
 8009b70:	fb02 3306 	mla	r3, r2, r6, r3
 8009b74:	b289      	uxth	r1, r1
 8009b76:	3001      	adds	r0, #1
 8009b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b7c:	4285      	cmp	r5, r0
 8009b7e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b86:	dcec      	bgt.n	8009b62 <__multadd+0x12>
 8009b88:	b30e      	cbz	r6, 8009bce <__multadd+0x7e>
 8009b8a:	68a3      	ldr	r3, [r4, #8]
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	dc19      	bgt.n	8009bc4 <__multadd+0x74>
 8009b90:	6861      	ldr	r1, [r4, #4]
 8009b92:	4638      	mov	r0, r7
 8009b94:	3101      	adds	r1, #1
 8009b96:	f7ff ff79 	bl	8009a8c <_Balloc>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <__multadd+0x5a>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <__multadd+0x84>)
 8009ba2:	480d      	ldr	r0, [pc, #52]	; (8009bd8 <__multadd+0x88>)
 8009ba4:	21ba      	movs	r1, #186	; 0xba
 8009ba6:	f001 fd0f 	bl	800b5c8 <__assert_func>
 8009baa:	6922      	ldr	r2, [r4, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	f104 010c 	add.w	r1, r4, #12
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f001 fcef 	bl	800b598 <memcpy>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff ffa5 	bl	8009b0c <_Bfree>
 8009bc2:	4644      	mov	r4, r8
 8009bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bc8:	3501      	adds	r5, #1
 8009bca:	615e      	str	r6, [r3, #20]
 8009bcc:	6125      	str	r5, [r4, #16]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	0800c475 	.word	0x0800c475
 8009bd8:	0800c486 	.word	0x0800c486

08009bdc <__s2b>:
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	4615      	mov	r5, r2
 8009be4:	461f      	mov	r7, r3
 8009be6:	2209      	movs	r2, #9
 8009be8:	3308      	adds	r3, #8
 8009bea:	4606      	mov	r6, r0
 8009bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	db09      	blt.n	8009c0c <__s2b+0x30>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ff47 	bl	8009a8c <_Balloc>
 8009bfe:	b940      	cbnz	r0, 8009c12 <__s2b+0x36>
 8009c00:	4602      	mov	r2, r0
 8009c02:	4b19      	ldr	r3, [pc, #100]	; (8009c68 <__s2b+0x8c>)
 8009c04:	4819      	ldr	r0, [pc, #100]	; (8009c6c <__s2b+0x90>)
 8009c06:	21d3      	movs	r1, #211	; 0xd3
 8009c08:	f001 fcde 	bl	800b5c8 <__assert_func>
 8009c0c:	0052      	lsls	r2, r2, #1
 8009c0e:	3101      	adds	r1, #1
 8009c10:	e7f0      	b.n	8009bf4 <__s2b+0x18>
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	6143      	str	r3, [r0, #20]
 8009c16:	2d09      	cmp	r5, #9
 8009c18:	f04f 0301 	mov.w	r3, #1
 8009c1c:	6103      	str	r3, [r0, #16]
 8009c1e:	dd16      	ble.n	8009c4e <__s2b+0x72>
 8009c20:	f104 0909 	add.w	r9, r4, #9
 8009c24:	46c8      	mov	r8, r9
 8009c26:	442c      	add	r4, r5
 8009c28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	3b30      	subs	r3, #48	; 0x30
 8009c30:	220a      	movs	r2, #10
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ff8c 	bl	8009b50 <__multadd>
 8009c38:	45a0      	cmp	r8, r4
 8009c3a:	d1f5      	bne.n	8009c28 <__s2b+0x4c>
 8009c3c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c40:	444c      	add	r4, r9
 8009c42:	1b2d      	subs	r5, r5, r4
 8009c44:	1963      	adds	r3, r4, r5
 8009c46:	42bb      	cmp	r3, r7
 8009c48:	db04      	blt.n	8009c54 <__s2b+0x78>
 8009c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4e:	340a      	adds	r4, #10
 8009c50:	2509      	movs	r5, #9
 8009c52:	e7f6      	b.n	8009c42 <__s2b+0x66>
 8009c54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c58:	4601      	mov	r1, r0
 8009c5a:	3b30      	subs	r3, #48	; 0x30
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7ff ff76 	bl	8009b50 <__multadd>
 8009c64:	e7ee      	b.n	8009c44 <__s2b+0x68>
 8009c66:	bf00      	nop
 8009c68:	0800c475 	.word	0x0800c475
 8009c6c:	0800c486 	.word	0x0800c486

08009c70 <__hi0bits>:
 8009c70:	0c03      	lsrs	r3, r0, #16
 8009c72:	041b      	lsls	r3, r3, #16
 8009c74:	b9d3      	cbnz	r3, 8009cac <__hi0bits+0x3c>
 8009c76:	0400      	lsls	r0, r0, #16
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c7e:	bf04      	itt	eq
 8009c80:	0200      	lsleq	r0, r0, #8
 8009c82:	3308      	addeq	r3, #8
 8009c84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c88:	bf04      	itt	eq
 8009c8a:	0100      	lsleq	r0, r0, #4
 8009c8c:	3304      	addeq	r3, #4
 8009c8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c92:	bf04      	itt	eq
 8009c94:	0080      	lsleq	r0, r0, #2
 8009c96:	3302      	addeq	r3, #2
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	db05      	blt.n	8009ca8 <__hi0bits+0x38>
 8009c9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ca0:	f103 0301 	add.w	r3, r3, #1
 8009ca4:	bf08      	it	eq
 8009ca6:	2320      	moveq	r3, #32
 8009ca8:	4618      	mov	r0, r3
 8009caa:	4770      	bx	lr
 8009cac:	2300      	movs	r3, #0
 8009cae:	e7e4      	b.n	8009c7a <__hi0bits+0xa>

08009cb0 <__lo0bits>:
 8009cb0:	6803      	ldr	r3, [r0, #0]
 8009cb2:	f013 0207 	ands.w	r2, r3, #7
 8009cb6:	d00c      	beq.n	8009cd2 <__lo0bits+0x22>
 8009cb8:	07d9      	lsls	r1, r3, #31
 8009cba:	d422      	bmi.n	8009d02 <__lo0bits+0x52>
 8009cbc:	079a      	lsls	r2, r3, #30
 8009cbe:	bf49      	itett	mi
 8009cc0:	085b      	lsrmi	r3, r3, #1
 8009cc2:	089b      	lsrpl	r3, r3, #2
 8009cc4:	6003      	strmi	r3, [r0, #0]
 8009cc6:	2201      	movmi	r2, #1
 8009cc8:	bf5c      	itt	pl
 8009cca:	6003      	strpl	r3, [r0, #0]
 8009ccc:	2202      	movpl	r2, #2
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4770      	bx	lr
 8009cd2:	b299      	uxth	r1, r3
 8009cd4:	b909      	cbnz	r1, 8009cda <__lo0bits+0x2a>
 8009cd6:	0c1b      	lsrs	r3, r3, #16
 8009cd8:	2210      	movs	r2, #16
 8009cda:	b2d9      	uxtb	r1, r3
 8009cdc:	b909      	cbnz	r1, 8009ce2 <__lo0bits+0x32>
 8009cde:	3208      	adds	r2, #8
 8009ce0:	0a1b      	lsrs	r3, r3, #8
 8009ce2:	0719      	lsls	r1, r3, #28
 8009ce4:	bf04      	itt	eq
 8009ce6:	091b      	lsreq	r3, r3, #4
 8009ce8:	3204      	addeq	r2, #4
 8009cea:	0799      	lsls	r1, r3, #30
 8009cec:	bf04      	itt	eq
 8009cee:	089b      	lsreq	r3, r3, #2
 8009cf0:	3202      	addeq	r2, #2
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	d403      	bmi.n	8009cfe <__lo0bits+0x4e>
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	f102 0201 	add.w	r2, r2, #1
 8009cfc:	d003      	beq.n	8009d06 <__lo0bits+0x56>
 8009cfe:	6003      	str	r3, [r0, #0]
 8009d00:	e7e5      	b.n	8009cce <__lo0bits+0x1e>
 8009d02:	2200      	movs	r2, #0
 8009d04:	e7e3      	b.n	8009cce <__lo0bits+0x1e>
 8009d06:	2220      	movs	r2, #32
 8009d08:	e7e1      	b.n	8009cce <__lo0bits+0x1e>
	...

08009d0c <__i2b>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	460c      	mov	r4, r1
 8009d10:	2101      	movs	r1, #1
 8009d12:	f7ff febb 	bl	8009a8c <_Balloc>
 8009d16:	4602      	mov	r2, r0
 8009d18:	b928      	cbnz	r0, 8009d26 <__i2b+0x1a>
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <__i2b+0x24>)
 8009d1c:	4805      	ldr	r0, [pc, #20]	; (8009d34 <__i2b+0x28>)
 8009d1e:	f240 1145 	movw	r1, #325	; 0x145
 8009d22:	f001 fc51 	bl	800b5c8 <__assert_func>
 8009d26:	2301      	movs	r3, #1
 8009d28:	6144      	str	r4, [r0, #20]
 8009d2a:	6103      	str	r3, [r0, #16]
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	0800c475 	.word	0x0800c475
 8009d34:	0800c486 	.word	0x0800c486

08009d38 <__multiply>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4691      	mov	r9, r2
 8009d3e:	690a      	ldr	r2, [r1, #16]
 8009d40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	bfb8      	it	lt
 8009d48:	460b      	movlt	r3, r1
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	bfbc      	itt	lt
 8009d4e:	464c      	movlt	r4, r9
 8009d50:	4699      	movlt	r9, r3
 8009d52:	6927      	ldr	r7, [r4, #16]
 8009d54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d58:	68a3      	ldr	r3, [r4, #8]
 8009d5a:	6861      	ldr	r1, [r4, #4]
 8009d5c:	eb07 060a 	add.w	r6, r7, sl
 8009d60:	42b3      	cmp	r3, r6
 8009d62:	b085      	sub	sp, #20
 8009d64:	bfb8      	it	lt
 8009d66:	3101      	addlt	r1, #1
 8009d68:	f7ff fe90 	bl	8009a8c <_Balloc>
 8009d6c:	b930      	cbnz	r0, 8009d7c <__multiply+0x44>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	4b44      	ldr	r3, [pc, #272]	; (8009e84 <__multiply+0x14c>)
 8009d72:	4845      	ldr	r0, [pc, #276]	; (8009e88 <__multiply+0x150>)
 8009d74:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d78:	f001 fc26 	bl	800b5c8 <__assert_func>
 8009d7c:	f100 0514 	add.w	r5, r0, #20
 8009d80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d84:	462b      	mov	r3, r5
 8009d86:	2200      	movs	r2, #0
 8009d88:	4543      	cmp	r3, r8
 8009d8a:	d321      	bcc.n	8009dd0 <__multiply+0x98>
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d94:	f109 0314 	add.w	r3, r9, #20
 8009d98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d9c:	9202      	str	r2, [sp, #8]
 8009d9e:	1b3a      	subs	r2, r7, r4
 8009da0:	3a15      	subs	r2, #21
 8009da2:	f022 0203 	bic.w	r2, r2, #3
 8009da6:	3204      	adds	r2, #4
 8009da8:	f104 0115 	add.w	r1, r4, #21
 8009dac:	428f      	cmp	r7, r1
 8009dae:	bf38      	it	cc
 8009db0:	2204      	movcc	r2, #4
 8009db2:	9201      	str	r2, [sp, #4]
 8009db4:	9a02      	ldr	r2, [sp, #8]
 8009db6:	9303      	str	r3, [sp, #12]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d80c      	bhi.n	8009dd6 <__multiply+0x9e>
 8009dbc:	2e00      	cmp	r6, #0
 8009dbe:	dd03      	ble.n	8009dc8 <__multiply+0x90>
 8009dc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05b      	beq.n	8009e80 <__multiply+0x148>
 8009dc8:	6106      	str	r6, [r0, #16]
 8009dca:	b005      	add	sp, #20
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	f843 2b04 	str.w	r2, [r3], #4
 8009dd4:	e7d8      	b.n	8009d88 <__multiply+0x50>
 8009dd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dda:	f1ba 0f00 	cmp.w	sl, #0
 8009dde:	d024      	beq.n	8009e2a <__multiply+0xf2>
 8009de0:	f104 0e14 	add.w	lr, r4, #20
 8009de4:	46a9      	mov	r9, r5
 8009de6:	f04f 0c00 	mov.w	ip, #0
 8009dea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dee:	f8d9 1000 	ldr.w	r1, [r9]
 8009df2:	fa1f fb82 	uxth.w	fp, r2
 8009df6:	b289      	uxth	r1, r1
 8009df8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e00:	f8d9 2000 	ldr.w	r2, [r9]
 8009e04:	4461      	add	r1, ip
 8009e06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e12:	b289      	uxth	r1, r1
 8009e14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e18:	4577      	cmp	r7, lr
 8009e1a:	f849 1b04 	str.w	r1, [r9], #4
 8009e1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e22:	d8e2      	bhi.n	8009dea <__multiply+0xb2>
 8009e24:	9a01      	ldr	r2, [sp, #4]
 8009e26:	f845 c002 	str.w	ip, [r5, r2]
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e30:	3304      	adds	r3, #4
 8009e32:	f1b9 0f00 	cmp.w	r9, #0
 8009e36:	d021      	beq.n	8009e7c <__multiply+0x144>
 8009e38:	6829      	ldr	r1, [r5, #0]
 8009e3a:	f104 0c14 	add.w	ip, r4, #20
 8009e3e:	46ae      	mov	lr, r5
 8009e40:	f04f 0a00 	mov.w	sl, #0
 8009e44:	f8bc b000 	ldrh.w	fp, [ip]
 8009e48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009e50:	4452      	add	r2, sl
 8009e52:	b289      	uxth	r1, r1
 8009e54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e58:	f84e 1b04 	str.w	r1, [lr], #4
 8009e5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e64:	f8be 1000 	ldrh.w	r1, [lr]
 8009e68:	fb09 110a 	mla	r1, r9, sl, r1
 8009e6c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e70:	4567      	cmp	r7, ip
 8009e72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e76:	d8e5      	bhi.n	8009e44 <__multiply+0x10c>
 8009e78:	9a01      	ldr	r2, [sp, #4]
 8009e7a:	50a9      	str	r1, [r5, r2]
 8009e7c:	3504      	adds	r5, #4
 8009e7e:	e799      	b.n	8009db4 <__multiply+0x7c>
 8009e80:	3e01      	subs	r6, #1
 8009e82:	e79b      	b.n	8009dbc <__multiply+0x84>
 8009e84:	0800c475 	.word	0x0800c475
 8009e88:	0800c486 	.word	0x0800c486

08009e8c <__pow5mult>:
 8009e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	4615      	mov	r5, r2
 8009e92:	f012 0203 	ands.w	r2, r2, #3
 8009e96:	4606      	mov	r6, r0
 8009e98:	460f      	mov	r7, r1
 8009e9a:	d007      	beq.n	8009eac <__pow5mult+0x20>
 8009e9c:	4c25      	ldr	r4, [pc, #148]	; (8009f34 <__pow5mult+0xa8>)
 8009e9e:	3a01      	subs	r2, #1
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ea6:	f7ff fe53 	bl	8009b50 <__multadd>
 8009eaa:	4607      	mov	r7, r0
 8009eac:	10ad      	asrs	r5, r5, #2
 8009eae:	d03d      	beq.n	8009f2c <__pow5mult+0xa0>
 8009eb0:	69f4      	ldr	r4, [r6, #28]
 8009eb2:	b97c      	cbnz	r4, 8009ed4 <__pow5mult+0x48>
 8009eb4:	2010      	movs	r0, #16
 8009eb6:	f7ff fd35 	bl	8009924 <malloc>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	61f0      	str	r0, [r6, #28]
 8009ebe:	b928      	cbnz	r0, 8009ecc <__pow5mult+0x40>
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <__pow5mult+0xac>)
 8009ec2:	481e      	ldr	r0, [pc, #120]	; (8009f3c <__pow5mult+0xb0>)
 8009ec4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ec8:	f001 fb7e 	bl	800b5c8 <__assert_func>
 8009ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ed0:	6004      	str	r4, [r0, #0]
 8009ed2:	60c4      	str	r4, [r0, #12]
 8009ed4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009edc:	b94c      	cbnz	r4, 8009ef2 <__pow5mult+0x66>
 8009ede:	f240 2171 	movw	r1, #625	; 0x271
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ff12 	bl	8009d0c <__i2b>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eee:	4604      	mov	r4, r0
 8009ef0:	6003      	str	r3, [r0, #0]
 8009ef2:	f04f 0900 	mov.w	r9, #0
 8009ef6:	07eb      	lsls	r3, r5, #31
 8009ef8:	d50a      	bpl.n	8009f10 <__pow5mult+0x84>
 8009efa:	4639      	mov	r1, r7
 8009efc:	4622      	mov	r2, r4
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7ff ff1a 	bl	8009d38 <__multiply>
 8009f04:	4639      	mov	r1, r7
 8009f06:	4680      	mov	r8, r0
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7ff fdff 	bl	8009b0c <_Bfree>
 8009f0e:	4647      	mov	r7, r8
 8009f10:	106d      	asrs	r5, r5, #1
 8009f12:	d00b      	beq.n	8009f2c <__pow5mult+0xa0>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	b938      	cbnz	r0, 8009f28 <__pow5mult+0x9c>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ff0b 	bl	8009d38 <__multiply>
 8009f22:	6020      	str	r0, [r4, #0]
 8009f24:	f8c0 9000 	str.w	r9, [r0]
 8009f28:	4604      	mov	r4, r0
 8009f2a:	e7e4      	b.n	8009ef6 <__pow5mult+0x6a>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f32:	bf00      	nop
 8009f34:	0800c5d0 	.word	0x0800c5d0
 8009f38:	0800c406 	.word	0x0800c406
 8009f3c:	0800c486 	.word	0x0800c486

08009f40 <__lshift>:
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	460c      	mov	r4, r1
 8009f46:	6849      	ldr	r1, [r1, #4]
 8009f48:	6923      	ldr	r3, [r4, #16]
 8009f4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	4607      	mov	r7, r0
 8009f52:	4691      	mov	r9, r2
 8009f54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f58:	f108 0601 	add.w	r6, r8, #1
 8009f5c:	42b3      	cmp	r3, r6
 8009f5e:	db0b      	blt.n	8009f78 <__lshift+0x38>
 8009f60:	4638      	mov	r0, r7
 8009f62:	f7ff fd93 	bl	8009a8c <_Balloc>
 8009f66:	4605      	mov	r5, r0
 8009f68:	b948      	cbnz	r0, 8009f7e <__lshift+0x3e>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	4b28      	ldr	r3, [pc, #160]	; (800a010 <__lshift+0xd0>)
 8009f6e:	4829      	ldr	r0, [pc, #164]	; (800a014 <__lshift+0xd4>)
 8009f70:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f74:	f001 fb28 	bl	800b5c8 <__assert_func>
 8009f78:	3101      	adds	r1, #1
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	e7ee      	b.n	8009f5c <__lshift+0x1c>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f100 0114 	add.w	r1, r0, #20
 8009f84:	f100 0210 	add.w	r2, r0, #16
 8009f88:	4618      	mov	r0, r3
 8009f8a:	4553      	cmp	r3, sl
 8009f8c:	db33      	blt.n	8009ff6 <__lshift+0xb6>
 8009f8e:	6920      	ldr	r0, [r4, #16]
 8009f90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f94:	f104 0314 	add.w	r3, r4, #20
 8009f98:	f019 091f 	ands.w	r9, r9, #31
 8009f9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fa4:	d02b      	beq.n	8009ffe <__lshift+0xbe>
 8009fa6:	f1c9 0e20 	rsb	lr, r9, #32
 8009faa:	468a      	mov	sl, r1
 8009fac:	2200      	movs	r2, #0
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	fa00 f009 	lsl.w	r0, r0, r9
 8009fb4:	4310      	orrs	r0, r2
 8009fb6:	f84a 0b04 	str.w	r0, [sl], #4
 8009fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fbe:	459c      	cmp	ip, r3
 8009fc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fc4:	d8f3      	bhi.n	8009fae <__lshift+0x6e>
 8009fc6:	ebac 0304 	sub.w	r3, ip, r4
 8009fca:	3b15      	subs	r3, #21
 8009fcc:	f023 0303 	bic.w	r3, r3, #3
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	f104 0015 	add.w	r0, r4, #21
 8009fd6:	4584      	cmp	ip, r0
 8009fd8:	bf38      	it	cc
 8009fda:	2304      	movcc	r3, #4
 8009fdc:	50ca      	str	r2, [r1, r3]
 8009fde:	b10a      	cbz	r2, 8009fe4 <__lshift+0xa4>
 8009fe0:	f108 0602 	add.w	r6, r8, #2
 8009fe4:	3e01      	subs	r6, #1
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	612e      	str	r6, [r5, #16]
 8009fea:	4621      	mov	r1, r4
 8009fec:	f7ff fd8e 	bl	8009b0c <_Bfree>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	e7c5      	b.n	8009f8a <__lshift+0x4a>
 8009ffe:	3904      	subs	r1, #4
 800a000:	f853 2b04 	ldr.w	r2, [r3], #4
 800a004:	f841 2f04 	str.w	r2, [r1, #4]!
 800a008:	459c      	cmp	ip, r3
 800a00a:	d8f9      	bhi.n	800a000 <__lshift+0xc0>
 800a00c:	e7ea      	b.n	8009fe4 <__lshift+0xa4>
 800a00e:	bf00      	nop
 800a010:	0800c475 	.word	0x0800c475
 800a014:	0800c486 	.word	0x0800c486

0800a018 <__mcmp>:
 800a018:	b530      	push	{r4, r5, lr}
 800a01a:	6902      	ldr	r2, [r0, #16]
 800a01c:	690c      	ldr	r4, [r1, #16]
 800a01e:	1b12      	subs	r2, r2, r4
 800a020:	d10e      	bne.n	800a040 <__mcmp+0x28>
 800a022:	f100 0314 	add.w	r3, r0, #20
 800a026:	3114      	adds	r1, #20
 800a028:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a02c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a030:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a034:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a038:	42a5      	cmp	r5, r4
 800a03a:	d003      	beq.n	800a044 <__mcmp+0x2c>
 800a03c:	d305      	bcc.n	800a04a <__mcmp+0x32>
 800a03e:	2201      	movs	r2, #1
 800a040:	4610      	mov	r0, r2
 800a042:	bd30      	pop	{r4, r5, pc}
 800a044:	4283      	cmp	r3, r0
 800a046:	d3f3      	bcc.n	800a030 <__mcmp+0x18>
 800a048:	e7fa      	b.n	800a040 <__mcmp+0x28>
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a04e:	e7f7      	b.n	800a040 <__mcmp+0x28>

0800a050 <__mdiff>:
 800a050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	460c      	mov	r4, r1
 800a056:	4606      	mov	r6, r0
 800a058:	4611      	mov	r1, r2
 800a05a:	4620      	mov	r0, r4
 800a05c:	4690      	mov	r8, r2
 800a05e:	f7ff ffdb 	bl	800a018 <__mcmp>
 800a062:	1e05      	subs	r5, r0, #0
 800a064:	d110      	bne.n	800a088 <__mdiff+0x38>
 800a066:	4629      	mov	r1, r5
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff fd0f 	bl	8009a8c <_Balloc>
 800a06e:	b930      	cbnz	r0, 800a07e <__mdiff+0x2e>
 800a070:	4b3a      	ldr	r3, [pc, #232]	; (800a15c <__mdiff+0x10c>)
 800a072:	4602      	mov	r2, r0
 800a074:	f240 2137 	movw	r1, #567	; 0x237
 800a078:	4839      	ldr	r0, [pc, #228]	; (800a160 <__mdiff+0x110>)
 800a07a:	f001 faa5 	bl	800b5c8 <__assert_func>
 800a07e:	2301      	movs	r3, #1
 800a080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	bfa4      	itt	ge
 800a08a:	4643      	movge	r3, r8
 800a08c:	46a0      	movge	r8, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a094:	bfa6      	itte	ge
 800a096:	461c      	movge	r4, r3
 800a098:	2500      	movge	r5, #0
 800a09a:	2501      	movlt	r5, #1
 800a09c:	f7ff fcf6 	bl	8009a8c <_Balloc>
 800a0a0:	b920      	cbnz	r0, 800a0ac <__mdiff+0x5c>
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <__mdiff+0x10c>)
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	f240 2145 	movw	r1, #581	; 0x245
 800a0aa:	e7e5      	b.n	800a078 <__mdiff+0x28>
 800a0ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0b0:	6926      	ldr	r6, [r4, #16]
 800a0b2:	60c5      	str	r5, [r0, #12]
 800a0b4:	f104 0914 	add.w	r9, r4, #20
 800a0b8:	f108 0514 	add.w	r5, r8, #20
 800a0bc:	f100 0e14 	add.w	lr, r0, #20
 800a0c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0c8:	f108 0210 	add.w	r2, r8, #16
 800a0cc:	46f2      	mov	sl, lr
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0d8:	fa11 f88b 	uxtah	r8, r1, fp
 800a0dc:	b299      	uxth	r1, r3
 800a0de:	0c1b      	lsrs	r3, r3, #16
 800a0e0:	eba8 0801 	sub.w	r8, r8, r1
 800a0e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0ec:	fa1f f888 	uxth.w	r8, r8
 800a0f0:	1419      	asrs	r1, r3, #16
 800a0f2:	454e      	cmp	r6, r9
 800a0f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0f8:	f84a 3b04 	str.w	r3, [sl], #4
 800a0fc:	d8e8      	bhi.n	800a0d0 <__mdiff+0x80>
 800a0fe:	1b33      	subs	r3, r6, r4
 800a100:	3b15      	subs	r3, #21
 800a102:	f023 0303 	bic.w	r3, r3, #3
 800a106:	3304      	adds	r3, #4
 800a108:	3415      	adds	r4, #21
 800a10a:	42a6      	cmp	r6, r4
 800a10c:	bf38      	it	cc
 800a10e:	2304      	movcc	r3, #4
 800a110:	441d      	add	r5, r3
 800a112:	4473      	add	r3, lr
 800a114:	469e      	mov	lr, r3
 800a116:	462e      	mov	r6, r5
 800a118:	4566      	cmp	r6, ip
 800a11a:	d30e      	bcc.n	800a13a <__mdiff+0xea>
 800a11c:	f10c 0203 	add.w	r2, ip, #3
 800a120:	1b52      	subs	r2, r2, r5
 800a122:	f022 0203 	bic.w	r2, r2, #3
 800a126:	3d03      	subs	r5, #3
 800a128:	45ac      	cmp	ip, r5
 800a12a:	bf38      	it	cc
 800a12c:	2200      	movcc	r2, #0
 800a12e:	4413      	add	r3, r2
 800a130:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a134:	b17a      	cbz	r2, 800a156 <__mdiff+0x106>
 800a136:	6107      	str	r7, [r0, #16]
 800a138:	e7a4      	b.n	800a084 <__mdiff+0x34>
 800a13a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a13e:	fa11 f288 	uxtah	r2, r1, r8
 800a142:	1414      	asrs	r4, r2, #16
 800a144:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a148:	b292      	uxth	r2, r2
 800a14a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a14e:	f84e 2b04 	str.w	r2, [lr], #4
 800a152:	1421      	asrs	r1, r4, #16
 800a154:	e7e0      	b.n	800a118 <__mdiff+0xc8>
 800a156:	3f01      	subs	r7, #1
 800a158:	e7ea      	b.n	800a130 <__mdiff+0xe0>
 800a15a:	bf00      	nop
 800a15c:	0800c475 	.word	0x0800c475
 800a160:	0800c486 	.word	0x0800c486

0800a164 <__ulp>:
 800a164:	b082      	sub	sp, #8
 800a166:	ed8d 0b00 	vstr	d0, [sp]
 800a16a:	9a01      	ldr	r2, [sp, #4]
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <__ulp+0x48>)
 800a16e:	4013      	ands	r3, r2
 800a170:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a174:	2b00      	cmp	r3, #0
 800a176:	dc08      	bgt.n	800a18a <__ulp+0x26>
 800a178:	425b      	negs	r3, r3
 800a17a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a17e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a182:	da04      	bge.n	800a18e <__ulp+0x2a>
 800a184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a188:	4113      	asrs	r3, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	e008      	b.n	800a1a0 <__ulp+0x3c>
 800a18e:	f1a2 0314 	sub.w	r3, r2, #20
 800a192:	2b1e      	cmp	r3, #30
 800a194:	bfda      	itte	le
 800a196:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a19a:	40da      	lsrle	r2, r3
 800a19c:	2201      	movgt	r2, #1
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	ec41 0b10 	vmov	d0, r0, r1
 800a1a8:	b002      	add	sp, #8
 800a1aa:	4770      	bx	lr
 800a1ac:	7ff00000 	.word	0x7ff00000

0800a1b0 <__b2d>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	6906      	ldr	r6, [r0, #16]
 800a1b6:	f100 0814 	add.w	r8, r0, #20
 800a1ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a1be:	1f37      	subs	r7, r6, #4
 800a1c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7ff fd53 	bl	8009c70 <__hi0bits>
 800a1ca:	f1c0 0320 	rsb	r3, r0, #32
 800a1ce:	280a      	cmp	r0, #10
 800a1d0:	600b      	str	r3, [r1, #0]
 800a1d2:	491b      	ldr	r1, [pc, #108]	; (800a240 <__b2d+0x90>)
 800a1d4:	dc15      	bgt.n	800a202 <__b2d+0x52>
 800a1d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1da:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1de:	45b8      	cmp	r8, r7
 800a1e0:	ea43 0501 	orr.w	r5, r3, r1
 800a1e4:	bf34      	ite	cc
 800a1e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ea:	2300      	movcs	r3, #0
 800a1ec:	3015      	adds	r0, #21
 800a1ee:	fa02 f000 	lsl.w	r0, r2, r0
 800a1f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1f6:	4303      	orrs	r3, r0
 800a1f8:	461c      	mov	r4, r3
 800a1fa:	ec45 4b10 	vmov	d0, r4, r5
 800a1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a202:	45b8      	cmp	r8, r7
 800a204:	bf3a      	itte	cc
 800a206:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a20a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a20e:	2300      	movcs	r3, #0
 800a210:	380b      	subs	r0, #11
 800a212:	d012      	beq.n	800a23a <__b2d+0x8a>
 800a214:	f1c0 0120 	rsb	r1, r0, #32
 800a218:	fa23 f401 	lsr.w	r4, r3, r1
 800a21c:	4082      	lsls	r2, r0
 800a21e:	4322      	orrs	r2, r4
 800a220:	4547      	cmp	r7, r8
 800a222:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a226:	bf8c      	ite	hi
 800a228:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a22c:	2200      	movls	r2, #0
 800a22e:	4083      	lsls	r3, r0
 800a230:	40ca      	lsrs	r2, r1
 800a232:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a236:	4313      	orrs	r3, r2
 800a238:	e7de      	b.n	800a1f8 <__b2d+0x48>
 800a23a:	ea42 0501 	orr.w	r5, r2, r1
 800a23e:	e7db      	b.n	800a1f8 <__b2d+0x48>
 800a240:	3ff00000 	.word	0x3ff00000

0800a244 <__d2b>:
 800a244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a248:	460f      	mov	r7, r1
 800a24a:	2101      	movs	r1, #1
 800a24c:	ec59 8b10 	vmov	r8, r9, d0
 800a250:	4616      	mov	r6, r2
 800a252:	f7ff fc1b 	bl	8009a8c <_Balloc>
 800a256:	4604      	mov	r4, r0
 800a258:	b930      	cbnz	r0, 800a268 <__d2b+0x24>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <__d2b+0xac>)
 800a25e:	4825      	ldr	r0, [pc, #148]	; (800a2f4 <__d2b+0xb0>)
 800a260:	f240 310f 	movw	r1, #783	; 0x30f
 800a264:	f001 f9b0 	bl	800b5c8 <__assert_func>
 800a268:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a26c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a270:	bb2d      	cbnz	r5, 800a2be <__d2b+0x7a>
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	f1b8 0300 	subs.w	r3, r8, #0
 800a278:	d026      	beq.n	800a2c8 <__d2b+0x84>
 800a27a:	4668      	mov	r0, sp
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	f7ff fd17 	bl	8009cb0 <__lo0bits>
 800a282:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a286:	b1e8      	cbz	r0, 800a2c4 <__d2b+0x80>
 800a288:	f1c0 0320 	rsb	r3, r0, #32
 800a28c:	fa02 f303 	lsl.w	r3, r2, r3
 800a290:	430b      	orrs	r3, r1
 800a292:	40c2      	lsrs	r2, r0
 800a294:	6163      	str	r3, [r4, #20]
 800a296:	9201      	str	r2, [sp, #4]
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	61a3      	str	r3, [r4, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bf14      	ite	ne
 800a2a0:	2202      	movne	r2, #2
 800a2a2:	2201      	moveq	r2, #1
 800a2a4:	6122      	str	r2, [r4, #16]
 800a2a6:	b1bd      	cbz	r5, 800a2d8 <__d2b+0x94>
 800a2a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2ac:	4405      	add	r5, r0
 800a2ae:	603d      	str	r5, [r7, #0]
 800a2b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2b4:	6030      	str	r0, [r6, #0]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2c2:	e7d6      	b.n	800a272 <__d2b+0x2e>
 800a2c4:	6161      	str	r1, [r4, #20]
 800a2c6:	e7e7      	b.n	800a298 <__d2b+0x54>
 800a2c8:	a801      	add	r0, sp, #4
 800a2ca:	f7ff fcf1 	bl	8009cb0 <__lo0bits>
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	6163      	str	r3, [r4, #20]
 800a2d2:	3020      	adds	r0, #32
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	e7e5      	b.n	800a2a4 <__d2b+0x60>
 800a2d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2e0:	6038      	str	r0, [r7, #0]
 800a2e2:	6918      	ldr	r0, [r3, #16]
 800a2e4:	f7ff fcc4 	bl	8009c70 <__hi0bits>
 800a2e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ec:	e7e2      	b.n	800a2b4 <__d2b+0x70>
 800a2ee:	bf00      	nop
 800a2f0:	0800c475 	.word	0x0800c475
 800a2f4:	0800c486 	.word	0x0800c486

0800a2f8 <__ratio>:
 800a2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	4688      	mov	r8, r1
 800a2fe:	4669      	mov	r1, sp
 800a300:	4681      	mov	r9, r0
 800a302:	f7ff ff55 	bl	800a1b0 <__b2d>
 800a306:	a901      	add	r1, sp, #4
 800a308:	4640      	mov	r0, r8
 800a30a:	ec55 4b10 	vmov	r4, r5, d0
 800a30e:	f7ff ff4f 	bl	800a1b0 <__b2d>
 800a312:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a316:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a31a:	eba3 0c02 	sub.w	ip, r3, r2
 800a31e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a328:	ec51 0b10 	vmov	r0, r1, d0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfd6      	itet	le
 800a330:	460a      	movle	r2, r1
 800a332:	462a      	movgt	r2, r5
 800a334:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a338:	468b      	mov	fp, r1
 800a33a:	462f      	mov	r7, r5
 800a33c:	bfd4      	ite	le
 800a33e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a342:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a346:	4620      	mov	r0, r4
 800a348:	ee10 2a10 	vmov	r2, s0
 800a34c:	465b      	mov	r3, fp
 800a34e:	4639      	mov	r1, r7
 800a350:	f7f6 fa7c 	bl	800084c <__aeabi_ddiv>
 800a354:	ec41 0b10 	vmov	d0, r0, r1
 800a358:	b003      	add	sp, #12
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a35e <__copybits>:
 800a35e:	3901      	subs	r1, #1
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	1149      	asrs	r1, r1, #5
 800a364:	6914      	ldr	r4, [r2, #16]
 800a366:	3101      	adds	r1, #1
 800a368:	f102 0314 	add.w	r3, r2, #20
 800a36c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a370:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a374:	1f05      	subs	r5, r0, #4
 800a376:	42a3      	cmp	r3, r4
 800a378:	d30c      	bcc.n	800a394 <__copybits+0x36>
 800a37a:	1aa3      	subs	r3, r4, r2
 800a37c:	3b11      	subs	r3, #17
 800a37e:	f023 0303 	bic.w	r3, r3, #3
 800a382:	3211      	adds	r2, #17
 800a384:	42a2      	cmp	r2, r4
 800a386:	bf88      	it	hi
 800a388:	2300      	movhi	r3, #0
 800a38a:	4418      	add	r0, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	4288      	cmp	r0, r1
 800a390:	d305      	bcc.n	800a39e <__copybits+0x40>
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	f853 6b04 	ldr.w	r6, [r3], #4
 800a398:	f845 6f04 	str.w	r6, [r5, #4]!
 800a39c:	e7eb      	b.n	800a376 <__copybits+0x18>
 800a39e:	f840 3b04 	str.w	r3, [r0], #4
 800a3a2:	e7f4      	b.n	800a38e <__copybits+0x30>

0800a3a4 <__any_on>:
 800a3a4:	f100 0214 	add.w	r2, r0, #20
 800a3a8:	6900      	ldr	r0, [r0, #16]
 800a3aa:	114b      	asrs	r3, r1, #5
 800a3ac:	4298      	cmp	r0, r3
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	db11      	blt.n	800a3d6 <__any_on+0x32>
 800a3b2:	dd0a      	ble.n	800a3ca <__any_on+0x26>
 800a3b4:	f011 011f 	ands.w	r1, r1, #31
 800a3b8:	d007      	beq.n	800a3ca <__any_on+0x26>
 800a3ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3be:	fa24 f001 	lsr.w	r0, r4, r1
 800a3c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a3c6:	428c      	cmp	r4, r1
 800a3c8:	d10b      	bne.n	800a3e2 <__any_on+0x3e>
 800a3ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d803      	bhi.n	800a3da <__any_on+0x36>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	e7f7      	b.n	800a3ca <__any_on+0x26>
 800a3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d0f5      	beq.n	800a3ce <__any_on+0x2a>
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	e7f6      	b.n	800a3d4 <__any_on+0x30>

0800a3e6 <sulp>:
 800a3e6:	b570      	push	{r4, r5, r6, lr}
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	ec45 4b10 	vmov	d0, r4, r5
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	f7ff feb7 	bl	800a164 <__ulp>
 800a3f6:	ec51 0b10 	vmov	r0, r1, d0
 800a3fa:	b17e      	cbz	r6, 800a41c <sulp+0x36>
 800a3fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a400:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd09      	ble.n	800a41c <sulp+0x36>
 800a408:	051b      	lsls	r3, r3, #20
 800a40a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a40e:	2400      	movs	r4, #0
 800a410:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f8ee 	bl	80005f8 <__aeabi_dmul>
 800a41c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a420 <_strtod_l>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b02 	vpush	{d8}
 800a428:	b09b      	sub	sp, #108	; 0x6c
 800a42a:	4604      	mov	r4, r0
 800a42c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a42e:	2200      	movs	r2, #0
 800a430:	9216      	str	r2, [sp, #88]	; 0x58
 800a432:	460d      	mov	r5, r1
 800a434:	f04f 0800 	mov.w	r8, #0
 800a438:	f04f 0900 	mov.w	r9, #0
 800a43c:	460a      	mov	r2, r1
 800a43e:	9215      	str	r2, [sp, #84]	; 0x54
 800a440:	7811      	ldrb	r1, [r2, #0]
 800a442:	292b      	cmp	r1, #43	; 0x2b
 800a444:	d04c      	beq.n	800a4e0 <_strtod_l+0xc0>
 800a446:	d83a      	bhi.n	800a4be <_strtod_l+0x9e>
 800a448:	290d      	cmp	r1, #13
 800a44a:	d834      	bhi.n	800a4b6 <_strtod_l+0x96>
 800a44c:	2908      	cmp	r1, #8
 800a44e:	d834      	bhi.n	800a4ba <_strtod_l+0x9a>
 800a450:	2900      	cmp	r1, #0
 800a452:	d03d      	beq.n	800a4d0 <_strtod_l+0xb0>
 800a454:	2200      	movs	r2, #0
 800a456:	920a      	str	r2, [sp, #40]	; 0x28
 800a458:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a45a:	7832      	ldrb	r2, [r6, #0]
 800a45c:	2a30      	cmp	r2, #48	; 0x30
 800a45e:	f040 80b4 	bne.w	800a5ca <_strtod_l+0x1aa>
 800a462:	7872      	ldrb	r2, [r6, #1]
 800a464:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a468:	2a58      	cmp	r2, #88	; 0x58
 800a46a:	d170      	bne.n	800a54e <_strtod_l+0x12e>
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	ab16      	add	r3, sp, #88	; 0x58
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	4a8e      	ldr	r2, [pc, #568]	; (800a6b0 <_strtod_l+0x290>)
 800a478:	ab17      	add	r3, sp, #92	; 0x5c
 800a47a:	a915      	add	r1, sp, #84	; 0x54
 800a47c:	4620      	mov	r0, r4
 800a47e:	f001 f93f 	bl	800b700 <__gethex>
 800a482:	f010 070f 	ands.w	r7, r0, #15
 800a486:	4605      	mov	r5, r0
 800a488:	d005      	beq.n	800a496 <_strtod_l+0x76>
 800a48a:	2f06      	cmp	r7, #6
 800a48c:	d12a      	bne.n	800a4e4 <_strtod_l+0xc4>
 800a48e:	3601      	adds	r6, #1
 800a490:	2300      	movs	r3, #0
 800a492:	9615      	str	r6, [sp, #84]	; 0x54
 800a494:	930a      	str	r3, [sp, #40]	; 0x28
 800a496:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f040 857f 	bne.w	800af9c <_strtod_l+0xb7c>
 800a49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a0:	b1db      	cbz	r3, 800a4da <_strtod_l+0xba>
 800a4a2:	4642      	mov	r2, r8
 800a4a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4a8:	ec43 2b10 	vmov	d0, r2, r3
 800a4ac:	b01b      	add	sp, #108	; 0x6c
 800a4ae:	ecbd 8b02 	vpop	{d8}
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	2920      	cmp	r1, #32
 800a4b8:	d1cc      	bne.n	800a454 <_strtod_l+0x34>
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	e7bf      	b.n	800a43e <_strtod_l+0x1e>
 800a4be:	292d      	cmp	r1, #45	; 0x2d
 800a4c0:	d1c8      	bne.n	800a454 <_strtod_l+0x34>
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	910a      	str	r1, [sp, #40]	; 0x28
 800a4c6:	1c51      	adds	r1, r2, #1
 800a4c8:	9115      	str	r1, [sp, #84]	; 0x54
 800a4ca:	7852      	ldrb	r2, [r2, #1]
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	d1c3      	bne.n	800a458 <_strtod_l+0x38>
 800a4d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4d2:	9515      	str	r5, [sp, #84]	; 0x54
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f040 855f 	bne.w	800af98 <_strtod_l+0xb78>
 800a4da:	4642      	mov	r2, r8
 800a4dc:	464b      	mov	r3, r9
 800a4de:	e7e3      	b.n	800a4a8 <_strtod_l+0x88>
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	e7ef      	b.n	800a4c4 <_strtod_l+0xa4>
 800a4e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4e6:	b13a      	cbz	r2, 800a4f8 <_strtod_l+0xd8>
 800a4e8:	2135      	movs	r1, #53	; 0x35
 800a4ea:	a818      	add	r0, sp, #96	; 0x60
 800a4ec:	f7ff ff37 	bl	800a35e <__copybits>
 800a4f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fb0a 	bl	8009b0c <_Bfree>
 800a4f8:	3f01      	subs	r7, #1
 800a4fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4fc:	2f04      	cmp	r7, #4
 800a4fe:	d806      	bhi.n	800a50e <_strtod_l+0xee>
 800a500:	e8df f007 	tbb	[pc, r7]
 800a504:	201d0314 	.word	0x201d0314
 800a508:	14          	.byte	0x14
 800a509:	00          	.byte	0x00
 800a50a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a50e:	05e9      	lsls	r1, r5, #23
 800a510:	bf48      	it	mi
 800a512:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a516:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a51a:	0d1b      	lsrs	r3, r3, #20
 800a51c:	051b      	lsls	r3, r3, #20
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1b9      	bne.n	800a496 <_strtod_l+0x76>
 800a522:	f7fe fb03 	bl	8008b2c <__errno>
 800a526:	2322      	movs	r3, #34	; 0x22
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	e7b4      	b.n	800a496 <_strtod_l+0x76>
 800a52c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a530:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a534:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a538:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a53c:	e7e7      	b.n	800a50e <_strtod_l+0xee>
 800a53e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a6b8 <_strtod_l+0x298>
 800a542:	e7e4      	b.n	800a50e <_strtod_l+0xee>
 800a544:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a548:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a54c:	e7df      	b.n	800a50e <_strtod_l+0xee>
 800a54e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	9215      	str	r2, [sp, #84]	; 0x54
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b30      	cmp	r3, #48	; 0x30
 800a558:	d0f9      	beq.n	800a54e <_strtod_l+0x12e>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d09b      	beq.n	800a496 <_strtod_l+0x76>
 800a55e:	2301      	movs	r3, #1
 800a560:	f04f 0a00 	mov.w	sl, #0
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a568:	930b      	str	r3, [sp, #44]	; 0x2c
 800a56a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a56e:	46d3      	mov	fp, sl
 800a570:	220a      	movs	r2, #10
 800a572:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a574:	7806      	ldrb	r6, [r0, #0]
 800a576:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a57a:	b2d9      	uxtb	r1, r3
 800a57c:	2909      	cmp	r1, #9
 800a57e:	d926      	bls.n	800a5ce <_strtod_l+0x1ae>
 800a580:	494c      	ldr	r1, [pc, #304]	; (800a6b4 <_strtod_l+0x294>)
 800a582:	2201      	movs	r2, #1
 800a584:	f000 ffe6 	bl	800b554 <strncmp>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d030      	beq.n	800a5ee <_strtod_l+0x1ce>
 800a58c:	2000      	movs	r0, #0
 800a58e:	4632      	mov	r2, r6
 800a590:	9005      	str	r0, [sp, #20]
 800a592:	465e      	mov	r6, fp
 800a594:	4603      	mov	r3, r0
 800a596:	2a65      	cmp	r2, #101	; 0x65
 800a598:	d001      	beq.n	800a59e <_strtod_l+0x17e>
 800a59a:	2a45      	cmp	r2, #69	; 0x45
 800a59c:	d113      	bne.n	800a5c6 <_strtod_l+0x1a6>
 800a59e:	b91e      	cbnz	r6, 800a5a8 <_strtod_l+0x188>
 800a5a0:	9a04      	ldr	r2, [sp, #16]
 800a5a2:	4302      	orrs	r2, r0
 800a5a4:	d094      	beq.n	800a4d0 <_strtod_l+0xb0>
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a5aa:	1c6a      	adds	r2, r5, #1
 800a5ac:	9215      	str	r2, [sp, #84]	; 0x54
 800a5ae:	786a      	ldrb	r2, [r5, #1]
 800a5b0:	2a2b      	cmp	r2, #43	; 0x2b
 800a5b2:	d074      	beq.n	800a69e <_strtod_l+0x27e>
 800a5b4:	2a2d      	cmp	r2, #45	; 0x2d
 800a5b6:	d078      	beq.n	800a6aa <_strtod_l+0x28a>
 800a5b8:	f04f 0c00 	mov.w	ip, #0
 800a5bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a5c0:	2909      	cmp	r1, #9
 800a5c2:	d97f      	bls.n	800a6c4 <_strtod_l+0x2a4>
 800a5c4:	9515      	str	r5, [sp, #84]	; 0x54
 800a5c6:	2700      	movs	r7, #0
 800a5c8:	e09e      	b.n	800a708 <_strtod_l+0x2e8>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e7c8      	b.n	800a560 <_strtod_l+0x140>
 800a5ce:	f1bb 0f08 	cmp.w	fp, #8
 800a5d2:	bfd8      	it	le
 800a5d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a5d6:	f100 0001 	add.w	r0, r0, #1
 800a5da:	bfda      	itte	le
 800a5dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5e0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a5e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a5e6:	f10b 0b01 	add.w	fp, fp, #1
 800a5ea:	9015      	str	r0, [sp, #84]	; 0x54
 800a5ec:	e7c1      	b.n	800a572 <_strtod_l+0x152>
 800a5ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	9215      	str	r2, [sp, #84]	; 0x54
 800a5f4:	785a      	ldrb	r2, [r3, #1]
 800a5f6:	f1bb 0f00 	cmp.w	fp, #0
 800a5fa:	d037      	beq.n	800a66c <_strtod_l+0x24c>
 800a5fc:	9005      	str	r0, [sp, #20]
 800a5fe:	465e      	mov	r6, fp
 800a600:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a604:	2b09      	cmp	r3, #9
 800a606:	d912      	bls.n	800a62e <_strtod_l+0x20e>
 800a608:	2301      	movs	r3, #1
 800a60a:	e7c4      	b.n	800a596 <_strtod_l+0x176>
 800a60c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	9215      	str	r2, [sp, #84]	; 0x54
 800a612:	785a      	ldrb	r2, [r3, #1]
 800a614:	3001      	adds	r0, #1
 800a616:	2a30      	cmp	r2, #48	; 0x30
 800a618:	d0f8      	beq.n	800a60c <_strtod_l+0x1ec>
 800a61a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a61e:	2b08      	cmp	r3, #8
 800a620:	f200 84c1 	bhi.w	800afa6 <_strtod_l+0xb86>
 800a624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a626:	9005      	str	r0, [sp, #20]
 800a628:	2000      	movs	r0, #0
 800a62a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62c:	4606      	mov	r6, r0
 800a62e:	3a30      	subs	r2, #48	; 0x30
 800a630:	f100 0301 	add.w	r3, r0, #1
 800a634:	d014      	beq.n	800a660 <_strtod_l+0x240>
 800a636:	9905      	ldr	r1, [sp, #20]
 800a638:	4419      	add	r1, r3
 800a63a:	9105      	str	r1, [sp, #20]
 800a63c:	4633      	mov	r3, r6
 800a63e:	eb00 0c06 	add.w	ip, r0, r6
 800a642:	210a      	movs	r1, #10
 800a644:	4563      	cmp	r3, ip
 800a646:	d113      	bne.n	800a670 <_strtod_l+0x250>
 800a648:	1833      	adds	r3, r6, r0
 800a64a:	2b08      	cmp	r3, #8
 800a64c:	f106 0601 	add.w	r6, r6, #1
 800a650:	4406      	add	r6, r0
 800a652:	dc1a      	bgt.n	800a68a <_strtod_l+0x26a>
 800a654:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a656:	230a      	movs	r3, #10
 800a658:	fb03 2301 	mla	r3, r3, r1, r2
 800a65c:	9309      	str	r3, [sp, #36]	; 0x24
 800a65e:	2300      	movs	r3, #0
 800a660:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a662:	1c51      	adds	r1, r2, #1
 800a664:	9115      	str	r1, [sp, #84]	; 0x54
 800a666:	7852      	ldrb	r2, [r2, #1]
 800a668:	4618      	mov	r0, r3
 800a66a:	e7c9      	b.n	800a600 <_strtod_l+0x1e0>
 800a66c:	4658      	mov	r0, fp
 800a66e:	e7d2      	b.n	800a616 <_strtod_l+0x1f6>
 800a670:	2b08      	cmp	r3, #8
 800a672:	f103 0301 	add.w	r3, r3, #1
 800a676:	dc03      	bgt.n	800a680 <_strtod_l+0x260>
 800a678:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a67a:	434f      	muls	r7, r1
 800a67c:	9709      	str	r7, [sp, #36]	; 0x24
 800a67e:	e7e1      	b.n	800a644 <_strtod_l+0x224>
 800a680:	2b10      	cmp	r3, #16
 800a682:	bfd8      	it	le
 800a684:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a688:	e7dc      	b.n	800a644 <_strtod_l+0x224>
 800a68a:	2e10      	cmp	r6, #16
 800a68c:	bfdc      	itt	le
 800a68e:	230a      	movle	r3, #10
 800a690:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a694:	e7e3      	b.n	800a65e <_strtod_l+0x23e>
 800a696:	2300      	movs	r3, #0
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	2301      	movs	r3, #1
 800a69c:	e780      	b.n	800a5a0 <_strtod_l+0x180>
 800a69e:	f04f 0c00 	mov.w	ip, #0
 800a6a2:	1caa      	adds	r2, r5, #2
 800a6a4:	9215      	str	r2, [sp, #84]	; 0x54
 800a6a6:	78aa      	ldrb	r2, [r5, #2]
 800a6a8:	e788      	b.n	800a5bc <_strtod_l+0x19c>
 800a6aa:	f04f 0c01 	mov.w	ip, #1
 800a6ae:	e7f8      	b.n	800a6a2 <_strtod_l+0x282>
 800a6b0:	0800c5e0 	.word	0x0800c5e0
 800a6b4:	0800c5dc 	.word	0x0800c5dc
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6be:	1c51      	adds	r1, r2, #1
 800a6c0:	9115      	str	r1, [sp, #84]	; 0x54
 800a6c2:	7852      	ldrb	r2, [r2, #1]
 800a6c4:	2a30      	cmp	r2, #48	; 0x30
 800a6c6:	d0f9      	beq.n	800a6bc <_strtod_l+0x29c>
 800a6c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a6cc:	2908      	cmp	r1, #8
 800a6ce:	f63f af7a 	bhi.w	800a5c6 <_strtod_l+0x1a6>
 800a6d2:	3a30      	subs	r2, #48	; 0x30
 800a6d4:	9208      	str	r2, [sp, #32]
 800a6d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6d8:	920c      	str	r2, [sp, #48]	; 0x30
 800a6da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6dc:	1c57      	adds	r7, r2, #1
 800a6de:	9715      	str	r7, [sp, #84]	; 0x54
 800a6e0:	7852      	ldrb	r2, [r2, #1]
 800a6e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a6e6:	f1be 0f09 	cmp.w	lr, #9
 800a6ea:	d938      	bls.n	800a75e <_strtod_l+0x33e>
 800a6ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6ee:	1a7f      	subs	r7, r7, r1
 800a6f0:	2f08      	cmp	r7, #8
 800a6f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a6f6:	dc03      	bgt.n	800a700 <_strtod_l+0x2e0>
 800a6f8:	9908      	ldr	r1, [sp, #32]
 800a6fa:	428f      	cmp	r7, r1
 800a6fc:	bfa8      	it	ge
 800a6fe:	460f      	movge	r7, r1
 800a700:	f1bc 0f00 	cmp.w	ip, #0
 800a704:	d000      	beq.n	800a708 <_strtod_l+0x2e8>
 800a706:	427f      	negs	r7, r7
 800a708:	2e00      	cmp	r6, #0
 800a70a:	d14f      	bne.n	800a7ac <_strtod_l+0x38c>
 800a70c:	9904      	ldr	r1, [sp, #16]
 800a70e:	4301      	orrs	r1, r0
 800a710:	f47f aec1 	bne.w	800a496 <_strtod_l+0x76>
 800a714:	2b00      	cmp	r3, #0
 800a716:	f47f aedb 	bne.w	800a4d0 <_strtod_l+0xb0>
 800a71a:	2a69      	cmp	r2, #105	; 0x69
 800a71c:	d029      	beq.n	800a772 <_strtod_l+0x352>
 800a71e:	dc26      	bgt.n	800a76e <_strtod_l+0x34e>
 800a720:	2a49      	cmp	r2, #73	; 0x49
 800a722:	d026      	beq.n	800a772 <_strtod_l+0x352>
 800a724:	2a4e      	cmp	r2, #78	; 0x4e
 800a726:	f47f aed3 	bne.w	800a4d0 <_strtod_l+0xb0>
 800a72a:	499b      	ldr	r1, [pc, #620]	; (800a998 <_strtod_l+0x578>)
 800a72c:	a815      	add	r0, sp, #84	; 0x54
 800a72e:	f001 fa27 	bl	800bb80 <__match>
 800a732:	2800      	cmp	r0, #0
 800a734:	f43f aecc 	beq.w	800a4d0 <_strtod_l+0xb0>
 800a738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b28      	cmp	r3, #40	; 0x28
 800a73e:	d12f      	bne.n	800a7a0 <_strtod_l+0x380>
 800a740:	4996      	ldr	r1, [pc, #600]	; (800a99c <_strtod_l+0x57c>)
 800a742:	aa18      	add	r2, sp, #96	; 0x60
 800a744:	a815      	add	r0, sp, #84	; 0x54
 800a746:	f001 fa2f 	bl	800bba8 <__hexnan>
 800a74a:	2805      	cmp	r0, #5
 800a74c:	d128      	bne.n	800a7a0 <_strtod_l+0x380>
 800a74e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a754:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a758:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a75c:	e69b      	b.n	800a496 <_strtod_l+0x76>
 800a75e:	9f08      	ldr	r7, [sp, #32]
 800a760:	210a      	movs	r1, #10
 800a762:	fb01 2107 	mla	r1, r1, r7, r2
 800a766:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a76a:	9208      	str	r2, [sp, #32]
 800a76c:	e7b5      	b.n	800a6da <_strtod_l+0x2ba>
 800a76e:	2a6e      	cmp	r2, #110	; 0x6e
 800a770:	e7d9      	b.n	800a726 <_strtod_l+0x306>
 800a772:	498b      	ldr	r1, [pc, #556]	; (800a9a0 <_strtod_l+0x580>)
 800a774:	a815      	add	r0, sp, #84	; 0x54
 800a776:	f001 fa03 	bl	800bb80 <__match>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	f43f aea8 	beq.w	800a4d0 <_strtod_l+0xb0>
 800a780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a782:	4988      	ldr	r1, [pc, #544]	; (800a9a4 <_strtod_l+0x584>)
 800a784:	3b01      	subs	r3, #1
 800a786:	a815      	add	r0, sp, #84	; 0x54
 800a788:	9315      	str	r3, [sp, #84]	; 0x54
 800a78a:	f001 f9f9 	bl	800bb80 <__match>
 800a78e:	b910      	cbnz	r0, 800a796 <_strtod_l+0x376>
 800a790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a792:	3301      	adds	r3, #1
 800a794:	9315      	str	r3, [sp, #84]	; 0x54
 800a796:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a9b4 <_strtod_l+0x594>
 800a79a:	f04f 0800 	mov.w	r8, #0
 800a79e:	e67a      	b.n	800a496 <_strtod_l+0x76>
 800a7a0:	4881      	ldr	r0, [pc, #516]	; (800a9a8 <_strtod_l+0x588>)
 800a7a2:	f000 ff09 	bl	800b5b8 <nan>
 800a7a6:	ec59 8b10 	vmov	r8, r9, d0
 800a7aa:	e674      	b.n	800a496 <_strtod_l+0x76>
 800a7ac:	9b05      	ldr	r3, [sp, #20]
 800a7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7b0:	1afb      	subs	r3, r7, r3
 800a7b2:	f1bb 0f00 	cmp.w	fp, #0
 800a7b6:	bf08      	it	eq
 800a7b8:	46b3      	moveq	fp, r6
 800a7ba:	2e10      	cmp	r6, #16
 800a7bc:	9308      	str	r3, [sp, #32]
 800a7be:	4635      	mov	r5, r6
 800a7c0:	bfa8      	it	ge
 800a7c2:	2510      	movge	r5, #16
 800a7c4:	f7f5 fe9e 	bl	8000504 <__aeabi_ui2d>
 800a7c8:	2e09      	cmp	r6, #9
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4689      	mov	r9, r1
 800a7ce:	dd13      	ble.n	800a7f8 <_strtod_l+0x3d8>
 800a7d0:	4b76      	ldr	r3, [pc, #472]	; (800a9ac <_strtod_l+0x58c>)
 800a7d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7da:	f7f5 ff0d 	bl	80005f8 <__aeabi_dmul>
 800a7de:	4680      	mov	r8, r0
 800a7e0:	4650      	mov	r0, sl
 800a7e2:	4689      	mov	r9, r1
 800a7e4:	f7f5 fe8e 	bl	8000504 <__aeabi_ui2d>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	4649      	mov	r1, r9
 800a7f0:	f7f5 fd4c 	bl	800028c <__adddf3>
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	2e0f      	cmp	r6, #15
 800a7fa:	dc38      	bgt.n	800a86e <_strtod_l+0x44e>
 800a7fc:	9b08      	ldr	r3, [sp, #32]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f43f ae49 	beq.w	800a496 <_strtod_l+0x76>
 800a804:	dd24      	ble.n	800a850 <_strtod_l+0x430>
 800a806:	2b16      	cmp	r3, #22
 800a808:	dc0b      	bgt.n	800a822 <_strtod_l+0x402>
 800a80a:	4968      	ldr	r1, [pc, #416]	; (800a9ac <_strtod_l+0x58c>)
 800a80c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a814:	4642      	mov	r2, r8
 800a816:	464b      	mov	r3, r9
 800a818:	f7f5 feee 	bl	80005f8 <__aeabi_dmul>
 800a81c:	4680      	mov	r8, r0
 800a81e:	4689      	mov	r9, r1
 800a820:	e639      	b.n	800a496 <_strtod_l+0x76>
 800a822:	9a08      	ldr	r2, [sp, #32]
 800a824:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a828:	4293      	cmp	r3, r2
 800a82a:	db20      	blt.n	800a86e <_strtod_l+0x44e>
 800a82c:	4c5f      	ldr	r4, [pc, #380]	; (800a9ac <_strtod_l+0x58c>)
 800a82e:	f1c6 060f 	rsb	r6, r6, #15
 800a832:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a836:	4642      	mov	r2, r8
 800a838:	464b      	mov	r3, r9
 800a83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a83e:	f7f5 fedb 	bl	80005f8 <__aeabi_dmul>
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	1b9e      	subs	r6, r3, r6
 800a846:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a84a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a84e:	e7e3      	b.n	800a818 <_strtod_l+0x3f8>
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	3316      	adds	r3, #22
 800a854:	db0b      	blt.n	800a86e <_strtod_l+0x44e>
 800a856:	9b05      	ldr	r3, [sp, #20]
 800a858:	1bdf      	subs	r7, r3, r7
 800a85a:	4b54      	ldr	r3, [pc, #336]	; (800a9ac <_strtod_l+0x58c>)
 800a85c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a860:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a864:	4640      	mov	r0, r8
 800a866:	4649      	mov	r1, r9
 800a868:	f7f5 fff0 	bl	800084c <__aeabi_ddiv>
 800a86c:	e7d6      	b.n	800a81c <_strtod_l+0x3fc>
 800a86e:	9b08      	ldr	r3, [sp, #32]
 800a870:	1b75      	subs	r5, r6, r5
 800a872:	441d      	add	r5, r3
 800a874:	2d00      	cmp	r5, #0
 800a876:	dd70      	ble.n	800a95a <_strtod_l+0x53a>
 800a878:	f015 030f 	ands.w	r3, r5, #15
 800a87c:	d00a      	beq.n	800a894 <_strtod_l+0x474>
 800a87e:	494b      	ldr	r1, [pc, #300]	; (800a9ac <_strtod_l+0x58c>)
 800a880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a884:	4642      	mov	r2, r8
 800a886:	464b      	mov	r3, r9
 800a888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a88c:	f7f5 feb4 	bl	80005f8 <__aeabi_dmul>
 800a890:	4680      	mov	r8, r0
 800a892:	4689      	mov	r9, r1
 800a894:	f035 050f 	bics.w	r5, r5, #15
 800a898:	d04d      	beq.n	800a936 <_strtod_l+0x516>
 800a89a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a89e:	dd22      	ble.n	800a8e6 <_strtod_l+0x4c6>
 800a8a0:	2500      	movs	r5, #0
 800a8a2:	46ab      	mov	fp, r5
 800a8a4:	9509      	str	r5, [sp, #36]	; 0x24
 800a8a6:	9505      	str	r5, [sp, #20]
 800a8a8:	2322      	movs	r3, #34	; 0x22
 800a8aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a9b4 <_strtod_l+0x594>
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	f04f 0800 	mov.w	r8, #0
 800a8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f43f aded 	beq.w	800a496 <_strtod_l+0x76>
 800a8bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7ff f924 	bl	8009b0c <_Bfree>
 800a8c4:	9905      	ldr	r1, [sp, #20]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff f920 	bl	8009b0c <_Bfree>
 800a8cc:	4659      	mov	r1, fp
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7ff f91c 	bl	8009b0c <_Bfree>
 800a8d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7ff f918 	bl	8009b0c <_Bfree>
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff f914 	bl	8009b0c <_Bfree>
 800a8e4:	e5d7      	b.n	800a496 <_strtod_l+0x76>
 800a8e6:	4b32      	ldr	r3, [pc, #200]	; (800a9b0 <_strtod_l+0x590>)
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	112d      	asrs	r5, r5, #4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	469a      	mov	sl, r3
 800a8f4:	2d01      	cmp	r5, #1
 800a8f6:	dc21      	bgt.n	800a93c <_strtod_l+0x51c>
 800a8f8:	b10b      	cbz	r3, 800a8fe <_strtod_l+0x4de>
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	4689      	mov	r9, r1
 800a8fe:	492c      	ldr	r1, [pc, #176]	; (800a9b0 <_strtod_l+0x590>)
 800a900:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a904:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a908:	4642      	mov	r2, r8
 800a90a:	464b      	mov	r3, r9
 800a90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a910:	f7f5 fe72 	bl	80005f8 <__aeabi_dmul>
 800a914:	4b27      	ldr	r3, [pc, #156]	; (800a9b4 <_strtod_l+0x594>)
 800a916:	460a      	mov	r2, r1
 800a918:	400b      	ands	r3, r1
 800a91a:	4927      	ldr	r1, [pc, #156]	; (800a9b8 <_strtod_l+0x598>)
 800a91c:	428b      	cmp	r3, r1
 800a91e:	4680      	mov	r8, r0
 800a920:	d8be      	bhi.n	800a8a0 <_strtod_l+0x480>
 800a922:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a926:	428b      	cmp	r3, r1
 800a928:	bf86      	itte	hi
 800a92a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a9bc <_strtod_l+0x59c>
 800a92e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800a932:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a936:	2300      	movs	r3, #0
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	e07b      	b.n	800aa34 <_strtod_l+0x614>
 800a93c:	07ea      	lsls	r2, r5, #31
 800a93e:	d505      	bpl.n	800a94c <_strtod_l+0x52c>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	f7f5 fe57 	bl	80005f8 <__aeabi_dmul>
 800a94a:	2301      	movs	r3, #1
 800a94c:	9a04      	ldr	r2, [sp, #16]
 800a94e:	3208      	adds	r2, #8
 800a950:	f10a 0a01 	add.w	sl, sl, #1
 800a954:	106d      	asrs	r5, r5, #1
 800a956:	9204      	str	r2, [sp, #16]
 800a958:	e7cc      	b.n	800a8f4 <_strtod_l+0x4d4>
 800a95a:	d0ec      	beq.n	800a936 <_strtod_l+0x516>
 800a95c:	426d      	negs	r5, r5
 800a95e:	f015 020f 	ands.w	r2, r5, #15
 800a962:	d00a      	beq.n	800a97a <_strtod_l+0x55a>
 800a964:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <_strtod_l+0x58c>)
 800a966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 ff6b 	bl	800084c <__aeabi_ddiv>
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	112d      	asrs	r5, r5, #4
 800a97c:	d0db      	beq.n	800a936 <_strtod_l+0x516>
 800a97e:	2d1f      	cmp	r5, #31
 800a980:	dd1e      	ble.n	800a9c0 <_strtod_l+0x5a0>
 800a982:	2500      	movs	r5, #0
 800a984:	46ab      	mov	fp, r5
 800a986:	9509      	str	r5, [sp, #36]	; 0x24
 800a988:	9505      	str	r5, [sp, #20]
 800a98a:	2322      	movs	r3, #34	; 0x22
 800a98c:	f04f 0800 	mov.w	r8, #0
 800a990:	f04f 0900 	mov.w	r9, #0
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	e78d      	b.n	800a8b4 <_strtod_l+0x494>
 800a998:	0800c3cd 	.word	0x0800c3cd
 800a99c:	0800c5f4 	.word	0x0800c5f4
 800a9a0:	0800c3c5 	.word	0x0800c3c5
 800a9a4:	0800c3fc 	.word	0x0800c3fc
 800a9a8:	0800c785 	.word	0x0800c785
 800a9ac:	0800c508 	.word	0x0800c508
 800a9b0:	0800c4e0 	.word	0x0800c4e0
 800a9b4:	7ff00000 	.word	0x7ff00000
 800a9b8:	7ca00000 	.word	0x7ca00000
 800a9bc:	7fefffff 	.word	0x7fefffff
 800a9c0:	f015 0310 	ands.w	r3, r5, #16
 800a9c4:	bf18      	it	ne
 800a9c6:	236a      	movne	r3, #106	; 0x6a
 800a9c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ad6c <_strtod_l+0x94c>
 800a9cc:	9304      	str	r3, [sp, #16]
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	07ea      	lsls	r2, r5, #31
 800a9d6:	d504      	bpl.n	800a9e2 <_strtod_l+0x5c2>
 800a9d8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a9dc:	f7f5 fe0c 	bl	80005f8 <__aeabi_dmul>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	106d      	asrs	r5, r5, #1
 800a9e4:	f10a 0a08 	add.w	sl, sl, #8
 800a9e8:	d1f4      	bne.n	800a9d4 <_strtod_l+0x5b4>
 800a9ea:	b10b      	cbz	r3, 800a9f0 <_strtod_l+0x5d0>
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	4689      	mov	r9, r1
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	b1bb      	cbz	r3, 800aa24 <_strtod_l+0x604>
 800a9f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a9f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	4649      	mov	r1, r9
 800aa00:	dd10      	ble.n	800aa24 <_strtod_l+0x604>
 800aa02:	2b1f      	cmp	r3, #31
 800aa04:	f340 811e 	ble.w	800ac44 <_strtod_l+0x824>
 800aa08:	2b34      	cmp	r3, #52	; 0x34
 800aa0a:	bfde      	ittt	le
 800aa0c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800aa10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa14:	4093      	lslle	r3, r2
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	bfcc      	ite	gt
 800aa1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aa20:	ea03 0901 	andle.w	r9, r3, r1
 800aa24:	2200      	movs	r2, #0
 800aa26:	2300      	movs	r3, #0
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f6 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1a6      	bne.n	800a982 <_strtod_l+0x562>
 800aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa3a:	4633      	mov	r3, r6
 800aa3c:	465a      	mov	r2, fp
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff f8cc 	bl	8009bdc <__s2b>
 800aa44:	9009      	str	r0, [sp, #36]	; 0x24
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f af2a 	beq.w	800a8a0 <_strtod_l+0x480>
 800aa4c:	9a08      	ldr	r2, [sp, #32]
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	eba3 0307 	sub.w	r3, r3, r7
 800aa56:	bfa8      	it	ge
 800aa58:	2300      	movge	r3, #0
 800aa5a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa5c:	2500      	movs	r5, #0
 800aa5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa62:	9312      	str	r3, [sp, #72]	; 0x48
 800aa64:	46ab      	mov	fp, r5
 800aa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa68:	4620      	mov	r0, r4
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	f7ff f80e 	bl	8009a8c <_Balloc>
 800aa70:	9005      	str	r0, [sp, #20]
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f43f af18 	beq.w	800a8a8 <_strtod_l+0x488>
 800aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	3202      	adds	r2, #2
 800aa7e:	f103 010c 	add.w	r1, r3, #12
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	300c      	adds	r0, #12
 800aa86:	f000 fd87 	bl	800b598 <memcpy>
 800aa8a:	ec49 8b10 	vmov	d0, r8, r9
 800aa8e:	aa18      	add	r2, sp, #96	; 0x60
 800aa90:	a917      	add	r1, sp, #92	; 0x5c
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff fbd6 	bl	800a244 <__d2b>
 800aa98:	ec49 8b18 	vmov	d8, r8, r9
 800aa9c:	9016      	str	r0, [sp, #88]	; 0x58
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f af02 	beq.w	800a8a8 <_strtod_l+0x488>
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7ff f930 	bl	8009d0c <__i2b>
 800aaac:	4683      	mov	fp, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f aefa 	beq.w	800a8a8 <_strtod_l+0x488>
 800aab4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aab6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	bfab      	itete	ge
 800aabc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aabe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aac0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aac2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aac6:	bfac      	ite	ge
 800aac8:	eb06 0a03 	addge.w	sl, r6, r3
 800aacc:	1b9f      	sublt	r7, r3, r6
 800aace:	9b04      	ldr	r3, [sp, #16]
 800aad0:	1af6      	subs	r6, r6, r3
 800aad2:	4416      	add	r6, r2
 800aad4:	4ba0      	ldr	r3, [pc, #640]	; (800ad58 <_strtod_l+0x938>)
 800aad6:	3e01      	subs	r6, #1
 800aad8:	429e      	cmp	r6, r3
 800aada:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aade:	f280 80c4 	bge.w	800ac6a <_strtod_l+0x84a>
 800aae2:	1b9b      	subs	r3, r3, r6
 800aae4:	2b1f      	cmp	r3, #31
 800aae6:	eba2 0203 	sub.w	r2, r2, r3
 800aaea:	f04f 0101 	mov.w	r1, #1
 800aaee:	f300 80b0 	bgt.w	800ac52 <_strtod_l+0x832>
 800aaf2:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf6:	930e      	str	r3, [sp, #56]	; 0x38
 800aaf8:	2300      	movs	r3, #0
 800aafa:	930d      	str	r3, [sp, #52]	; 0x34
 800aafc:	eb0a 0602 	add.w	r6, sl, r2
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	45b2      	cmp	sl, r6
 800ab04:	4417      	add	r7, r2
 800ab06:	441f      	add	r7, r3
 800ab08:	4653      	mov	r3, sl
 800ab0a:	bfa8      	it	ge
 800ab0c:	4633      	movge	r3, r6
 800ab0e:	42bb      	cmp	r3, r7
 800ab10:	bfa8      	it	ge
 800ab12:	463b      	movge	r3, r7
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfc2      	ittt	gt
 800ab18:	1af6      	subgt	r6, r6, r3
 800ab1a:	1aff      	subgt	r7, r7, r3
 800ab1c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ab20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd17      	ble.n	800ab56 <_strtod_l+0x736>
 800ab26:	4659      	mov	r1, fp
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f7ff f9ae 	bl	8009e8c <__pow5mult>
 800ab30:	4683      	mov	fp, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f43f aeb8 	beq.w	800a8a8 <_strtod_l+0x488>
 800ab38:	4601      	mov	r1, r0
 800ab3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f7ff f8fb 	bl	8009d38 <__multiply>
 800ab42:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f43f aeaf 	beq.w	800a8a8 <_strtod_l+0x488>
 800ab4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7fe ffdd 	bl	8009b0c <_Bfree>
 800ab52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab54:	9316      	str	r3, [sp, #88]	; 0x58
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	f300 808c 	bgt.w	800ac74 <_strtod_l+0x854>
 800ab5c:	9b08      	ldr	r3, [sp, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dd08      	ble.n	800ab74 <_strtod_l+0x754>
 800ab62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab64:	9905      	ldr	r1, [sp, #20]
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff f990 	bl	8009e8c <__pow5mult>
 800ab6c:	9005      	str	r0, [sp, #20]
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f ae9a 	beq.w	800a8a8 <_strtod_l+0x488>
 800ab74:	2f00      	cmp	r7, #0
 800ab76:	dd08      	ble.n	800ab8a <_strtod_l+0x76a>
 800ab78:	9905      	ldr	r1, [sp, #20]
 800ab7a:	463a      	mov	r2, r7
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff f9df 	bl	8009f40 <__lshift>
 800ab82:	9005      	str	r0, [sp, #20]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f43f ae8f 	beq.w	800a8a8 <_strtod_l+0x488>
 800ab8a:	f1ba 0f00 	cmp.w	sl, #0
 800ab8e:	dd08      	ble.n	800aba2 <_strtod_l+0x782>
 800ab90:	4659      	mov	r1, fp
 800ab92:	4652      	mov	r2, sl
 800ab94:	4620      	mov	r0, r4
 800ab96:	f7ff f9d3 	bl	8009f40 <__lshift>
 800ab9a:	4683      	mov	fp, r0
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f ae83 	beq.w	800a8a8 <_strtod_l+0x488>
 800aba2:	9a05      	ldr	r2, [sp, #20]
 800aba4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aba6:	4620      	mov	r0, r4
 800aba8:	f7ff fa52 	bl	800a050 <__mdiff>
 800abac:	4605      	mov	r5, r0
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f ae7a 	beq.w	800a8a8 <_strtod_l+0x488>
 800abb4:	68c3      	ldr	r3, [r0, #12]
 800abb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abb8:	2300      	movs	r3, #0
 800abba:	60c3      	str	r3, [r0, #12]
 800abbc:	4659      	mov	r1, fp
 800abbe:	f7ff fa2b 	bl	800a018 <__mcmp>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	da60      	bge.n	800ac88 <_strtod_l+0x868>
 800abc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc8:	ea53 0308 	orrs.w	r3, r3, r8
 800abcc:	f040 8084 	bne.w	800acd8 <_strtod_l+0x8b8>
 800abd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d17f      	bne.n	800acd8 <_strtod_l+0x8b8>
 800abd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abdc:	0d1b      	lsrs	r3, r3, #20
 800abde:	051b      	lsls	r3, r3, #20
 800abe0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abe4:	d978      	bls.n	800acd8 <_strtod_l+0x8b8>
 800abe6:	696b      	ldr	r3, [r5, #20]
 800abe8:	b913      	cbnz	r3, 800abf0 <_strtod_l+0x7d0>
 800abea:	692b      	ldr	r3, [r5, #16]
 800abec:	2b01      	cmp	r3, #1
 800abee:	dd73      	ble.n	800acd8 <_strtod_l+0x8b8>
 800abf0:	4629      	mov	r1, r5
 800abf2:	2201      	movs	r2, #1
 800abf4:	4620      	mov	r0, r4
 800abf6:	f7ff f9a3 	bl	8009f40 <__lshift>
 800abfa:	4659      	mov	r1, fp
 800abfc:	4605      	mov	r5, r0
 800abfe:	f7ff fa0b 	bl	800a018 <__mcmp>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	dd68      	ble.n	800acd8 <_strtod_l+0x8b8>
 800ac06:	9904      	ldr	r1, [sp, #16]
 800ac08:	4a54      	ldr	r2, [pc, #336]	; (800ad5c <_strtod_l+0x93c>)
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	f000 8084 	beq.w	800ad1a <_strtod_l+0x8fa>
 800ac12:	ea02 0109 	and.w	r1, r2, r9
 800ac16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac1a:	dc7e      	bgt.n	800ad1a <_strtod_l+0x8fa>
 800ac1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac20:	f77f aeb3 	ble.w	800a98a <_strtod_l+0x56a>
 800ac24:	4b4e      	ldr	r3, [pc, #312]	; (800ad60 <_strtod_l+0x940>)
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f7f5 fce4 	bl	80005f8 <__aeabi_dmul>
 800ac30:	4b4a      	ldr	r3, [pc, #296]	; (800ad5c <_strtod_l+0x93c>)
 800ac32:	400b      	ands	r3, r1
 800ac34:	4680      	mov	r8, r0
 800ac36:	4689      	mov	r9, r1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f47f ae3f 	bne.w	800a8bc <_strtod_l+0x49c>
 800ac3e:	2322      	movs	r3, #34	; 0x22
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	e63b      	b.n	800a8bc <_strtod_l+0x49c>
 800ac44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac48:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4c:	ea03 0808 	and.w	r8, r3, r8
 800ac50:	e6e8      	b.n	800aa24 <_strtod_l+0x604>
 800ac52:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ac56:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ac5a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ac5e:	36e2      	adds	r6, #226	; 0xe2
 800ac60:	fa01 f306 	lsl.w	r3, r1, r6
 800ac64:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ac68:	e748      	b.n	800aafc <_strtod_l+0x6dc>
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ac72:	e743      	b.n	800aafc <_strtod_l+0x6dc>
 800ac74:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac76:	4632      	mov	r2, r6
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff f961 	bl	8009f40 <__lshift>
 800ac7e:	9016      	str	r0, [sp, #88]	; 0x58
 800ac80:	2800      	cmp	r0, #0
 800ac82:	f47f af6b 	bne.w	800ab5c <_strtod_l+0x73c>
 800ac86:	e60f      	b.n	800a8a8 <_strtod_l+0x488>
 800ac88:	46ca      	mov	sl, r9
 800ac8a:	d171      	bne.n	800ad70 <_strtod_l+0x950>
 800ac8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac92:	b352      	cbz	r2, 800acea <_strtod_l+0x8ca>
 800ac94:	4a33      	ldr	r2, [pc, #204]	; (800ad64 <_strtod_l+0x944>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d12a      	bne.n	800acf0 <_strtod_l+0x8d0>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	b1fb      	cbz	r3, 800ace0 <_strtod_l+0x8c0>
 800aca0:	4b2e      	ldr	r3, [pc, #184]	; (800ad5c <_strtod_l+0x93c>)
 800aca2:	ea09 0303 	and.w	r3, r9, r3
 800aca6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acae:	d81a      	bhi.n	800ace6 <_strtod_l+0x8c6>
 800acb0:	0d1b      	lsrs	r3, r3, #20
 800acb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acb6:	fa02 f303 	lsl.w	r3, r2, r3
 800acba:	4299      	cmp	r1, r3
 800acbc:	d118      	bne.n	800acf0 <_strtod_l+0x8d0>
 800acbe:	4b2a      	ldr	r3, [pc, #168]	; (800ad68 <_strtod_l+0x948>)
 800acc0:	459a      	cmp	sl, r3
 800acc2:	d102      	bne.n	800acca <_strtod_l+0x8aa>
 800acc4:	3101      	adds	r1, #1
 800acc6:	f43f adef 	beq.w	800a8a8 <_strtod_l+0x488>
 800acca:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <_strtod_l+0x93c>)
 800accc:	ea0a 0303 	and.w	r3, sl, r3
 800acd0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800acd4:	f04f 0800 	mov.w	r8, #0
 800acd8:	9b04      	ldr	r3, [sp, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1a2      	bne.n	800ac24 <_strtod_l+0x804>
 800acde:	e5ed      	b.n	800a8bc <_strtod_l+0x49c>
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ace4:	e7e9      	b.n	800acba <_strtod_l+0x89a>
 800ace6:	4613      	mov	r3, r2
 800ace8:	e7e7      	b.n	800acba <_strtod_l+0x89a>
 800acea:	ea53 0308 	orrs.w	r3, r3, r8
 800acee:	d08a      	beq.n	800ac06 <_strtod_l+0x7e6>
 800acf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf2:	b1e3      	cbz	r3, 800ad2e <_strtod_l+0x90e>
 800acf4:	ea13 0f0a 	tst.w	r3, sl
 800acf8:	d0ee      	beq.n	800acd8 <_strtod_l+0x8b8>
 800acfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acfc:	9a04      	ldr	r2, [sp, #16]
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	b1c3      	cbz	r3, 800ad36 <_strtod_l+0x916>
 800ad04:	f7ff fb6f 	bl	800a3e6 <sulp>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	ec51 0b18 	vmov	r0, r1, d8
 800ad10:	f7f5 fabc 	bl	800028c <__adddf3>
 800ad14:	4680      	mov	r8, r0
 800ad16:	4689      	mov	r9, r1
 800ad18:	e7de      	b.n	800acd8 <_strtod_l+0x8b8>
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ad24:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ad28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ad2c:	e7d4      	b.n	800acd8 <_strtod_l+0x8b8>
 800ad2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad30:	ea13 0f08 	tst.w	r3, r8
 800ad34:	e7e0      	b.n	800acf8 <_strtod_l+0x8d8>
 800ad36:	f7ff fb56 	bl	800a3e6 <sulp>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	ec51 0b18 	vmov	r0, r1, d8
 800ad42:	f7f5 faa1 	bl	8000288 <__aeabi_dsub>
 800ad46:	2200      	movs	r2, #0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	f7f5 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d0c0      	beq.n	800acd8 <_strtod_l+0x8b8>
 800ad56:	e618      	b.n	800a98a <_strtod_l+0x56a>
 800ad58:	fffffc02 	.word	0xfffffc02
 800ad5c:	7ff00000 	.word	0x7ff00000
 800ad60:	39500000 	.word	0x39500000
 800ad64:	000fffff 	.word	0x000fffff
 800ad68:	7fefffff 	.word	0x7fefffff
 800ad6c:	0800c608 	.word	0x0800c608
 800ad70:	4659      	mov	r1, fp
 800ad72:	4628      	mov	r0, r5
 800ad74:	f7ff fac0 	bl	800a2f8 <__ratio>
 800ad78:	ec57 6b10 	vmov	r6, r7, d0
 800ad7c:	ee10 0a10 	vmov	r0, s0
 800ad80:	2200      	movs	r2, #0
 800ad82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 feb2 	bl	8000af0 <__aeabi_dcmple>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d071      	beq.n	800ae74 <_strtod_l+0xa54>
 800ad90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d17c      	bne.n	800ae90 <_strtod_l+0xa70>
 800ad96:	f1b8 0f00 	cmp.w	r8, #0
 800ad9a:	d15a      	bne.n	800ae52 <_strtod_l+0xa32>
 800ad9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d15d      	bne.n	800ae60 <_strtod_l+0xa40>
 800ada4:	4b90      	ldr	r3, [pc, #576]	; (800afe8 <_strtod_l+0xbc8>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fe96 	bl	8000adc <__aeabi_dcmplt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d15c      	bne.n	800ae6e <_strtod_l+0xa4e>
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	4b8c      	ldr	r3, [pc, #560]	; (800afec <_strtod_l+0xbcc>)
 800adba:	2200      	movs	r2, #0
 800adbc:	f7f5 fc1c 	bl	80005f8 <__aeabi_dmul>
 800adc0:	4606      	mov	r6, r0
 800adc2:	460f      	mov	r7, r1
 800adc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800adc8:	9606      	str	r6, [sp, #24]
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800add0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800add4:	4b86      	ldr	r3, [pc, #536]	; (800aff0 <_strtod_l+0xbd0>)
 800add6:	ea0a 0303 	and.w	r3, sl, r3
 800adda:	930d      	str	r3, [sp, #52]	; 0x34
 800addc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adde:	4b85      	ldr	r3, [pc, #532]	; (800aff4 <_strtod_l+0xbd4>)
 800ade0:	429a      	cmp	r2, r3
 800ade2:	f040 8090 	bne.w	800af06 <_strtod_l+0xae6>
 800ade6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800adea:	ec49 8b10 	vmov	d0, r8, r9
 800adee:	f7ff f9b9 	bl	800a164 <__ulp>
 800adf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adf6:	ec51 0b10 	vmov	r0, r1, d0
 800adfa:	f7f5 fbfd 	bl	80005f8 <__aeabi_dmul>
 800adfe:	4642      	mov	r2, r8
 800ae00:	464b      	mov	r3, r9
 800ae02:	f7f5 fa43 	bl	800028c <__adddf3>
 800ae06:	460b      	mov	r3, r1
 800ae08:	4979      	ldr	r1, [pc, #484]	; (800aff0 <_strtod_l+0xbd0>)
 800ae0a:	4a7b      	ldr	r2, [pc, #492]	; (800aff8 <_strtod_l+0xbd8>)
 800ae0c:	4019      	ands	r1, r3
 800ae0e:	4291      	cmp	r1, r2
 800ae10:	4680      	mov	r8, r0
 800ae12:	d944      	bls.n	800ae9e <_strtod_l+0xa7e>
 800ae14:	ee18 2a90 	vmov	r2, s17
 800ae18:	4b78      	ldr	r3, [pc, #480]	; (800affc <_strtod_l+0xbdc>)
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d104      	bne.n	800ae28 <_strtod_l+0xa08>
 800ae1e:	ee18 3a10 	vmov	r3, s16
 800ae22:	3301      	adds	r3, #1
 800ae24:	f43f ad40 	beq.w	800a8a8 <_strtod_l+0x488>
 800ae28:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800affc <_strtod_l+0xbdc>
 800ae2c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ae30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7fe fe6a 	bl	8009b0c <_Bfree>
 800ae38:	9905      	ldr	r1, [sp, #20]
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7fe fe66 	bl	8009b0c <_Bfree>
 800ae40:	4659      	mov	r1, fp
 800ae42:	4620      	mov	r0, r4
 800ae44:	f7fe fe62 	bl	8009b0c <_Bfree>
 800ae48:	4629      	mov	r1, r5
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7fe fe5e 	bl	8009b0c <_Bfree>
 800ae50:	e609      	b.n	800aa66 <_strtod_l+0x646>
 800ae52:	f1b8 0f01 	cmp.w	r8, #1
 800ae56:	d103      	bne.n	800ae60 <_strtod_l+0xa40>
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	f43f ad95 	beq.w	800a98a <_strtod_l+0x56a>
 800ae60:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800afb8 <_strtod_l+0xb98>
 800ae64:	4f60      	ldr	r7, [pc, #384]	; (800afe8 <_strtod_l+0xbc8>)
 800ae66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	e7ae      	b.n	800adcc <_strtod_l+0x9ac>
 800ae6e:	4f5f      	ldr	r7, [pc, #380]	; (800afec <_strtod_l+0xbcc>)
 800ae70:	2600      	movs	r6, #0
 800ae72:	e7a7      	b.n	800adc4 <_strtod_l+0x9a4>
 800ae74:	4b5d      	ldr	r3, [pc, #372]	; (800afec <_strtod_l+0xbcc>)
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f7f5 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae82:	4606      	mov	r6, r0
 800ae84:	460f      	mov	r7, r1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d09c      	beq.n	800adc4 <_strtod_l+0x9a4>
 800ae8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae8e:	e79d      	b.n	800adcc <_strtod_l+0x9ac>
 800ae90:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800afc0 <_strtod_l+0xba0>
 800ae94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae98:	ec57 6b17 	vmov	r6, r7, d7
 800ae9c:	e796      	b.n	800adcc <_strtod_l+0x9ac>
 800ae9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	46ca      	mov	sl, r9
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1c2      	bne.n	800ae30 <_strtod_l+0xa10>
 800aeaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aeae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeb0:	0d1b      	lsrs	r3, r3, #20
 800aeb2:	051b      	lsls	r3, r3, #20
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d1bb      	bne.n	800ae30 <_strtod_l+0xa10>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fefc 	bl	8000cb8 <__aeabi_d2lz>
 800aec0:	f7f5 fb6c 	bl	800059c <__aeabi_l2d>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 f9dc 	bl	8000288 <__aeabi_dsub>
 800aed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aed2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aed6:	ea43 0308 	orr.w	r3, r3, r8
 800aeda:	4313      	orrs	r3, r2
 800aedc:	4606      	mov	r6, r0
 800aede:	460f      	mov	r7, r1
 800aee0:	d054      	beq.n	800af8c <_strtod_l+0xb6c>
 800aee2:	a339      	add	r3, pc, #228	; (adr r3, 800afc8 <_strtod_l+0xba8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 fdf8 	bl	8000adc <__aeabi_dcmplt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f47f ace5 	bne.w	800a8bc <_strtod_l+0x49c>
 800aef2:	a337      	add	r3, pc, #220	; (adr r3, 800afd0 <_strtod_l+0xbb0>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 800af00:	2800      	cmp	r0, #0
 800af02:	d095      	beq.n	800ae30 <_strtod_l+0xa10>
 800af04:	e4da      	b.n	800a8bc <_strtod_l+0x49c>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	b333      	cbz	r3, 800af58 <_strtod_l+0xb38>
 800af0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af10:	d822      	bhi.n	800af58 <_strtod_l+0xb38>
 800af12:	a331      	add	r3, pc, #196	; (adr r3, 800afd8 <_strtod_l+0xbb8>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 fde8 	bl	8000af0 <__aeabi_dcmple>
 800af20:	b1a0      	cbz	r0, 800af4c <_strtod_l+0xb2c>
 800af22:	4639      	mov	r1, r7
 800af24:	4630      	mov	r0, r6
 800af26:	f7f5 fe3f 	bl	8000ba8 <__aeabi_d2uiz>
 800af2a:	2801      	cmp	r0, #1
 800af2c:	bf38      	it	cc
 800af2e:	2001      	movcc	r0, #1
 800af30:	f7f5 fae8 	bl	8000504 <__aeabi_ui2d>
 800af34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af36:	4606      	mov	r6, r0
 800af38:	460f      	mov	r7, r1
 800af3a:	bb23      	cbnz	r3, 800af86 <_strtod_l+0xb66>
 800af3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af40:	9010      	str	r0, [sp, #64]	; 0x40
 800af42:	9311      	str	r3, [sp, #68]	; 0x44
 800af44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800af4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	930f      	str	r3, [sp, #60]	; 0x3c
 800af58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af5c:	eeb0 0a48 	vmov.f32	s0, s16
 800af60:	eef0 0a68 	vmov.f32	s1, s17
 800af64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800af68:	f7ff f8fc 	bl	800a164 <__ulp>
 800af6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af70:	ec53 2b10 	vmov	r2, r3, d0
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	ec53 2b18 	vmov	r2, r3, d8
 800af7c:	f7f5 f986 	bl	800028c <__adddf3>
 800af80:	4680      	mov	r8, r0
 800af82:	4689      	mov	r9, r1
 800af84:	e78d      	b.n	800aea2 <_strtod_l+0xa82>
 800af86:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800af8a:	e7db      	b.n	800af44 <_strtod_l+0xb24>
 800af8c:	a314      	add	r3, pc, #80	; (adr r3, 800afe0 <_strtod_l+0xbc0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 fda3 	bl	8000adc <__aeabi_dcmplt>
 800af96:	e7b3      	b.n	800af00 <_strtod_l+0xae0>
 800af98:	2300      	movs	r3, #0
 800af9a:	930a      	str	r3, [sp, #40]	; 0x28
 800af9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	f7ff ba7c 	b.w	800a49e <_strtod_l+0x7e>
 800afa6:	2a65      	cmp	r2, #101	; 0x65
 800afa8:	f43f ab75 	beq.w	800a696 <_strtod_l+0x276>
 800afac:	2a45      	cmp	r2, #69	; 0x45
 800afae:	f43f ab72 	beq.w	800a696 <_strtod_l+0x276>
 800afb2:	2301      	movs	r3, #1
 800afb4:	f7ff bbaa 	b.w	800a70c <_strtod_l+0x2ec>
 800afb8:	00000000 	.word	0x00000000
 800afbc:	bff00000 	.word	0xbff00000
 800afc0:	00000000 	.word	0x00000000
 800afc4:	3ff00000 	.word	0x3ff00000
 800afc8:	94a03595 	.word	0x94a03595
 800afcc:	3fdfffff 	.word	0x3fdfffff
 800afd0:	35afe535 	.word	0x35afe535
 800afd4:	3fe00000 	.word	0x3fe00000
 800afd8:	ffc00000 	.word	0xffc00000
 800afdc:	41dfffff 	.word	0x41dfffff
 800afe0:	94a03595 	.word	0x94a03595
 800afe4:	3fcfffff 	.word	0x3fcfffff
 800afe8:	3ff00000 	.word	0x3ff00000
 800afec:	3fe00000 	.word	0x3fe00000
 800aff0:	7ff00000 	.word	0x7ff00000
 800aff4:	7fe00000 	.word	0x7fe00000
 800aff8:	7c9fffff 	.word	0x7c9fffff
 800affc:	7fefffff 	.word	0x7fefffff

0800b000 <_strtod_r>:
 800b000:	4b01      	ldr	r3, [pc, #4]	; (800b008 <_strtod_r+0x8>)
 800b002:	f7ff ba0d 	b.w	800a420 <_strtod_l>
 800b006:	bf00      	nop
 800b008:	20000068 	.word	0x20000068

0800b00c <_strtol_l.constprop.0>:
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b012:	d001      	beq.n	800b018 <_strtol_l.constprop.0+0xc>
 800b014:	2b24      	cmp	r3, #36	; 0x24
 800b016:	d906      	bls.n	800b026 <_strtol_l.constprop.0+0x1a>
 800b018:	f7fd fd88 	bl	8008b2c <__errno>
 800b01c:	2316      	movs	r3, #22
 800b01e:	6003      	str	r3, [r0, #0]
 800b020:	2000      	movs	r0, #0
 800b022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b026:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b10c <_strtol_l.constprop.0+0x100>
 800b02a:	460d      	mov	r5, r1
 800b02c:	462e      	mov	r6, r5
 800b02e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b032:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b036:	f017 0708 	ands.w	r7, r7, #8
 800b03a:	d1f7      	bne.n	800b02c <_strtol_l.constprop.0+0x20>
 800b03c:	2c2d      	cmp	r4, #45	; 0x2d
 800b03e:	d132      	bne.n	800b0a6 <_strtol_l.constprop.0+0x9a>
 800b040:	782c      	ldrb	r4, [r5, #0]
 800b042:	2701      	movs	r7, #1
 800b044:	1cb5      	adds	r5, r6, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d05b      	beq.n	800b102 <_strtol_l.constprop.0+0xf6>
 800b04a:	2b10      	cmp	r3, #16
 800b04c:	d109      	bne.n	800b062 <_strtol_l.constprop.0+0x56>
 800b04e:	2c30      	cmp	r4, #48	; 0x30
 800b050:	d107      	bne.n	800b062 <_strtol_l.constprop.0+0x56>
 800b052:	782c      	ldrb	r4, [r5, #0]
 800b054:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b058:	2c58      	cmp	r4, #88	; 0x58
 800b05a:	d14d      	bne.n	800b0f8 <_strtol_l.constprop.0+0xec>
 800b05c:	786c      	ldrb	r4, [r5, #1]
 800b05e:	2310      	movs	r3, #16
 800b060:	3502      	adds	r5, #2
 800b062:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b066:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b06a:	f04f 0e00 	mov.w	lr, #0
 800b06e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b072:	4676      	mov	r6, lr
 800b074:	fb03 8a19 	mls	sl, r3, r9, r8
 800b078:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b07c:	f1bc 0f09 	cmp.w	ip, #9
 800b080:	d816      	bhi.n	800b0b0 <_strtol_l.constprop.0+0xa4>
 800b082:	4664      	mov	r4, ip
 800b084:	42a3      	cmp	r3, r4
 800b086:	dd24      	ble.n	800b0d2 <_strtol_l.constprop.0+0xc6>
 800b088:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b08c:	d008      	beq.n	800b0a0 <_strtol_l.constprop.0+0x94>
 800b08e:	45b1      	cmp	r9, r6
 800b090:	d31c      	bcc.n	800b0cc <_strtol_l.constprop.0+0xc0>
 800b092:	d101      	bne.n	800b098 <_strtol_l.constprop.0+0x8c>
 800b094:	45a2      	cmp	sl, r4
 800b096:	db19      	blt.n	800b0cc <_strtol_l.constprop.0+0xc0>
 800b098:	fb06 4603 	mla	r6, r6, r3, r4
 800b09c:	f04f 0e01 	mov.w	lr, #1
 800b0a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a4:	e7e8      	b.n	800b078 <_strtol_l.constprop.0+0x6c>
 800b0a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b0a8:	bf04      	itt	eq
 800b0aa:	782c      	ldrbeq	r4, [r5, #0]
 800b0ac:	1cb5      	addeq	r5, r6, #2
 800b0ae:	e7ca      	b.n	800b046 <_strtol_l.constprop.0+0x3a>
 800b0b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b0b4:	f1bc 0f19 	cmp.w	ip, #25
 800b0b8:	d801      	bhi.n	800b0be <_strtol_l.constprop.0+0xb2>
 800b0ba:	3c37      	subs	r4, #55	; 0x37
 800b0bc:	e7e2      	b.n	800b084 <_strtol_l.constprop.0+0x78>
 800b0be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b0c2:	f1bc 0f19 	cmp.w	ip, #25
 800b0c6:	d804      	bhi.n	800b0d2 <_strtol_l.constprop.0+0xc6>
 800b0c8:	3c57      	subs	r4, #87	; 0x57
 800b0ca:	e7db      	b.n	800b084 <_strtol_l.constprop.0+0x78>
 800b0cc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b0d0:	e7e6      	b.n	800b0a0 <_strtol_l.constprop.0+0x94>
 800b0d2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b0d6:	d105      	bne.n	800b0e4 <_strtol_l.constprop.0+0xd8>
 800b0d8:	2322      	movs	r3, #34	; 0x22
 800b0da:	6003      	str	r3, [r0, #0]
 800b0dc:	4646      	mov	r6, r8
 800b0de:	b942      	cbnz	r2, 800b0f2 <_strtol_l.constprop.0+0xe6>
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	e79e      	b.n	800b022 <_strtol_l.constprop.0+0x16>
 800b0e4:	b107      	cbz	r7, 800b0e8 <_strtol_l.constprop.0+0xdc>
 800b0e6:	4276      	negs	r6, r6
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	d0f9      	beq.n	800b0e0 <_strtol_l.constprop.0+0xd4>
 800b0ec:	f1be 0f00 	cmp.w	lr, #0
 800b0f0:	d000      	beq.n	800b0f4 <_strtol_l.constprop.0+0xe8>
 800b0f2:	1e69      	subs	r1, r5, #1
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	e7f3      	b.n	800b0e0 <_strtol_l.constprop.0+0xd4>
 800b0f8:	2430      	movs	r4, #48	; 0x30
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1b1      	bne.n	800b062 <_strtol_l.constprop.0+0x56>
 800b0fe:	2308      	movs	r3, #8
 800b100:	e7af      	b.n	800b062 <_strtol_l.constprop.0+0x56>
 800b102:	2c30      	cmp	r4, #48	; 0x30
 800b104:	d0a5      	beq.n	800b052 <_strtol_l.constprop.0+0x46>
 800b106:	230a      	movs	r3, #10
 800b108:	e7ab      	b.n	800b062 <_strtol_l.constprop.0+0x56>
 800b10a:	bf00      	nop
 800b10c:	0800c631 	.word	0x0800c631

0800b110 <_strtol_r>:
 800b110:	f7ff bf7c 	b.w	800b00c <_strtol_l.constprop.0>

0800b114 <__ssputs_r>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	688e      	ldr	r6, [r1, #8]
 800b11a:	461f      	mov	r7, r3
 800b11c:	42be      	cmp	r6, r7
 800b11e:	680b      	ldr	r3, [r1, #0]
 800b120:	4682      	mov	sl, r0
 800b122:	460c      	mov	r4, r1
 800b124:	4690      	mov	r8, r2
 800b126:	d82c      	bhi.n	800b182 <__ssputs_r+0x6e>
 800b128:	898a      	ldrh	r2, [r1, #12]
 800b12a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b12e:	d026      	beq.n	800b17e <__ssputs_r+0x6a>
 800b130:	6965      	ldr	r5, [r4, #20]
 800b132:	6909      	ldr	r1, [r1, #16]
 800b134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b138:	eba3 0901 	sub.w	r9, r3, r1
 800b13c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b140:	1c7b      	adds	r3, r7, #1
 800b142:	444b      	add	r3, r9
 800b144:	106d      	asrs	r5, r5, #1
 800b146:	429d      	cmp	r5, r3
 800b148:	bf38      	it	cc
 800b14a:	461d      	movcc	r5, r3
 800b14c:	0553      	lsls	r3, r2, #21
 800b14e:	d527      	bpl.n	800b1a0 <__ssputs_r+0x8c>
 800b150:	4629      	mov	r1, r5
 800b152:	f7fe fc0f 	bl	8009974 <_malloc_r>
 800b156:	4606      	mov	r6, r0
 800b158:	b360      	cbz	r0, 800b1b4 <__ssputs_r+0xa0>
 800b15a:	6921      	ldr	r1, [r4, #16]
 800b15c:	464a      	mov	r2, r9
 800b15e:	f000 fa1b 	bl	800b598 <memcpy>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	6126      	str	r6, [r4, #16]
 800b170:	6165      	str	r5, [r4, #20]
 800b172:	444e      	add	r6, r9
 800b174:	eba5 0509 	sub.w	r5, r5, r9
 800b178:	6026      	str	r6, [r4, #0]
 800b17a:	60a5      	str	r5, [r4, #8]
 800b17c:	463e      	mov	r6, r7
 800b17e:	42be      	cmp	r6, r7
 800b180:	d900      	bls.n	800b184 <__ssputs_r+0x70>
 800b182:	463e      	mov	r6, r7
 800b184:	6820      	ldr	r0, [r4, #0]
 800b186:	4632      	mov	r2, r6
 800b188:	4641      	mov	r1, r8
 800b18a:	f000 f9c9 	bl	800b520 <memmove>
 800b18e:	68a3      	ldr	r3, [r4, #8]
 800b190:	1b9b      	subs	r3, r3, r6
 800b192:	60a3      	str	r3, [r4, #8]
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	4433      	add	r3, r6
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	2000      	movs	r0, #0
 800b19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a0:	462a      	mov	r2, r5
 800b1a2:	f000 fdae 	bl	800bd02 <_realloc_r>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d1e0      	bne.n	800b16e <__ssputs_r+0x5a>
 800b1ac:	6921      	ldr	r1, [r4, #16]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7fe fb6c 	bl	800988c <_free_r>
 800b1b4:	230c      	movs	r3, #12
 800b1b6:	f8ca 3000 	str.w	r3, [sl]
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1c6:	e7e9      	b.n	800b19c <__ssputs_r+0x88>

0800b1c8 <_svfiprintf_r>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	4698      	mov	r8, r3
 800b1ce:	898b      	ldrh	r3, [r1, #12]
 800b1d0:	061b      	lsls	r3, r3, #24
 800b1d2:	b09d      	sub	sp, #116	; 0x74
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	d50e      	bpl.n	800b1fa <_svfiprintf_r+0x32>
 800b1dc:	690b      	ldr	r3, [r1, #16]
 800b1de:	b963      	cbnz	r3, 800b1fa <_svfiprintf_r+0x32>
 800b1e0:	2140      	movs	r1, #64	; 0x40
 800b1e2:	f7fe fbc7 	bl	8009974 <_malloc_r>
 800b1e6:	6028      	str	r0, [r5, #0]
 800b1e8:	6128      	str	r0, [r5, #16]
 800b1ea:	b920      	cbnz	r0, 800b1f6 <_svfiprintf_r+0x2e>
 800b1ec:	230c      	movs	r3, #12
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1f4:	e0d0      	b.n	800b398 <_svfiprintf_r+0x1d0>
 800b1f6:	2340      	movs	r3, #64	; 0x40
 800b1f8:	616b      	str	r3, [r5, #20]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fe:	2320      	movs	r3, #32
 800b200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b204:	f8cd 800c 	str.w	r8, [sp, #12]
 800b208:	2330      	movs	r3, #48	; 0x30
 800b20a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3b0 <_svfiprintf_r+0x1e8>
 800b20e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b212:	f04f 0901 	mov.w	r9, #1
 800b216:	4623      	mov	r3, r4
 800b218:	469a      	mov	sl, r3
 800b21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21e:	b10a      	cbz	r2, 800b224 <_svfiprintf_r+0x5c>
 800b220:	2a25      	cmp	r2, #37	; 0x25
 800b222:	d1f9      	bne.n	800b218 <_svfiprintf_r+0x50>
 800b224:	ebba 0b04 	subs.w	fp, sl, r4
 800b228:	d00b      	beq.n	800b242 <_svfiprintf_r+0x7a>
 800b22a:	465b      	mov	r3, fp
 800b22c:	4622      	mov	r2, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff ff6f 	bl	800b114 <__ssputs_r>
 800b236:	3001      	adds	r0, #1
 800b238:	f000 80a9 	beq.w	800b38e <_svfiprintf_r+0x1c6>
 800b23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b23e:	445a      	add	r2, fp
 800b240:	9209      	str	r2, [sp, #36]	; 0x24
 800b242:	f89a 3000 	ldrb.w	r3, [sl]
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 80a1 	beq.w	800b38e <_svfiprintf_r+0x1c6>
 800b24c:	2300      	movs	r3, #0
 800b24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b256:	f10a 0a01 	add.w	sl, sl, #1
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	9307      	str	r3, [sp, #28]
 800b25e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b262:	931a      	str	r3, [sp, #104]	; 0x68
 800b264:	4654      	mov	r4, sl
 800b266:	2205      	movs	r2, #5
 800b268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26c:	4850      	ldr	r0, [pc, #320]	; (800b3b0 <_svfiprintf_r+0x1e8>)
 800b26e:	f7f4 ffaf 	bl	80001d0 <memchr>
 800b272:	9a04      	ldr	r2, [sp, #16]
 800b274:	b9d8      	cbnz	r0, 800b2ae <_svfiprintf_r+0xe6>
 800b276:	06d0      	lsls	r0, r2, #27
 800b278:	bf44      	itt	mi
 800b27a:	2320      	movmi	r3, #32
 800b27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b280:	0711      	lsls	r1, r2, #28
 800b282:	bf44      	itt	mi
 800b284:	232b      	movmi	r3, #43	; 0x2b
 800b286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b28a:	f89a 3000 	ldrb.w	r3, [sl]
 800b28e:	2b2a      	cmp	r3, #42	; 0x2a
 800b290:	d015      	beq.n	800b2be <_svfiprintf_r+0xf6>
 800b292:	9a07      	ldr	r2, [sp, #28]
 800b294:	4654      	mov	r4, sl
 800b296:	2000      	movs	r0, #0
 800b298:	f04f 0c0a 	mov.w	ip, #10
 800b29c:	4621      	mov	r1, r4
 800b29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a2:	3b30      	subs	r3, #48	; 0x30
 800b2a4:	2b09      	cmp	r3, #9
 800b2a6:	d94d      	bls.n	800b344 <_svfiprintf_r+0x17c>
 800b2a8:	b1b0      	cbz	r0, 800b2d8 <_svfiprintf_r+0x110>
 800b2aa:	9207      	str	r2, [sp, #28]
 800b2ac:	e014      	b.n	800b2d8 <_svfiprintf_r+0x110>
 800b2ae:	eba0 0308 	sub.w	r3, r0, r8
 800b2b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	46a2      	mov	sl, r4
 800b2bc:	e7d2      	b.n	800b264 <_svfiprintf_r+0x9c>
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	1d19      	adds	r1, r3, #4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	9103      	str	r1, [sp, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfbb      	ittet	lt
 800b2ca:	425b      	neglt	r3, r3
 800b2cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d0:	9307      	strge	r3, [sp, #28]
 800b2d2:	9307      	strlt	r3, [sp, #28]
 800b2d4:	bfb8      	it	lt
 800b2d6:	9204      	strlt	r2, [sp, #16]
 800b2d8:	7823      	ldrb	r3, [r4, #0]
 800b2da:	2b2e      	cmp	r3, #46	; 0x2e
 800b2dc:	d10c      	bne.n	800b2f8 <_svfiprintf_r+0x130>
 800b2de:	7863      	ldrb	r3, [r4, #1]
 800b2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e2:	d134      	bne.n	800b34e <_svfiprintf_r+0x186>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	1d1a      	adds	r2, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	9203      	str	r2, [sp, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bfb8      	it	lt
 800b2f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2f4:	3402      	adds	r4, #2
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b3c0 <_svfiprintf_r+0x1f8>
 800b2fc:	7821      	ldrb	r1, [r4, #0]
 800b2fe:	2203      	movs	r2, #3
 800b300:	4650      	mov	r0, sl
 800b302:	f7f4 ff65 	bl	80001d0 <memchr>
 800b306:	b138      	cbz	r0, 800b318 <_svfiprintf_r+0x150>
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	eba0 000a 	sub.w	r0, r0, sl
 800b30e:	2240      	movs	r2, #64	; 0x40
 800b310:	4082      	lsls	r2, r0
 800b312:	4313      	orrs	r3, r2
 800b314:	3401      	adds	r4, #1
 800b316:	9304      	str	r3, [sp, #16]
 800b318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31c:	4825      	ldr	r0, [pc, #148]	; (800b3b4 <_svfiprintf_r+0x1ec>)
 800b31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b322:	2206      	movs	r2, #6
 800b324:	f7f4 ff54 	bl	80001d0 <memchr>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d038      	beq.n	800b39e <_svfiprintf_r+0x1d6>
 800b32c:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <_svfiprintf_r+0x1f0>)
 800b32e:	bb1b      	cbnz	r3, 800b378 <_svfiprintf_r+0x1b0>
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	3307      	adds	r3, #7
 800b334:	f023 0307 	bic.w	r3, r3, #7
 800b338:	3308      	adds	r3, #8
 800b33a:	9303      	str	r3, [sp, #12]
 800b33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33e:	4433      	add	r3, r6
 800b340:	9309      	str	r3, [sp, #36]	; 0x24
 800b342:	e768      	b.n	800b216 <_svfiprintf_r+0x4e>
 800b344:	fb0c 3202 	mla	r2, ip, r2, r3
 800b348:	460c      	mov	r4, r1
 800b34a:	2001      	movs	r0, #1
 800b34c:	e7a6      	b.n	800b29c <_svfiprintf_r+0xd4>
 800b34e:	2300      	movs	r3, #0
 800b350:	3401      	adds	r4, #1
 800b352:	9305      	str	r3, [sp, #20]
 800b354:	4619      	mov	r1, r3
 800b356:	f04f 0c0a 	mov.w	ip, #10
 800b35a:	4620      	mov	r0, r4
 800b35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b360:	3a30      	subs	r2, #48	; 0x30
 800b362:	2a09      	cmp	r2, #9
 800b364:	d903      	bls.n	800b36e <_svfiprintf_r+0x1a6>
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0c6      	beq.n	800b2f8 <_svfiprintf_r+0x130>
 800b36a:	9105      	str	r1, [sp, #20]
 800b36c:	e7c4      	b.n	800b2f8 <_svfiprintf_r+0x130>
 800b36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b372:	4604      	mov	r4, r0
 800b374:	2301      	movs	r3, #1
 800b376:	e7f0      	b.n	800b35a <_svfiprintf_r+0x192>
 800b378:	ab03      	add	r3, sp, #12
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	462a      	mov	r2, r5
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <_svfiprintf_r+0x1f4>)
 800b380:	a904      	add	r1, sp, #16
 800b382:	4638      	mov	r0, r7
 800b384:	f7fc fc50 	bl	8007c28 <_printf_float>
 800b388:	1c42      	adds	r2, r0, #1
 800b38a:	4606      	mov	r6, r0
 800b38c:	d1d6      	bne.n	800b33c <_svfiprintf_r+0x174>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	065b      	lsls	r3, r3, #25
 800b392:	f53f af2d 	bmi.w	800b1f0 <_svfiprintf_r+0x28>
 800b396:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b398:	b01d      	add	sp, #116	; 0x74
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39e:	ab03      	add	r3, sp, #12
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <_svfiprintf_r+0x1f4>)
 800b3a6:	a904      	add	r1, sp, #16
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7fc fee1 	bl	8008170 <_printf_i>
 800b3ae:	e7eb      	b.n	800b388 <_svfiprintf_r+0x1c0>
 800b3b0:	0800c731 	.word	0x0800c731
 800b3b4:	0800c73b 	.word	0x0800c73b
 800b3b8:	08007c29 	.word	0x08007c29
 800b3bc:	0800b115 	.word	0x0800b115
 800b3c0:	0800c737 	.word	0x0800c737

0800b3c4 <__sflush_r>:
 800b3c4:	898a      	ldrh	r2, [r1, #12]
 800b3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	0710      	lsls	r0, r2, #28
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	d458      	bmi.n	800b484 <__sflush_r+0xc0>
 800b3d2:	684b      	ldr	r3, [r1, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dc05      	bgt.n	800b3e4 <__sflush_r+0x20>
 800b3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	dc02      	bgt.n	800b3e4 <__sflush_r+0x20>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	d0f9      	beq.n	800b3de <__sflush_r+0x1a>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3f0:	682f      	ldr	r7, [r5, #0]
 800b3f2:	6a21      	ldr	r1, [r4, #32]
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	d032      	beq.n	800b45e <__sflush_r+0x9a>
 800b3f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	075a      	lsls	r2, r3, #29
 800b3fe:	d505      	bpl.n	800b40c <__sflush_r+0x48>
 800b400:	6863      	ldr	r3, [r4, #4]
 800b402:	1ac0      	subs	r0, r0, r3
 800b404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b406:	b10b      	cbz	r3, 800b40c <__sflush_r+0x48>
 800b408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b40a:	1ac0      	subs	r0, r0, r3
 800b40c:	2300      	movs	r3, #0
 800b40e:	4602      	mov	r2, r0
 800b410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b412:	6a21      	ldr	r1, [r4, #32]
 800b414:	4628      	mov	r0, r5
 800b416:	47b0      	blx	r6
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	d106      	bne.n	800b42c <__sflush_r+0x68>
 800b41e:	6829      	ldr	r1, [r5, #0]
 800b420:	291d      	cmp	r1, #29
 800b422:	d82b      	bhi.n	800b47c <__sflush_r+0xb8>
 800b424:	4a29      	ldr	r2, [pc, #164]	; (800b4cc <__sflush_r+0x108>)
 800b426:	410a      	asrs	r2, r1
 800b428:	07d6      	lsls	r6, r2, #31
 800b42a:	d427      	bmi.n	800b47c <__sflush_r+0xb8>
 800b42c:	2200      	movs	r2, #0
 800b42e:	6062      	str	r2, [r4, #4]
 800b430:	04d9      	lsls	r1, r3, #19
 800b432:	6922      	ldr	r2, [r4, #16]
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	d504      	bpl.n	800b442 <__sflush_r+0x7e>
 800b438:	1c42      	adds	r2, r0, #1
 800b43a:	d101      	bne.n	800b440 <__sflush_r+0x7c>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b903      	cbnz	r3, 800b442 <__sflush_r+0x7e>
 800b440:	6560      	str	r0, [r4, #84]	; 0x54
 800b442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b444:	602f      	str	r7, [r5, #0]
 800b446:	2900      	cmp	r1, #0
 800b448:	d0c9      	beq.n	800b3de <__sflush_r+0x1a>
 800b44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b44e:	4299      	cmp	r1, r3
 800b450:	d002      	beq.n	800b458 <__sflush_r+0x94>
 800b452:	4628      	mov	r0, r5
 800b454:	f7fe fa1a 	bl	800988c <_free_r>
 800b458:	2000      	movs	r0, #0
 800b45a:	6360      	str	r0, [r4, #52]	; 0x34
 800b45c:	e7c0      	b.n	800b3e0 <__sflush_r+0x1c>
 800b45e:	2301      	movs	r3, #1
 800b460:	4628      	mov	r0, r5
 800b462:	47b0      	blx	r6
 800b464:	1c41      	adds	r1, r0, #1
 800b466:	d1c8      	bne.n	800b3fa <__sflush_r+0x36>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0c5      	beq.n	800b3fa <__sflush_r+0x36>
 800b46e:	2b1d      	cmp	r3, #29
 800b470:	d001      	beq.n	800b476 <__sflush_r+0xb2>
 800b472:	2b16      	cmp	r3, #22
 800b474:	d101      	bne.n	800b47a <__sflush_r+0xb6>
 800b476:	602f      	str	r7, [r5, #0]
 800b478:	e7b1      	b.n	800b3de <__sflush_r+0x1a>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	e7ad      	b.n	800b3e0 <__sflush_r+0x1c>
 800b484:	690f      	ldr	r7, [r1, #16]
 800b486:	2f00      	cmp	r7, #0
 800b488:	d0a9      	beq.n	800b3de <__sflush_r+0x1a>
 800b48a:	0793      	lsls	r3, r2, #30
 800b48c:	680e      	ldr	r6, [r1, #0]
 800b48e:	bf08      	it	eq
 800b490:	694b      	ldreq	r3, [r1, #20]
 800b492:	600f      	str	r7, [r1, #0]
 800b494:	bf18      	it	ne
 800b496:	2300      	movne	r3, #0
 800b498:	eba6 0807 	sub.w	r8, r6, r7
 800b49c:	608b      	str	r3, [r1, #8]
 800b49e:	f1b8 0f00 	cmp.w	r8, #0
 800b4a2:	dd9c      	ble.n	800b3de <__sflush_r+0x1a>
 800b4a4:	6a21      	ldr	r1, [r4, #32]
 800b4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4a8:	4643      	mov	r3, r8
 800b4aa:	463a      	mov	r2, r7
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b0      	blx	r6
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	dc06      	bgt.n	800b4c2 <__sflush_r+0xfe>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4c0:	e78e      	b.n	800b3e0 <__sflush_r+0x1c>
 800b4c2:	4407      	add	r7, r0
 800b4c4:	eba8 0800 	sub.w	r8, r8, r0
 800b4c8:	e7e9      	b.n	800b49e <__sflush_r+0xda>
 800b4ca:	bf00      	nop
 800b4cc:	dfbffffe 	.word	0xdfbffffe

0800b4d0 <_fflush_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	690b      	ldr	r3, [r1, #16]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	b913      	cbnz	r3, 800b4e0 <_fflush_r+0x10>
 800b4da:	2500      	movs	r5, #0
 800b4dc:	4628      	mov	r0, r5
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	b118      	cbz	r0, 800b4ea <_fflush_r+0x1a>
 800b4e2:	6a03      	ldr	r3, [r0, #32]
 800b4e4:	b90b      	cbnz	r3, 800b4ea <_fflush_r+0x1a>
 800b4e6:	f7fd fa01 	bl	80088ec <__sinit>
 800b4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0f3      	beq.n	800b4da <_fflush_r+0xa>
 800b4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4f4:	07d0      	lsls	r0, r2, #31
 800b4f6:	d404      	bmi.n	800b502 <_fflush_r+0x32>
 800b4f8:	0599      	lsls	r1, r3, #22
 800b4fa:	d402      	bmi.n	800b502 <_fflush_r+0x32>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4fe:	f7fd fb40 	bl	8008b82 <__retarget_lock_acquire_recursive>
 800b502:	4628      	mov	r0, r5
 800b504:	4621      	mov	r1, r4
 800b506:	f7ff ff5d 	bl	800b3c4 <__sflush_r>
 800b50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b50c:	07da      	lsls	r2, r3, #31
 800b50e:	4605      	mov	r5, r0
 800b510:	d4e4      	bmi.n	800b4dc <_fflush_r+0xc>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	059b      	lsls	r3, r3, #22
 800b516:	d4e1      	bmi.n	800b4dc <_fflush_r+0xc>
 800b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51a:	f7fd fb33 	bl	8008b84 <__retarget_lock_release_recursive>
 800b51e:	e7dd      	b.n	800b4dc <_fflush_r+0xc>

0800b520 <memmove>:
 800b520:	4288      	cmp	r0, r1
 800b522:	b510      	push	{r4, lr}
 800b524:	eb01 0402 	add.w	r4, r1, r2
 800b528:	d902      	bls.n	800b530 <memmove+0x10>
 800b52a:	4284      	cmp	r4, r0
 800b52c:	4623      	mov	r3, r4
 800b52e:	d807      	bhi.n	800b540 <memmove+0x20>
 800b530:	1e43      	subs	r3, r0, #1
 800b532:	42a1      	cmp	r1, r4
 800b534:	d008      	beq.n	800b548 <memmove+0x28>
 800b536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b53a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b53e:	e7f8      	b.n	800b532 <memmove+0x12>
 800b540:	4402      	add	r2, r0
 800b542:	4601      	mov	r1, r0
 800b544:	428a      	cmp	r2, r1
 800b546:	d100      	bne.n	800b54a <memmove+0x2a>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b54e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b552:	e7f7      	b.n	800b544 <memmove+0x24>

0800b554 <strncmp>:
 800b554:	b510      	push	{r4, lr}
 800b556:	b16a      	cbz	r2, 800b574 <strncmp+0x20>
 800b558:	3901      	subs	r1, #1
 800b55a:	1884      	adds	r4, r0, r2
 800b55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b560:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b564:	429a      	cmp	r2, r3
 800b566:	d103      	bne.n	800b570 <strncmp+0x1c>
 800b568:	42a0      	cmp	r0, r4
 800b56a:	d001      	beq.n	800b570 <strncmp+0x1c>
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	d1f5      	bne.n	800b55c <strncmp+0x8>
 800b570:	1ad0      	subs	r0, r2, r3
 800b572:	bd10      	pop	{r4, pc}
 800b574:	4610      	mov	r0, r2
 800b576:	e7fc      	b.n	800b572 <strncmp+0x1e>

0800b578 <_sbrk_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	; (800b594 <_sbrk_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f6 fc18 	bl	8001db8 <_sbrk>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_sbrk_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_sbrk_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	2000054c 	.word	0x2000054c

0800b598 <memcpy>:
 800b598:	440a      	add	r2, r1
 800b59a:	4291      	cmp	r1, r2
 800b59c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5a0:	d100      	bne.n	800b5a4 <memcpy+0xc>
 800b5a2:	4770      	bx	lr
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ae:	4291      	cmp	r1, r2
 800b5b0:	d1f9      	bne.n	800b5a6 <memcpy+0xe>
 800b5b2:	bd10      	pop	{r4, pc}
 800b5b4:	0000      	movs	r0, r0
	...

0800b5b8 <nan>:
 800b5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5c0 <nan+0x8>
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	00000000 	.word	0x00000000
 800b5c4:	7ff80000 	.word	0x7ff80000

0800b5c8 <__assert_func>:
 800b5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ca:	4614      	mov	r4, r2
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <__assert_func+0x2c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	68d8      	ldr	r0, [r3, #12]
 800b5d6:	b14c      	cbz	r4, 800b5ec <__assert_func+0x24>
 800b5d8:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <__assert_func+0x30>)
 800b5da:	9100      	str	r1, [sp, #0]
 800b5dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5e0:	4906      	ldr	r1, [pc, #24]	; (800b5fc <__assert_func+0x34>)
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f000 fbca 	bl	800bd7c <fiprintf>
 800b5e8:	f000 fbda 	bl	800bda0 <abort>
 800b5ec:	4b04      	ldr	r3, [pc, #16]	; (800b600 <__assert_func+0x38>)
 800b5ee:	461c      	mov	r4, r3
 800b5f0:	e7f3      	b.n	800b5da <__assert_func+0x12>
 800b5f2:	bf00      	nop
 800b5f4:	20000064 	.word	0x20000064
 800b5f8:	0800c74a 	.word	0x0800c74a
 800b5fc:	0800c757 	.word	0x0800c757
 800b600:	0800c785 	.word	0x0800c785

0800b604 <_calloc_r>:
 800b604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b606:	fba1 2402 	umull	r2, r4, r1, r2
 800b60a:	b94c      	cbnz	r4, 800b620 <_calloc_r+0x1c>
 800b60c:	4611      	mov	r1, r2
 800b60e:	9201      	str	r2, [sp, #4]
 800b610:	f7fe f9b0 	bl	8009974 <_malloc_r>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	4605      	mov	r5, r0
 800b618:	b930      	cbnz	r0, 800b628 <_calloc_r+0x24>
 800b61a:	4628      	mov	r0, r5
 800b61c:	b003      	add	sp, #12
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	220c      	movs	r2, #12
 800b622:	6002      	str	r2, [r0, #0]
 800b624:	2500      	movs	r5, #0
 800b626:	e7f8      	b.n	800b61a <_calloc_r+0x16>
 800b628:	4621      	mov	r1, r4
 800b62a:	f7fd fa2c 	bl	8008a86 <memset>
 800b62e:	e7f4      	b.n	800b61a <_calloc_r+0x16>

0800b630 <rshift>:
 800b630:	6903      	ldr	r3, [r0, #16]
 800b632:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b636:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b63a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b63e:	f100 0414 	add.w	r4, r0, #20
 800b642:	dd45      	ble.n	800b6d0 <rshift+0xa0>
 800b644:	f011 011f 	ands.w	r1, r1, #31
 800b648:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b64c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b650:	d10c      	bne.n	800b66c <rshift+0x3c>
 800b652:	f100 0710 	add.w	r7, r0, #16
 800b656:	4629      	mov	r1, r5
 800b658:	42b1      	cmp	r1, r6
 800b65a:	d334      	bcc.n	800b6c6 <rshift+0x96>
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	1eea      	subs	r2, r5, #3
 800b662:	4296      	cmp	r6, r2
 800b664:	bf38      	it	cc
 800b666:	2300      	movcc	r3, #0
 800b668:	4423      	add	r3, r4
 800b66a:	e015      	b.n	800b698 <rshift+0x68>
 800b66c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b670:	f1c1 0820 	rsb	r8, r1, #32
 800b674:	40cf      	lsrs	r7, r1
 800b676:	f105 0e04 	add.w	lr, r5, #4
 800b67a:	46a1      	mov	r9, r4
 800b67c:	4576      	cmp	r6, lr
 800b67e:	46f4      	mov	ip, lr
 800b680:	d815      	bhi.n	800b6ae <rshift+0x7e>
 800b682:	1a9a      	subs	r2, r3, r2
 800b684:	0092      	lsls	r2, r2, #2
 800b686:	3a04      	subs	r2, #4
 800b688:	3501      	adds	r5, #1
 800b68a:	42ae      	cmp	r6, r5
 800b68c:	bf38      	it	cc
 800b68e:	2200      	movcc	r2, #0
 800b690:	18a3      	adds	r3, r4, r2
 800b692:	50a7      	str	r7, [r4, r2]
 800b694:	b107      	cbz	r7, 800b698 <rshift+0x68>
 800b696:	3304      	adds	r3, #4
 800b698:	1b1a      	subs	r2, r3, r4
 800b69a:	42a3      	cmp	r3, r4
 800b69c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6a0:	bf08      	it	eq
 800b6a2:	2300      	moveq	r3, #0
 800b6a4:	6102      	str	r2, [r0, #16]
 800b6a6:	bf08      	it	eq
 800b6a8:	6143      	streq	r3, [r0, #20]
 800b6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ae:	f8dc c000 	ldr.w	ip, [ip]
 800b6b2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6b6:	ea4c 0707 	orr.w	r7, ip, r7
 800b6ba:	f849 7b04 	str.w	r7, [r9], #4
 800b6be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6c2:	40cf      	lsrs	r7, r1
 800b6c4:	e7da      	b.n	800b67c <rshift+0x4c>
 800b6c6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6ca:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6ce:	e7c3      	b.n	800b658 <rshift+0x28>
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	e7e1      	b.n	800b698 <rshift+0x68>

0800b6d4 <__hexdig_fun>:
 800b6d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b6d8:	2b09      	cmp	r3, #9
 800b6da:	d802      	bhi.n	800b6e2 <__hexdig_fun+0xe>
 800b6dc:	3820      	subs	r0, #32
 800b6de:	b2c0      	uxtb	r0, r0
 800b6e0:	4770      	bx	lr
 800b6e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	d801      	bhi.n	800b6ee <__hexdig_fun+0x1a>
 800b6ea:	3847      	subs	r0, #71	; 0x47
 800b6ec:	e7f7      	b.n	800b6de <__hexdig_fun+0xa>
 800b6ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6f2:	2b05      	cmp	r3, #5
 800b6f4:	d801      	bhi.n	800b6fa <__hexdig_fun+0x26>
 800b6f6:	3827      	subs	r0, #39	; 0x27
 800b6f8:	e7f1      	b.n	800b6de <__hexdig_fun+0xa>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	4770      	bx	lr
	...

0800b700 <__gethex>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	4617      	mov	r7, r2
 800b706:	680a      	ldr	r2, [r1, #0]
 800b708:	b085      	sub	sp, #20
 800b70a:	f102 0b02 	add.w	fp, r2, #2
 800b70e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b712:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b716:	4681      	mov	r9, r0
 800b718:	468a      	mov	sl, r1
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	32fe      	adds	r2, #254	; 0xfe
 800b71e:	eb02 030b 	add.w	r3, r2, fp
 800b722:	46d8      	mov	r8, fp
 800b724:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	2830      	cmp	r0, #48	; 0x30
 800b72c:	d0f7      	beq.n	800b71e <__gethex+0x1e>
 800b72e:	f7ff ffd1 	bl	800b6d4 <__hexdig_fun>
 800b732:	4604      	mov	r4, r0
 800b734:	2800      	cmp	r0, #0
 800b736:	d138      	bne.n	800b7aa <__gethex+0xaa>
 800b738:	49a7      	ldr	r1, [pc, #668]	; (800b9d8 <__gethex+0x2d8>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7ff ff09 	bl	800b554 <strncmp>
 800b742:	4606      	mov	r6, r0
 800b744:	2800      	cmp	r0, #0
 800b746:	d169      	bne.n	800b81c <__gethex+0x11c>
 800b748:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b74c:	465d      	mov	r5, fp
 800b74e:	f7ff ffc1 	bl	800b6d4 <__hexdig_fun>
 800b752:	2800      	cmp	r0, #0
 800b754:	d064      	beq.n	800b820 <__gethex+0x120>
 800b756:	465a      	mov	r2, fp
 800b758:	7810      	ldrb	r0, [r2, #0]
 800b75a:	2830      	cmp	r0, #48	; 0x30
 800b75c:	4690      	mov	r8, r2
 800b75e:	f102 0201 	add.w	r2, r2, #1
 800b762:	d0f9      	beq.n	800b758 <__gethex+0x58>
 800b764:	f7ff ffb6 	bl	800b6d4 <__hexdig_fun>
 800b768:	2301      	movs	r3, #1
 800b76a:	fab0 f480 	clz	r4, r0
 800b76e:	0964      	lsrs	r4, r4, #5
 800b770:	465e      	mov	r6, fp
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	4642      	mov	r2, r8
 800b776:	4615      	mov	r5, r2
 800b778:	3201      	adds	r2, #1
 800b77a:	7828      	ldrb	r0, [r5, #0]
 800b77c:	f7ff ffaa 	bl	800b6d4 <__hexdig_fun>
 800b780:	2800      	cmp	r0, #0
 800b782:	d1f8      	bne.n	800b776 <__gethex+0x76>
 800b784:	4994      	ldr	r1, [pc, #592]	; (800b9d8 <__gethex+0x2d8>)
 800b786:	2201      	movs	r2, #1
 800b788:	4628      	mov	r0, r5
 800b78a:	f7ff fee3 	bl	800b554 <strncmp>
 800b78e:	b978      	cbnz	r0, 800b7b0 <__gethex+0xb0>
 800b790:	b946      	cbnz	r6, 800b7a4 <__gethex+0xa4>
 800b792:	1c6e      	adds	r6, r5, #1
 800b794:	4632      	mov	r2, r6
 800b796:	4615      	mov	r5, r2
 800b798:	3201      	adds	r2, #1
 800b79a:	7828      	ldrb	r0, [r5, #0]
 800b79c:	f7ff ff9a 	bl	800b6d4 <__hexdig_fun>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1f8      	bne.n	800b796 <__gethex+0x96>
 800b7a4:	1b73      	subs	r3, r6, r5
 800b7a6:	009e      	lsls	r6, r3, #2
 800b7a8:	e004      	b.n	800b7b4 <__gethex+0xb4>
 800b7aa:	2400      	movs	r4, #0
 800b7ac:	4626      	mov	r6, r4
 800b7ae:	e7e1      	b.n	800b774 <__gethex+0x74>
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	d1f7      	bne.n	800b7a4 <__gethex+0xa4>
 800b7b4:	782b      	ldrb	r3, [r5, #0]
 800b7b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7ba:	2b50      	cmp	r3, #80	; 0x50
 800b7bc:	d13d      	bne.n	800b83a <__gethex+0x13a>
 800b7be:	786b      	ldrb	r3, [r5, #1]
 800b7c0:	2b2b      	cmp	r3, #43	; 0x2b
 800b7c2:	d02f      	beq.n	800b824 <__gethex+0x124>
 800b7c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b7c6:	d031      	beq.n	800b82c <__gethex+0x12c>
 800b7c8:	1c69      	adds	r1, r5, #1
 800b7ca:	f04f 0b00 	mov.w	fp, #0
 800b7ce:	7808      	ldrb	r0, [r1, #0]
 800b7d0:	f7ff ff80 	bl	800b6d4 <__hexdig_fun>
 800b7d4:	1e42      	subs	r2, r0, #1
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	2a18      	cmp	r2, #24
 800b7da:	d82e      	bhi.n	800b83a <__gethex+0x13a>
 800b7dc:	f1a0 0210 	sub.w	r2, r0, #16
 800b7e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7e4:	f7ff ff76 	bl	800b6d4 <__hexdig_fun>
 800b7e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b7ec:	fa5f fc8c 	uxtb.w	ip, ip
 800b7f0:	f1bc 0f18 	cmp.w	ip, #24
 800b7f4:	d91d      	bls.n	800b832 <__gethex+0x132>
 800b7f6:	f1bb 0f00 	cmp.w	fp, #0
 800b7fa:	d000      	beq.n	800b7fe <__gethex+0xfe>
 800b7fc:	4252      	negs	r2, r2
 800b7fe:	4416      	add	r6, r2
 800b800:	f8ca 1000 	str.w	r1, [sl]
 800b804:	b1dc      	cbz	r4, 800b83e <__gethex+0x13e>
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	bf14      	ite	ne
 800b80c:	f04f 0800 	movne.w	r8, #0
 800b810:	f04f 0806 	moveq.w	r8, #6
 800b814:	4640      	mov	r0, r8
 800b816:	b005      	add	sp, #20
 800b818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81c:	4645      	mov	r5, r8
 800b81e:	4626      	mov	r6, r4
 800b820:	2401      	movs	r4, #1
 800b822:	e7c7      	b.n	800b7b4 <__gethex+0xb4>
 800b824:	f04f 0b00 	mov.w	fp, #0
 800b828:	1ca9      	adds	r1, r5, #2
 800b82a:	e7d0      	b.n	800b7ce <__gethex+0xce>
 800b82c:	f04f 0b01 	mov.w	fp, #1
 800b830:	e7fa      	b.n	800b828 <__gethex+0x128>
 800b832:	230a      	movs	r3, #10
 800b834:	fb03 0002 	mla	r0, r3, r2, r0
 800b838:	e7d0      	b.n	800b7dc <__gethex+0xdc>
 800b83a:	4629      	mov	r1, r5
 800b83c:	e7e0      	b.n	800b800 <__gethex+0x100>
 800b83e:	eba5 0308 	sub.w	r3, r5, r8
 800b842:	3b01      	subs	r3, #1
 800b844:	4621      	mov	r1, r4
 800b846:	2b07      	cmp	r3, #7
 800b848:	dc0a      	bgt.n	800b860 <__gethex+0x160>
 800b84a:	4648      	mov	r0, r9
 800b84c:	f7fe f91e 	bl	8009a8c <_Balloc>
 800b850:	4604      	mov	r4, r0
 800b852:	b940      	cbnz	r0, 800b866 <__gethex+0x166>
 800b854:	4b61      	ldr	r3, [pc, #388]	; (800b9dc <__gethex+0x2dc>)
 800b856:	4602      	mov	r2, r0
 800b858:	21e4      	movs	r1, #228	; 0xe4
 800b85a:	4861      	ldr	r0, [pc, #388]	; (800b9e0 <__gethex+0x2e0>)
 800b85c:	f7ff feb4 	bl	800b5c8 <__assert_func>
 800b860:	3101      	adds	r1, #1
 800b862:	105b      	asrs	r3, r3, #1
 800b864:	e7ef      	b.n	800b846 <__gethex+0x146>
 800b866:	f100 0a14 	add.w	sl, r0, #20
 800b86a:	2300      	movs	r3, #0
 800b86c:	495a      	ldr	r1, [pc, #360]	; (800b9d8 <__gethex+0x2d8>)
 800b86e:	f8cd a004 	str.w	sl, [sp, #4]
 800b872:	469b      	mov	fp, r3
 800b874:	45a8      	cmp	r8, r5
 800b876:	d342      	bcc.n	800b8fe <__gethex+0x1fe>
 800b878:	9801      	ldr	r0, [sp, #4]
 800b87a:	f840 bb04 	str.w	fp, [r0], #4
 800b87e:	eba0 000a 	sub.w	r0, r0, sl
 800b882:	1080      	asrs	r0, r0, #2
 800b884:	6120      	str	r0, [r4, #16]
 800b886:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b88a:	4658      	mov	r0, fp
 800b88c:	f7fe f9f0 	bl	8009c70 <__hi0bits>
 800b890:	683d      	ldr	r5, [r7, #0]
 800b892:	eba8 0000 	sub.w	r0, r8, r0
 800b896:	42a8      	cmp	r0, r5
 800b898:	dd59      	ble.n	800b94e <__gethex+0x24e>
 800b89a:	eba0 0805 	sub.w	r8, r0, r5
 800b89e:	4641      	mov	r1, r8
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7fe fd7f 	bl	800a3a4 <__any_on>
 800b8a6:	4683      	mov	fp, r0
 800b8a8:	b1b8      	cbz	r0, 800b8da <__gethex+0x1da>
 800b8aa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800b8ae:	1159      	asrs	r1, r3, #5
 800b8b0:	f003 021f 	and.w	r2, r3, #31
 800b8b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b8b8:	f04f 0b01 	mov.w	fp, #1
 800b8bc:	fa0b f202 	lsl.w	r2, fp, r2
 800b8c0:	420a      	tst	r2, r1
 800b8c2:	d00a      	beq.n	800b8da <__gethex+0x1da>
 800b8c4:	455b      	cmp	r3, fp
 800b8c6:	dd06      	ble.n	800b8d6 <__gethex+0x1d6>
 800b8c8:	f1a8 0102 	sub.w	r1, r8, #2
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7fe fd69 	bl	800a3a4 <__any_on>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d138      	bne.n	800b948 <__gethex+0x248>
 800b8d6:	f04f 0b02 	mov.w	fp, #2
 800b8da:	4641      	mov	r1, r8
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff fea7 	bl	800b630 <rshift>
 800b8e2:	4446      	add	r6, r8
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	42b3      	cmp	r3, r6
 800b8e8:	da41      	bge.n	800b96e <__gethex+0x26e>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f7fe f90d 	bl	8009b0c <_Bfree>
 800b8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b8fc:	e78a      	b.n	800b814 <__gethex+0x114>
 800b8fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b902:	2a2e      	cmp	r2, #46	; 0x2e
 800b904:	d014      	beq.n	800b930 <__gethex+0x230>
 800b906:	2b20      	cmp	r3, #32
 800b908:	d106      	bne.n	800b918 <__gethex+0x218>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	f843 bb04 	str.w	fp, [r3], #4
 800b910:	f04f 0b00 	mov.w	fp, #0
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	465b      	mov	r3, fp
 800b918:	7828      	ldrb	r0, [r5, #0]
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	f7ff feda 	bl	800b6d4 <__hexdig_fun>
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	f000 000f 	and.w	r0, r0, #15
 800b926:	4098      	lsls	r0, r3
 800b928:	ea4b 0b00 	orr.w	fp, fp, r0
 800b92c:	3304      	adds	r3, #4
 800b92e:	e7a1      	b.n	800b874 <__gethex+0x174>
 800b930:	45a8      	cmp	r8, r5
 800b932:	d8e8      	bhi.n	800b906 <__gethex+0x206>
 800b934:	2201      	movs	r2, #1
 800b936:	4628      	mov	r0, r5
 800b938:	9303      	str	r3, [sp, #12]
 800b93a:	f7ff fe0b 	bl	800b554 <strncmp>
 800b93e:	4926      	ldr	r1, [pc, #152]	; (800b9d8 <__gethex+0x2d8>)
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	2800      	cmp	r0, #0
 800b944:	d1df      	bne.n	800b906 <__gethex+0x206>
 800b946:	e795      	b.n	800b874 <__gethex+0x174>
 800b948:	f04f 0b03 	mov.w	fp, #3
 800b94c:	e7c5      	b.n	800b8da <__gethex+0x1da>
 800b94e:	da0b      	bge.n	800b968 <__gethex+0x268>
 800b950:	eba5 0800 	sub.w	r8, r5, r0
 800b954:	4621      	mov	r1, r4
 800b956:	4642      	mov	r2, r8
 800b958:	4648      	mov	r0, r9
 800b95a:	f7fe faf1 	bl	8009f40 <__lshift>
 800b95e:	eba6 0608 	sub.w	r6, r6, r8
 800b962:	4604      	mov	r4, r0
 800b964:	f100 0a14 	add.w	sl, r0, #20
 800b968:	f04f 0b00 	mov.w	fp, #0
 800b96c:	e7ba      	b.n	800b8e4 <__gethex+0x1e4>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	42b3      	cmp	r3, r6
 800b972:	dd73      	ble.n	800ba5c <__gethex+0x35c>
 800b974:	1b9e      	subs	r6, r3, r6
 800b976:	42b5      	cmp	r5, r6
 800b978:	dc34      	bgt.n	800b9e4 <__gethex+0x2e4>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d023      	beq.n	800b9c8 <__gethex+0x2c8>
 800b980:	2b03      	cmp	r3, #3
 800b982:	d025      	beq.n	800b9d0 <__gethex+0x2d0>
 800b984:	2b01      	cmp	r3, #1
 800b986:	d115      	bne.n	800b9b4 <__gethex+0x2b4>
 800b988:	42b5      	cmp	r5, r6
 800b98a:	d113      	bne.n	800b9b4 <__gethex+0x2b4>
 800b98c:	2d01      	cmp	r5, #1
 800b98e:	d10b      	bne.n	800b9a8 <__gethex+0x2a8>
 800b990:	9a02      	ldr	r2, [sp, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	2301      	movs	r3, #1
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	f8ca 3000 	str.w	r3, [sl]
 800b99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9a0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b9a4:	601c      	str	r4, [r3, #0]
 800b9a6:	e735      	b.n	800b814 <__gethex+0x114>
 800b9a8:	1e69      	subs	r1, r5, #1
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f7fe fcfa 	bl	800a3a4 <__any_on>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1ed      	bne.n	800b990 <__gethex+0x290>
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4648      	mov	r0, r9
 800b9b8:	f7fe f8a8 	bl	8009b0c <_Bfree>
 800b9bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b9c6:	e725      	b.n	800b814 <__gethex+0x114>
 800b9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1f2      	bne.n	800b9b4 <__gethex+0x2b4>
 800b9ce:	e7df      	b.n	800b990 <__gethex+0x290>
 800b9d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1dc      	bne.n	800b990 <__gethex+0x290>
 800b9d6:	e7ed      	b.n	800b9b4 <__gethex+0x2b4>
 800b9d8:	0800c5dc 	.word	0x0800c5dc
 800b9dc:	0800c475 	.word	0x0800c475
 800b9e0:	0800c786 	.word	0x0800c786
 800b9e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800b9e8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ec:	d133      	bne.n	800ba56 <__gethex+0x356>
 800b9ee:	f1b8 0f00 	cmp.w	r8, #0
 800b9f2:	d004      	beq.n	800b9fe <__gethex+0x2fe>
 800b9f4:	4641      	mov	r1, r8
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f7fe fcd4 	bl	800a3a4 <__any_on>
 800b9fc:	4683      	mov	fp, r0
 800b9fe:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ba02:	2301      	movs	r3, #1
 800ba04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba08:	f008 081f 	and.w	r8, r8, #31
 800ba0c:	fa03 f308 	lsl.w	r3, r3, r8
 800ba10:	4213      	tst	r3, r2
 800ba12:	4631      	mov	r1, r6
 800ba14:	4620      	mov	r0, r4
 800ba16:	bf18      	it	ne
 800ba18:	f04b 0b02 	orrne.w	fp, fp, #2
 800ba1c:	1bad      	subs	r5, r5, r6
 800ba1e:	f7ff fe07 	bl	800b630 <rshift>
 800ba22:	687e      	ldr	r6, [r7, #4]
 800ba24:	f04f 0802 	mov.w	r8, #2
 800ba28:	f1bb 0f00 	cmp.w	fp, #0
 800ba2c:	d04a      	beq.n	800bac4 <__gethex+0x3c4>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d016      	beq.n	800ba62 <__gethex+0x362>
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d018      	beq.n	800ba6a <__gethex+0x36a>
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d109      	bne.n	800ba50 <__gethex+0x350>
 800ba3c:	f01b 0f02 	tst.w	fp, #2
 800ba40:	d006      	beq.n	800ba50 <__gethex+0x350>
 800ba42:	f8da 3000 	ldr.w	r3, [sl]
 800ba46:	ea4b 0b03 	orr.w	fp, fp, r3
 800ba4a:	f01b 0f01 	tst.w	fp, #1
 800ba4e:	d10f      	bne.n	800ba70 <__gethex+0x370>
 800ba50:	f048 0810 	orr.w	r8, r8, #16
 800ba54:	e036      	b.n	800bac4 <__gethex+0x3c4>
 800ba56:	f04f 0b01 	mov.w	fp, #1
 800ba5a:	e7d0      	b.n	800b9fe <__gethex+0x2fe>
 800ba5c:	f04f 0801 	mov.w	r8, #1
 800ba60:	e7e2      	b.n	800ba28 <__gethex+0x328>
 800ba62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba64:	f1c3 0301 	rsb	r3, r3, #1
 800ba68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0ef      	beq.n	800ba50 <__gethex+0x350>
 800ba70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba74:	f104 0214 	add.w	r2, r4, #20
 800ba78:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ba7c:	9301      	str	r3, [sp, #4]
 800ba7e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ba82:	2300      	movs	r3, #0
 800ba84:	4694      	mov	ip, r2
 800ba86:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba8a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800ba8e:	d01e      	beq.n	800bace <__gethex+0x3ce>
 800ba90:	3101      	adds	r1, #1
 800ba92:	f8cc 1000 	str.w	r1, [ip]
 800ba96:	f1b8 0f02 	cmp.w	r8, #2
 800ba9a:	f104 0214 	add.w	r2, r4, #20
 800ba9e:	d13d      	bne.n	800bb1c <__gethex+0x41c>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	42ab      	cmp	r3, r5
 800baa6:	d10b      	bne.n	800bac0 <__gethex+0x3c0>
 800baa8:	1169      	asrs	r1, r5, #5
 800baaa:	2301      	movs	r3, #1
 800baac:	f005 051f 	and.w	r5, r5, #31
 800bab0:	fa03 f505 	lsl.w	r5, r3, r5
 800bab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bab8:	421d      	tst	r5, r3
 800baba:	bf18      	it	ne
 800babc:	f04f 0801 	movne.w	r8, #1
 800bac0:	f048 0820 	orr.w	r8, r8, #32
 800bac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac6:	601c      	str	r4, [r3, #0]
 800bac8:	9b02      	ldr	r3, [sp, #8]
 800baca:	601e      	str	r6, [r3, #0]
 800bacc:	e6a2      	b.n	800b814 <__gethex+0x114>
 800bace:	4290      	cmp	r0, r2
 800bad0:	f842 3c04 	str.w	r3, [r2, #-4]
 800bad4:	d8d6      	bhi.n	800ba84 <__gethex+0x384>
 800bad6:	68a2      	ldr	r2, [r4, #8]
 800bad8:	4593      	cmp	fp, r2
 800bada:	db17      	blt.n	800bb0c <__gethex+0x40c>
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	4648      	mov	r0, r9
 800bae0:	3101      	adds	r1, #1
 800bae2:	f7fd ffd3 	bl	8009a8c <_Balloc>
 800bae6:	4682      	mov	sl, r0
 800bae8:	b918      	cbnz	r0, 800baf2 <__gethex+0x3f2>
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <__gethex+0x458>)
 800baec:	4602      	mov	r2, r0
 800baee:	2184      	movs	r1, #132	; 0x84
 800baf0:	e6b3      	b.n	800b85a <__gethex+0x15a>
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	3202      	adds	r2, #2
 800baf6:	f104 010c 	add.w	r1, r4, #12
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	300c      	adds	r0, #12
 800bafe:	f7ff fd4b 	bl	800b598 <memcpy>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4648      	mov	r0, r9
 800bb06:	f7fe f801 	bl	8009b0c <_Bfree>
 800bb0a:	4654      	mov	r4, sl
 800bb0c:	6922      	ldr	r2, [r4, #16]
 800bb0e:	1c51      	adds	r1, r2, #1
 800bb10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bb14:	6121      	str	r1, [r4, #16]
 800bb16:	2101      	movs	r1, #1
 800bb18:	6151      	str	r1, [r2, #20]
 800bb1a:	e7bc      	b.n	800ba96 <__gethex+0x396>
 800bb1c:	6921      	ldr	r1, [r4, #16]
 800bb1e:	4559      	cmp	r1, fp
 800bb20:	dd0b      	ble.n	800bb3a <__gethex+0x43a>
 800bb22:	2101      	movs	r1, #1
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7ff fd83 	bl	800b630 <rshift>
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3601      	adds	r6, #1
 800bb2e:	42b3      	cmp	r3, r6
 800bb30:	f6ff aedb 	blt.w	800b8ea <__gethex+0x1ea>
 800bb34:	f04f 0801 	mov.w	r8, #1
 800bb38:	e7c2      	b.n	800bac0 <__gethex+0x3c0>
 800bb3a:	f015 051f 	ands.w	r5, r5, #31
 800bb3e:	d0f9      	beq.n	800bb34 <__gethex+0x434>
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	441a      	add	r2, r3
 800bb44:	f1c5 0520 	rsb	r5, r5, #32
 800bb48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bb4c:	f7fe f890 	bl	8009c70 <__hi0bits>
 800bb50:	42a8      	cmp	r0, r5
 800bb52:	dbe6      	blt.n	800bb22 <__gethex+0x422>
 800bb54:	e7ee      	b.n	800bb34 <__gethex+0x434>
 800bb56:	bf00      	nop
 800bb58:	0800c475 	.word	0x0800c475

0800bb5c <L_shift>:
 800bb5c:	f1c2 0208 	rsb	r2, r2, #8
 800bb60:	0092      	lsls	r2, r2, #2
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	f1c2 0620 	rsb	r6, r2, #32
 800bb68:	6843      	ldr	r3, [r0, #4]
 800bb6a:	6804      	ldr	r4, [r0, #0]
 800bb6c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb70:	432c      	orrs	r4, r5
 800bb72:	40d3      	lsrs	r3, r2
 800bb74:	6004      	str	r4, [r0, #0]
 800bb76:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb7a:	4288      	cmp	r0, r1
 800bb7c:	d3f4      	bcc.n	800bb68 <L_shift+0xc>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}

0800bb80 <__match>:
 800bb80:	b530      	push	{r4, r5, lr}
 800bb82:	6803      	ldr	r3, [r0, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb8a:	b914      	cbnz	r4, 800bb92 <__match+0x12>
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	2001      	movs	r0, #1
 800bb90:	bd30      	pop	{r4, r5, pc}
 800bb92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb9a:	2d19      	cmp	r5, #25
 800bb9c:	bf98      	it	ls
 800bb9e:	3220      	addls	r2, #32
 800bba0:	42a2      	cmp	r2, r4
 800bba2:	d0f0      	beq.n	800bb86 <__match+0x6>
 800bba4:	2000      	movs	r0, #0
 800bba6:	e7f3      	b.n	800bb90 <__match+0x10>

0800bba8 <__hexnan>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	680b      	ldr	r3, [r1, #0]
 800bbae:	6801      	ldr	r1, [r0, #0]
 800bbb0:	115e      	asrs	r6, r3, #5
 800bbb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbb6:	f013 031f 	ands.w	r3, r3, #31
 800bbba:	b087      	sub	sp, #28
 800bbbc:	bf18      	it	ne
 800bbbe:	3604      	addne	r6, #4
 800bbc0:	2500      	movs	r5, #0
 800bbc2:	1f37      	subs	r7, r6, #4
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	4690      	mov	r8, r2
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbce:	46b9      	mov	r9, r7
 800bbd0:	463c      	mov	r4, r7
 800bbd2:	9502      	str	r5, [sp, #8]
 800bbd4:	46ab      	mov	fp, r5
 800bbd6:	784a      	ldrb	r2, [r1, #1]
 800bbd8:	1c4b      	adds	r3, r1, #1
 800bbda:	9303      	str	r3, [sp, #12]
 800bbdc:	b342      	cbz	r2, 800bc30 <__hexnan+0x88>
 800bbde:	4610      	mov	r0, r2
 800bbe0:	9105      	str	r1, [sp, #20]
 800bbe2:	9204      	str	r2, [sp, #16]
 800bbe4:	f7ff fd76 	bl	800b6d4 <__hexdig_fun>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d14f      	bne.n	800bc8c <__hexnan+0xe4>
 800bbec:	9a04      	ldr	r2, [sp, #16]
 800bbee:	9905      	ldr	r1, [sp, #20]
 800bbf0:	2a20      	cmp	r2, #32
 800bbf2:	d818      	bhi.n	800bc26 <__hexnan+0x7e>
 800bbf4:	9b02      	ldr	r3, [sp, #8]
 800bbf6:	459b      	cmp	fp, r3
 800bbf8:	dd13      	ble.n	800bc22 <__hexnan+0x7a>
 800bbfa:	454c      	cmp	r4, r9
 800bbfc:	d206      	bcs.n	800bc0c <__hexnan+0x64>
 800bbfe:	2d07      	cmp	r5, #7
 800bc00:	dc04      	bgt.n	800bc0c <__hexnan+0x64>
 800bc02:	462a      	mov	r2, r5
 800bc04:	4649      	mov	r1, r9
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7ff ffa8 	bl	800bb5c <L_shift>
 800bc0c:	4544      	cmp	r4, r8
 800bc0e:	d950      	bls.n	800bcb2 <__hexnan+0x10a>
 800bc10:	2300      	movs	r3, #0
 800bc12:	f1a4 0904 	sub.w	r9, r4, #4
 800bc16:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc1a:	f8cd b008 	str.w	fp, [sp, #8]
 800bc1e:	464c      	mov	r4, r9
 800bc20:	461d      	mov	r5, r3
 800bc22:	9903      	ldr	r1, [sp, #12]
 800bc24:	e7d7      	b.n	800bbd6 <__hexnan+0x2e>
 800bc26:	2a29      	cmp	r2, #41	; 0x29
 800bc28:	d155      	bne.n	800bcd6 <__hexnan+0x12e>
 800bc2a:	3102      	adds	r1, #2
 800bc2c:	f8ca 1000 	str.w	r1, [sl]
 800bc30:	f1bb 0f00 	cmp.w	fp, #0
 800bc34:	d04f      	beq.n	800bcd6 <__hexnan+0x12e>
 800bc36:	454c      	cmp	r4, r9
 800bc38:	d206      	bcs.n	800bc48 <__hexnan+0xa0>
 800bc3a:	2d07      	cmp	r5, #7
 800bc3c:	dc04      	bgt.n	800bc48 <__hexnan+0xa0>
 800bc3e:	462a      	mov	r2, r5
 800bc40:	4649      	mov	r1, r9
 800bc42:	4620      	mov	r0, r4
 800bc44:	f7ff ff8a 	bl	800bb5c <L_shift>
 800bc48:	4544      	cmp	r4, r8
 800bc4a:	d934      	bls.n	800bcb6 <__hexnan+0x10e>
 800bc4c:	f1a8 0204 	sub.w	r2, r8, #4
 800bc50:	4623      	mov	r3, r4
 800bc52:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc56:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc5a:	429f      	cmp	r7, r3
 800bc5c:	d2f9      	bcs.n	800bc52 <__hexnan+0xaa>
 800bc5e:	1b3b      	subs	r3, r7, r4
 800bc60:	f023 0303 	bic.w	r3, r3, #3
 800bc64:	3304      	adds	r3, #4
 800bc66:	3e03      	subs	r6, #3
 800bc68:	3401      	adds	r4, #1
 800bc6a:	42a6      	cmp	r6, r4
 800bc6c:	bf38      	it	cc
 800bc6e:	2304      	movcc	r3, #4
 800bc70:	4443      	add	r3, r8
 800bc72:	2200      	movs	r2, #0
 800bc74:	f843 2b04 	str.w	r2, [r3], #4
 800bc78:	429f      	cmp	r7, r3
 800bc7a:	d2fb      	bcs.n	800bc74 <__hexnan+0xcc>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	b91b      	cbnz	r3, 800bc88 <__hexnan+0xe0>
 800bc80:	4547      	cmp	r7, r8
 800bc82:	d126      	bne.n	800bcd2 <__hexnan+0x12a>
 800bc84:	2301      	movs	r3, #1
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	2005      	movs	r0, #5
 800bc8a:	e025      	b.n	800bcd8 <__hexnan+0x130>
 800bc8c:	3501      	adds	r5, #1
 800bc8e:	2d08      	cmp	r5, #8
 800bc90:	f10b 0b01 	add.w	fp, fp, #1
 800bc94:	dd06      	ble.n	800bca4 <__hexnan+0xfc>
 800bc96:	4544      	cmp	r4, r8
 800bc98:	d9c3      	bls.n	800bc22 <__hexnan+0x7a>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bca0:	2501      	movs	r5, #1
 800bca2:	3c04      	subs	r4, #4
 800bca4:	6822      	ldr	r2, [r4, #0]
 800bca6:	f000 000f 	and.w	r0, r0, #15
 800bcaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bcae:	6020      	str	r0, [r4, #0]
 800bcb0:	e7b7      	b.n	800bc22 <__hexnan+0x7a>
 800bcb2:	2508      	movs	r5, #8
 800bcb4:	e7b5      	b.n	800bc22 <__hexnan+0x7a>
 800bcb6:	9b01      	ldr	r3, [sp, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0df      	beq.n	800bc7c <__hexnan+0xd4>
 800bcbc:	f1c3 0320 	rsb	r3, r3, #32
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc4:	40da      	lsrs	r2, r3
 800bcc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bcca:	4013      	ands	r3, r2
 800bccc:	f846 3c04 	str.w	r3, [r6, #-4]
 800bcd0:	e7d4      	b.n	800bc7c <__hexnan+0xd4>
 800bcd2:	3f04      	subs	r7, #4
 800bcd4:	e7d2      	b.n	800bc7c <__hexnan+0xd4>
 800bcd6:	2004      	movs	r0, #4
 800bcd8:	b007      	add	sp, #28
 800bcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcde <__ascii_mbtowc>:
 800bcde:	b082      	sub	sp, #8
 800bce0:	b901      	cbnz	r1, 800bce4 <__ascii_mbtowc+0x6>
 800bce2:	a901      	add	r1, sp, #4
 800bce4:	b142      	cbz	r2, 800bcf8 <__ascii_mbtowc+0x1a>
 800bce6:	b14b      	cbz	r3, 800bcfc <__ascii_mbtowc+0x1e>
 800bce8:	7813      	ldrb	r3, [r2, #0]
 800bcea:	600b      	str	r3, [r1, #0]
 800bcec:	7812      	ldrb	r2, [r2, #0]
 800bcee:	1e10      	subs	r0, r2, #0
 800bcf0:	bf18      	it	ne
 800bcf2:	2001      	movne	r0, #1
 800bcf4:	b002      	add	sp, #8
 800bcf6:	4770      	bx	lr
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	e7fb      	b.n	800bcf4 <__ascii_mbtowc+0x16>
 800bcfc:	f06f 0001 	mvn.w	r0, #1
 800bd00:	e7f8      	b.n	800bcf4 <__ascii_mbtowc+0x16>

0800bd02 <_realloc_r>:
 800bd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd06:	4680      	mov	r8, r0
 800bd08:	4614      	mov	r4, r2
 800bd0a:	460e      	mov	r6, r1
 800bd0c:	b921      	cbnz	r1, 800bd18 <_realloc_r+0x16>
 800bd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd12:	4611      	mov	r1, r2
 800bd14:	f7fd be2e 	b.w	8009974 <_malloc_r>
 800bd18:	b92a      	cbnz	r2, 800bd26 <_realloc_r+0x24>
 800bd1a:	f7fd fdb7 	bl	800988c <_free_r>
 800bd1e:	4625      	mov	r5, r4
 800bd20:	4628      	mov	r0, r5
 800bd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd26:	f000 f842 	bl	800bdae <_malloc_usable_size_r>
 800bd2a:	4284      	cmp	r4, r0
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	d802      	bhi.n	800bd36 <_realloc_r+0x34>
 800bd30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd34:	d812      	bhi.n	800bd5c <_realloc_r+0x5a>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4640      	mov	r0, r8
 800bd3a:	f7fd fe1b 	bl	8009974 <_malloc_r>
 800bd3e:	4605      	mov	r5, r0
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d0ed      	beq.n	800bd20 <_realloc_r+0x1e>
 800bd44:	42bc      	cmp	r4, r7
 800bd46:	4622      	mov	r2, r4
 800bd48:	4631      	mov	r1, r6
 800bd4a:	bf28      	it	cs
 800bd4c:	463a      	movcs	r2, r7
 800bd4e:	f7ff fc23 	bl	800b598 <memcpy>
 800bd52:	4631      	mov	r1, r6
 800bd54:	4640      	mov	r0, r8
 800bd56:	f7fd fd99 	bl	800988c <_free_r>
 800bd5a:	e7e1      	b.n	800bd20 <_realloc_r+0x1e>
 800bd5c:	4635      	mov	r5, r6
 800bd5e:	e7df      	b.n	800bd20 <_realloc_r+0x1e>

0800bd60 <__ascii_wctomb>:
 800bd60:	b149      	cbz	r1, 800bd76 <__ascii_wctomb+0x16>
 800bd62:	2aff      	cmp	r2, #255	; 0xff
 800bd64:	bf85      	ittet	hi
 800bd66:	238a      	movhi	r3, #138	; 0x8a
 800bd68:	6003      	strhi	r3, [r0, #0]
 800bd6a:	700a      	strbls	r2, [r1, #0]
 800bd6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd70:	bf98      	it	ls
 800bd72:	2001      	movls	r0, #1
 800bd74:	4770      	bx	lr
 800bd76:	4608      	mov	r0, r1
 800bd78:	4770      	bx	lr
	...

0800bd7c <fiprintf>:
 800bd7c:	b40e      	push	{r1, r2, r3}
 800bd7e:	b503      	push	{r0, r1, lr}
 800bd80:	4601      	mov	r1, r0
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	4805      	ldr	r0, [pc, #20]	; (800bd9c <fiprintf+0x20>)
 800bd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	f000 f83f 	bl	800be10 <_vfiprintf_r>
 800bd92:	b002      	add	sp, #8
 800bd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd98:	b003      	add	sp, #12
 800bd9a:	4770      	bx	lr
 800bd9c:	20000064 	.word	0x20000064

0800bda0 <abort>:
 800bda0:	b508      	push	{r3, lr}
 800bda2:	2006      	movs	r0, #6
 800bda4:	f000 fa0c 	bl	800c1c0 <raise>
 800bda8:	2001      	movs	r0, #1
 800bdaa:	f7f5 ff8d 	bl	8001cc8 <_exit>

0800bdae <_malloc_usable_size_r>:
 800bdae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdb2:	1f18      	subs	r0, r3, #4
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	bfbc      	itt	lt
 800bdb8:	580b      	ldrlt	r3, [r1, r0]
 800bdba:	18c0      	addlt	r0, r0, r3
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputc_r>:
 800bdbe:	6893      	ldr	r3, [r2, #8]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	b410      	push	{r4}
 800bdc6:	6093      	str	r3, [r2, #8]
 800bdc8:	da08      	bge.n	800bddc <__sfputc_r+0x1e>
 800bdca:	6994      	ldr	r4, [r2, #24]
 800bdcc:	42a3      	cmp	r3, r4
 800bdce:	db01      	blt.n	800bdd4 <__sfputc_r+0x16>
 800bdd0:	290a      	cmp	r1, #10
 800bdd2:	d103      	bne.n	800bddc <__sfputc_r+0x1e>
 800bdd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdd8:	f000 b934 	b.w	800c044 <__swbuf_r>
 800bddc:	6813      	ldr	r3, [r2, #0]
 800bdde:	1c58      	adds	r0, r3, #1
 800bde0:	6010      	str	r0, [r2, #0]
 800bde2:	7019      	strb	r1, [r3, #0]
 800bde4:	4608      	mov	r0, r1
 800bde6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <__sfputs_r>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	4614      	mov	r4, r2
 800bdf4:	18d5      	adds	r5, r2, r3
 800bdf6:	42ac      	cmp	r4, r5
 800bdf8:	d101      	bne.n	800bdfe <__sfputs_r+0x12>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	e007      	b.n	800be0e <__sfputs_r+0x22>
 800bdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be02:	463a      	mov	r2, r7
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff ffda 	bl	800bdbe <__sfputc_r>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	d1f3      	bne.n	800bdf6 <__sfputs_r+0xa>
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be10 <_vfiprintf_r>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	460d      	mov	r5, r1
 800be16:	b09d      	sub	sp, #116	; 0x74
 800be18:	4614      	mov	r4, r2
 800be1a:	4698      	mov	r8, r3
 800be1c:	4606      	mov	r6, r0
 800be1e:	b118      	cbz	r0, 800be28 <_vfiprintf_r+0x18>
 800be20:	6a03      	ldr	r3, [r0, #32]
 800be22:	b90b      	cbnz	r3, 800be28 <_vfiprintf_r+0x18>
 800be24:	f7fc fd62 	bl	80088ec <__sinit>
 800be28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2a:	07d9      	lsls	r1, r3, #31
 800be2c:	d405      	bmi.n	800be3a <_vfiprintf_r+0x2a>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	059a      	lsls	r2, r3, #22
 800be32:	d402      	bmi.n	800be3a <_vfiprintf_r+0x2a>
 800be34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be36:	f7fc fea4 	bl	8008b82 <__retarget_lock_acquire_recursive>
 800be3a:	89ab      	ldrh	r3, [r5, #12]
 800be3c:	071b      	lsls	r3, r3, #28
 800be3e:	d501      	bpl.n	800be44 <_vfiprintf_r+0x34>
 800be40:	692b      	ldr	r3, [r5, #16]
 800be42:	b99b      	cbnz	r3, 800be6c <_vfiprintf_r+0x5c>
 800be44:	4629      	mov	r1, r5
 800be46:	4630      	mov	r0, r6
 800be48:	f000 f93a 	bl	800c0c0 <__swsetup_r>
 800be4c:	b170      	cbz	r0, 800be6c <_vfiprintf_r+0x5c>
 800be4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be50:	07dc      	lsls	r4, r3, #31
 800be52:	d504      	bpl.n	800be5e <_vfiprintf_r+0x4e>
 800be54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be58:	b01d      	add	sp, #116	; 0x74
 800be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5e:	89ab      	ldrh	r3, [r5, #12]
 800be60:	0598      	lsls	r0, r3, #22
 800be62:	d4f7      	bmi.n	800be54 <_vfiprintf_r+0x44>
 800be64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be66:	f7fc fe8d 	bl	8008b84 <__retarget_lock_release_recursive>
 800be6a:	e7f3      	b.n	800be54 <_vfiprintf_r+0x44>
 800be6c:	2300      	movs	r3, #0
 800be6e:	9309      	str	r3, [sp, #36]	; 0x24
 800be70:	2320      	movs	r3, #32
 800be72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be76:	f8cd 800c 	str.w	r8, [sp, #12]
 800be7a:	2330      	movs	r3, #48	; 0x30
 800be7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c030 <_vfiprintf_r+0x220>
 800be80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be84:	f04f 0901 	mov.w	r9, #1
 800be88:	4623      	mov	r3, r4
 800be8a:	469a      	mov	sl, r3
 800be8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be90:	b10a      	cbz	r2, 800be96 <_vfiprintf_r+0x86>
 800be92:	2a25      	cmp	r2, #37	; 0x25
 800be94:	d1f9      	bne.n	800be8a <_vfiprintf_r+0x7a>
 800be96:	ebba 0b04 	subs.w	fp, sl, r4
 800be9a:	d00b      	beq.n	800beb4 <_vfiprintf_r+0xa4>
 800be9c:	465b      	mov	r3, fp
 800be9e:	4622      	mov	r2, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff ffa2 	bl	800bdec <__sfputs_r>
 800bea8:	3001      	adds	r0, #1
 800beaa:	f000 80a9 	beq.w	800c000 <_vfiprintf_r+0x1f0>
 800beae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb0:	445a      	add	r2, fp
 800beb2:	9209      	str	r2, [sp, #36]	; 0x24
 800beb4:	f89a 3000 	ldrb.w	r3, [sl]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80a1 	beq.w	800c000 <_vfiprintf_r+0x1f0>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bec8:	f10a 0a01 	add.w	sl, sl, #1
 800becc:	9304      	str	r3, [sp, #16]
 800bece:	9307      	str	r3, [sp, #28]
 800bed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bed4:	931a      	str	r3, [sp, #104]	; 0x68
 800bed6:	4654      	mov	r4, sl
 800bed8:	2205      	movs	r2, #5
 800beda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bede:	4854      	ldr	r0, [pc, #336]	; (800c030 <_vfiprintf_r+0x220>)
 800bee0:	f7f4 f976 	bl	80001d0 <memchr>
 800bee4:	9a04      	ldr	r2, [sp, #16]
 800bee6:	b9d8      	cbnz	r0, 800bf20 <_vfiprintf_r+0x110>
 800bee8:	06d1      	lsls	r1, r2, #27
 800beea:	bf44      	itt	mi
 800beec:	2320      	movmi	r3, #32
 800beee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef2:	0713      	lsls	r3, r2, #28
 800bef4:	bf44      	itt	mi
 800bef6:	232b      	movmi	r3, #43	; 0x2b
 800bef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800befc:	f89a 3000 	ldrb.w	r3, [sl]
 800bf00:	2b2a      	cmp	r3, #42	; 0x2a
 800bf02:	d015      	beq.n	800bf30 <_vfiprintf_r+0x120>
 800bf04:	9a07      	ldr	r2, [sp, #28]
 800bf06:	4654      	mov	r4, sl
 800bf08:	2000      	movs	r0, #0
 800bf0a:	f04f 0c0a 	mov.w	ip, #10
 800bf0e:	4621      	mov	r1, r4
 800bf10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf14:	3b30      	subs	r3, #48	; 0x30
 800bf16:	2b09      	cmp	r3, #9
 800bf18:	d94d      	bls.n	800bfb6 <_vfiprintf_r+0x1a6>
 800bf1a:	b1b0      	cbz	r0, 800bf4a <_vfiprintf_r+0x13a>
 800bf1c:	9207      	str	r2, [sp, #28]
 800bf1e:	e014      	b.n	800bf4a <_vfiprintf_r+0x13a>
 800bf20:	eba0 0308 	sub.w	r3, r0, r8
 800bf24:	fa09 f303 	lsl.w	r3, r9, r3
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	9304      	str	r3, [sp, #16]
 800bf2c:	46a2      	mov	sl, r4
 800bf2e:	e7d2      	b.n	800bed6 <_vfiprintf_r+0xc6>
 800bf30:	9b03      	ldr	r3, [sp, #12]
 800bf32:	1d19      	adds	r1, r3, #4
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	9103      	str	r1, [sp, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bfbb      	ittet	lt
 800bf3c:	425b      	neglt	r3, r3
 800bf3e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf42:	9307      	strge	r3, [sp, #28]
 800bf44:	9307      	strlt	r3, [sp, #28]
 800bf46:	bfb8      	it	lt
 800bf48:	9204      	strlt	r2, [sp, #16]
 800bf4a:	7823      	ldrb	r3, [r4, #0]
 800bf4c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf4e:	d10c      	bne.n	800bf6a <_vfiprintf_r+0x15a>
 800bf50:	7863      	ldrb	r3, [r4, #1]
 800bf52:	2b2a      	cmp	r3, #42	; 0x2a
 800bf54:	d134      	bne.n	800bfc0 <_vfiprintf_r+0x1b0>
 800bf56:	9b03      	ldr	r3, [sp, #12]
 800bf58:	1d1a      	adds	r2, r3, #4
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	9203      	str	r2, [sp, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bfb8      	it	lt
 800bf62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf66:	3402      	adds	r4, #2
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c040 <_vfiprintf_r+0x230>
 800bf6e:	7821      	ldrb	r1, [r4, #0]
 800bf70:	2203      	movs	r2, #3
 800bf72:	4650      	mov	r0, sl
 800bf74:	f7f4 f92c 	bl	80001d0 <memchr>
 800bf78:	b138      	cbz	r0, 800bf8a <_vfiprintf_r+0x17a>
 800bf7a:	9b04      	ldr	r3, [sp, #16]
 800bf7c:	eba0 000a 	sub.w	r0, r0, sl
 800bf80:	2240      	movs	r2, #64	; 0x40
 800bf82:	4082      	lsls	r2, r0
 800bf84:	4313      	orrs	r3, r2
 800bf86:	3401      	adds	r4, #1
 800bf88:	9304      	str	r3, [sp, #16]
 800bf8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8e:	4829      	ldr	r0, [pc, #164]	; (800c034 <_vfiprintf_r+0x224>)
 800bf90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf94:	2206      	movs	r2, #6
 800bf96:	f7f4 f91b 	bl	80001d0 <memchr>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d03f      	beq.n	800c01e <_vfiprintf_r+0x20e>
 800bf9e:	4b26      	ldr	r3, [pc, #152]	; (800c038 <_vfiprintf_r+0x228>)
 800bfa0:	bb1b      	cbnz	r3, 800bfea <_vfiprintf_r+0x1da>
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	3307      	adds	r3, #7
 800bfa6:	f023 0307 	bic.w	r3, r3, #7
 800bfaa:	3308      	adds	r3, #8
 800bfac:	9303      	str	r3, [sp, #12]
 800bfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb0:	443b      	add	r3, r7
 800bfb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb4:	e768      	b.n	800be88 <_vfiprintf_r+0x78>
 800bfb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfba:	460c      	mov	r4, r1
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	e7a6      	b.n	800bf0e <_vfiprintf_r+0xfe>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	3401      	adds	r4, #1
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f04f 0c0a 	mov.w	ip, #10
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd2:	3a30      	subs	r2, #48	; 0x30
 800bfd4:	2a09      	cmp	r2, #9
 800bfd6:	d903      	bls.n	800bfe0 <_vfiprintf_r+0x1d0>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d0c6      	beq.n	800bf6a <_vfiprintf_r+0x15a>
 800bfdc:	9105      	str	r1, [sp, #20]
 800bfde:	e7c4      	b.n	800bf6a <_vfiprintf_r+0x15a>
 800bfe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e7f0      	b.n	800bfcc <_vfiprintf_r+0x1bc>
 800bfea:	ab03      	add	r3, sp, #12
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	462a      	mov	r2, r5
 800bff0:	4b12      	ldr	r3, [pc, #72]	; (800c03c <_vfiprintf_r+0x22c>)
 800bff2:	a904      	add	r1, sp, #16
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7fb fe17 	bl	8007c28 <_printf_float>
 800bffa:	4607      	mov	r7, r0
 800bffc:	1c78      	adds	r0, r7, #1
 800bffe:	d1d6      	bne.n	800bfae <_vfiprintf_r+0x19e>
 800c000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c002:	07d9      	lsls	r1, r3, #31
 800c004:	d405      	bmi.n	800c012 <_vfiprintf_r+0x202>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d402      	bmi.n	800c012 <_vfiprintf_r+0x202>
 800c00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00e:	f7fc fdb9 	bl	8008b84 <__retarget_lock_release_recursive>
 800c012:	89ab      	ldrh	r3, [r5, #12]
 800c014:	065b      	lsls	r3, r3, #25
 800c016:	f53f af1d 	bmi.w	800be54 <_vfiprintf_r+0x44>
 800c01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c01c:	e71c      	b.n	800be58 <_vfiprintf_r+0x48>
 800c01e:	ab03      	add	r3, sp, #12
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	462a      	mov	r2, r5
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <_vfiprintf_r+0x22c>)
 800c026:	a904      	add	r1, sp, #16
 800c028:	4630      	mov	r0, r6
 800c02a:	f7fc f8a1 	bl	8008170 <_printf_i>
 800c02e:	e7e4      	b.n	800bffa <_vfiprintf_r+0x1ea>
 800c030:	0800c731 	.word	0x0800c731
 800c034:	0800c73b 	.word	0x0800c73b
 800c038:	08007c29 	.word	0x08007c29
 800c03c:	0800bded 	.word	0x0800bded
 800c040:	0800c737 	.word	0x0800c737

0800c044 <__swbuf_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	460e      	mov	r6, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	4605      	mov	r5, r0
 800c04c:	b118      	cbz	r0, 800c056 <__swbuf_r+0x12>
 800c04e:	6a03      	ldr	r3, [r0, #32]
 800c050:	b90b      	cbnz	r3, 800c056 <__swbuf_r+0x12>
 800c052:	f7fc fc4b 	bl	80088ec <__sinit>
 800c056:	69a3      	ldr	r3, [r4, #24]
 800c058:	60a3      	str	r3, [r4, #8]
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	071a      	lsls	r2, r3, #28
 800c05e:	d525      	bpl.n	800c0ac <__swbuf_r+0x68>
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	b31b      	cbz	r3, 800c0ac <__swbuf_r+0x68>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	1a98      	subs	r0, r3, r2
 800c06a:	6963      	ldr	r3, [r4, #20]
 800c06c:	b2f6      	uxtb	r6, r6
 800c06e:	4283      	cmp	r3, r0
 800c070:	4637      	mov	r7, r6
 800c072:	dc04      	bgt.n	800c07e <__swbuf_r+0x3a>
 800c074:	4621      	mov	r1, r4
 800c076:	4628      	mov	r0, r5
 800c078:	f7ff fa2a 	bl	800b4d0 <_fflush_r>
 800c07c:	b9e0      	cbnz	r0, 800c0b8 <__swbuf_r+0x74>
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	3b01      	subs	r3, #1
 800c082:	60a3      	str	r3, [r4, #8]
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	6022      	str	r2, [r4, #0]
 800c08a:	701e      	strb	r6, [r3, #0]
 800c08c:	6962      	ldr	r2, [r4, #20]
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	429a      	cmp	r2, r3
 800c092:	d004      	beq.n	800c09e <__swbuf_r+0x5a>
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	07db      	lsls	r3, r3, #31
 800c098:	d506      	bpl.n	800c0a8 <__swbuf_r+0x64>
 800c09a:	2e0a      	cmp	r6, #10
 800c09c:	d104      	bne.n	800c0a8 <__swbuf_r+0x64>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f7ff fa15 	bl	800b4d0 <_fflush_r>
 800c0a6:	b938      	cbnz	r0, 800c0b8 <__swbuf_r+0x74>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f806 	bl	800c0c0 <__swsetup_r>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d0d5      	beq.n	800c064 <__swbuf_r+0x20>
 800c0b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c0bc:	e7f4      	b.n	800c0a8 <__swbuf_r+0x64>
	...

0800c0c0 <__swsetup_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <__swsetup_r+0xac>)
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	b118      	cbz	r0, 800c0d4 <__swsetup_r+0x14>
 800c0cc:	6a03      	ldr	r3, [r0, #32]
 800c0ce:	b90b      	cbnz	r3, 800c0d4 <__swsetup_r+0x14>
 800c0d0:	f7fc fc0c 	bl	80088ec <__sinit>
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0da:	0718      	lsls	r0, r3, #28
 800c0dc:	d422      	bmi.n	800c124 <__swsetup_r+0x64>
 800c0de:	06d9      	lsls	r1, r3, #27
 800c0e0:	d407      	bmi.n	800c0f2 <__swsetup_r+0x32>
 800c0e2:	2309      	movs	r3, #9
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f0:	e034      	b.n	800c15c <__swsetup_r+0x9c>
 800c0f2:	0758      	lsls	r0, r3, #29
 800c0f4:	d512      	bpl.n	800c11c <__swsetup_r+0x5c>
 800c0f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0f8:	b141      	cbz	r1, 800c10c <__swsetup_r+0x4c>
 800c0fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0fe:	4299      	cmp	r1, r3
 800c100:	d002      	beq.n	800c108 <__swsetup_r+0x48>
 800c102:	4628      	mov	r0, r5
 800c104:	f7fd fbc2 	bl	800988c <_free_r>
 800c108:	2300      	movs	r3, #0
 800c10a:	6363      	str	r3, [r4, #52]	; 0x34
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	2300      	movs	r3, #0
 800c116:	6063      	str	r3, [r4, #4]
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f043 0308 	orr.w	r3, r3, #8
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	b94b      	cbnz	r3, 800c13c <__swsetup_r+0x7c>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c12e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c132:	d003      	beq.n	800c13c <__swsetup_r+0x7c>
 800c134:	4621      	mov	r1, r4
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f884 	bl	800c244 <__smakebuf_r>
 800c13c:	89a0      	ldrh	r0, [r4, #12]
 800c13e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c142:	f010 0301 	ands.w	r3, r0, #1
 800c146:	d00a      	beq.n	800c15e <__swsetup_r+0x9e>
 800c148:	2300      	movs	r3, #0
 800c14a:	60a3      	str	r3, [r4, #8]
 800c14c:	6963      	ldr	r3, [r4, #20]
 800c14e:	425b      	negs	r3, r3
 800c150:	61a3      	str	r3, [r4, #24]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b943      	cbnz	r3, 800c168 <__swsetup_r+0xa8>
 800c156:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c15a:	d1c4      	bne.n	800c0e6 <__swsetup_r+0x26>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	0781      	lsls	r1, r0, #30
 800c160:	bf58      	it	pl
 800c162:	6963      	ldrpl	r3, [r4, #20]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	e7f4      	b.n	800c152 <__swsetup_r+0x92>
 800c168:	2000      	movs	r0, #0
 800c16a:	e7f7      	b.n	800c15c <__swsetup_r+0x9c>
 800c16c:	20000064 	.word	0x20000064

0800c170 <_raise_r>:
 800c170:	291f      	cmp	r1, #31
 800c172:	b538      	push	{r3, r4, r5, lr}
 800c174:	4604      	mov	r4, r0
 800c176:	460d      	mov	r5, r1
 800c178:	d904      	bls.n	800c184 <_raise_r+0x14>
 800c17a:	2316      	movs	r3, #22
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c186:	b112      	cbz	r2, 800c18e <_raise_r+0x1e>
 800c188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c18c:	b94b      	cbnz	r3, 800c1a2 <_raise_r+0x32>
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 f830 	bl	800c1f4 <_getpid_r>
 800c194:	462a      	mov	r2, r5
 800c196:	4601      	mov	r1, r0
 800c198:	4620      	mov	r0, r4
 800c19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c19e:	f000 b817 	b.w	800c1d0 <_kill_r>
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d00a      	beq.n	800c1bc <_raise_r+0x4c>
 800c1a6:	1c59      	adds	r1, r3, #1
 800c1a8:	d103      	bne.n	800c1b2 <_raise_r+0x42>
 800c1aa:	2316      	movs	r3, #22
 800c1ac:	6003      	str	r3, [r0, #0]
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	e7e7      	b.n	800c182 <_raise_r+0x12>
 800c1b2:	2400      	movs	r4, #0
 800c1b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	4798      	blx	r3
 800c1bc:	2000      	movs	r0, #0
 800c1be:	e7e0      	b.n	800c182 <_raise_r+0x12>

0800c1c0 <raise>:
 800c1c0:	4b02      	ldr	r3, [pc, #8]	; (800c1cc <raise+0xc>)
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f7ff bfd3 	b.w	800c170 <_raise_r>
 800c1ca:	bf00      	nop
 800c1cc:	20000064 	.word	0x20000064

0800c1d0 <_kill_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d07      	ldr	r5, [pc, #28]	; (800c1f0 <_kill_r+0x20>)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	4611      	mov	r1, r2
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	f7f5 fd63 	bl	8001ca8 <_kill>
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	d102      	bne.n	800c1ec <_kill_r+0x1c>
 800c1e6:	682b      	ldr	r3, [r5, #0]
 800c1e8:	b103      	cbz	r3, 800c1ec <_kill_r+0x1c>
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	bd38      	pop	{r3, r4, r5, pc}
 800c1ee:	bf00      	nop
 800c1f0:	2000054c 	.word	0x2000054c

0800c1f4 <_getpid_r>:
 800c1f4:	f7f5 bd50 	b.w	8001c98 <_getpid>

0800c1f8 <__swhatbuf_r>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	2900      	cmp	r1, #0
 800c202:	b096      	sub	sp, #88	; 0x58
 800c204:	4615      	mov	r5, r2
 800c206:	461e      	mov	r6, r3
 800c208:	da0d      	bge.n	800c226 <__swhatbuf_r+0x2e>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	bf0c      	ite	eq
 800c216:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c21a:	2340      	movne	r3, #64	; 0x40
 800c21c:	2000      	movs	r0, #0
 800c21e:	6031      	str	r1, [r6, #0]
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	b016      	add	sp, #88	; 0x58
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	466a      	mov	r2, sp
 800c228:	f000 f848 	bl	800c2bc <_fstat_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	dbec      	blt.n	800c20a <__swhatbuf_r+0x12>
 800c230:	9901      	ldr	r1, [sp, #4]
 800c232:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c236:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c23a:	4259      	negs	r1, r3
 800c23c:	4159      	adcs	r1, r3
 800c23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c242:	e7eb      	b.n	800c21c <__swhatbuf_r+0x24>

0800c244 <__smakebuf_r>:
 800c244:	898b      	ldrh	r3, [r1, #12]
 800c246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c248:	079d      	lsls	r5, r3, #30
 800c24a:	4606      	mov	r6, r0
 800c24c:	460c      	mov	r4, r1
 800c24e:	d507      	bpl.n	800c260 <__smakebuf_r+0x1c>
 800c250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	2301      	movs	r3, #1
 800c25a:	6163      	str	r3, [r4, #20]
 800c25c:	b002      	add	sp, #8
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	ab01      	add	r3, sp, #4
 800c262:	466a      	mov	r2, sp
 800c264:	f7ff ffc8 	bl	800c1f8 <__swhatbuf_r>
 800c268:	9900      	ldr	r1, [sp, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7fd fb81 	bl	8009974 <_malloc_r>
 800c272:	b948      	cbnz	r0, 800c288 <__smakebuf_r+0x44>
 800c274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c278:	059a      	lsls	r2, r3, #22
 800c27a:	d4ef      	bmi.n	800c25c <__smakebuf_r+0x18>
 800c27c:	f023 0303 	bic.w	r3, r3, #3
 800c280:	f043 0302 	orr.w	r3, r3, #2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e7e3      	b.n	800c250 <__smakebuf_r+0xc>
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	6020      	str	r0, [r4, #0]
 800c28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	6163      	str	r3, [r4, #20]
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	6120      	str	r0, [r4, #16]
 800c29a:	b15b      	cbz	r3, 800c2b4 <__smakebuf_r+0x70>
 800c29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 f81d 	bl	800c2e0 <_isatty_r>
 800c2a6:	b128      	cbz	r0, 800c2b4 <__smakebuf_r+0x70>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	f043 0301 	orr.w	r3, r3, #1
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	431d      	orrs	r5, r3
 800c2b8:	81a5      	strh	r5, [r4, #12]
 800c2ba:	e7cf      	b.n	800c25c <__smakebuf_r+0x18>

0800c2bc <_fstat_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4d07      	ldr	r5, [pc, #28]	; (800c2dc <_fstat_r+0x20>)
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	602b      	str	r3, [r5, #0]
 800c2ca:	f7f5 fd4c 	bl	8001d66 <_fstat>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	d102      	bne.n	800c2d8 <_fstat_r+0x1c>
 800c2d2:	682b      	ldr	r3, [r5, #0]
 800c2d4:	b103      	cbz	r3, 800c2d8 <_fstat_r+0x1c>
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
 800c2da:	bf00      	nop
 800c2dc:	2000054c 	.word	0x2000054c

0800c2e0 <_isatty_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d06      	ldr	r5, [pc, #24]	; (800c2fc <_isatty_r+0x1c>)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	f7f5 fd4b 	bl	8001d86 <_isatty>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_isatty_r+0x1a>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_isatty_r+0x1a>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	2000054c 	.word	0x2000054c

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
