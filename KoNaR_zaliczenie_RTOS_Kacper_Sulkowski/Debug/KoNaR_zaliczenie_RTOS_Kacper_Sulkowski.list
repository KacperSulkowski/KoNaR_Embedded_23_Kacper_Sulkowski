
KoNaR_zaliczenie_RTOS_Kacper_Sulkowski.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  080106f0  080106f0  000206f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c78  08010c78  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010c78  08010c78  00020c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c80  08010c80  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c80  08010c80  00020c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c84  08010c84  00020c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08010c88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d524  200001d8  08010e60  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d6fc  08010e60  0003d6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021051  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000420e  00000000  00000000  0005129c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  000554b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015cd  00000000  00000000  000570a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000052f1  00000000  00000000  00058675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f2fa  00000000  00000000  0005d966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010233f  00000000  00000000  0007cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c38  00000000  00000000  0017efa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00187bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106d8 	.word	0x080106d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080106d8 	.word	0x080106d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:

//CALLBACKS AND CALLBACK TASKTS


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13)
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001000:	d110      	bne.n	8001024 <HAL_GPIO_EXTI_Callback+0x34>
	{
		BaseType_t check_if_yield_required;
		check_if_yield_required=xTaskResumeFromISR(GPIO_EXTI13_IR_task_handle);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f009 f8d6 	bl	800a1b8 <xTaskResumeFromISR>
 800100c:	60f8      	str	r0, [r7, #12]
		portYIELD_FROM_ISR(check_if_yield_required);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <HAL_GPIO_EXTI_Callback+0x34>
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 8001016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	f3bf 8f6f 	isb	sy
	}
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002a0 	.word	0x200002a0
 8001030:	e000ed04 	.word	0xe000ed04

08001034 <GPIO_EXTI13_IR_task>:

void GPIO_EXTI13_IR_task(void* param)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskSuspend(NULL);
 800103c:	2000      	movs	r0, #0
 800103e:	f009 f813 	bl	800a068 <vTaskSuspend>
		button_pushed=true;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <GPIO_EXTI13_IR_task+0x24>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
		button_push_counter++;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <GPIO_EXTI13_IR_task+0x28>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b02      	ldr	r3, [pc, #8]	; (800105c <GPIO_EXTI13_IR_task+0x28>)
 8001054:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(NULL);
 8001056:	e7f1      	b.n	800103c <GPIO_EXTI13_IR_task+0x8>
 8001058:	200001f4 	.word	0x200001f4
 800105c:	200001f6 	.word	0x200001f6

08001060 <HAL_UART_TxCpltCallback>:
	}
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_UART_TxCpltCallback+0x3c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d110      	bne.n	8001092 <HAL_UART_TxCpltCallback+0x32>
	{
		BaseType_t check_if_yield_required;
		check_if_yield_required=xTaskResumeFromISR(UART2_TX_CPLT_IR_task_handle);
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_UART_TxCpltCallback+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f009 f89f 	bl	800a1b8 <xTaskResumeFromISR>
 800107a:	60f8      	str	r0, [r7, #12]
		portYIELD_FROM_ISR(check_if_yield_required);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_UART_TxCpltCallback+0x32>
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_UART_TxCpltCallback+0x44>)
 8001084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	f3bf 8f6f 	isb	sy
	}
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000398 	.word	0x20000398
 80010a0:	200002a4 	.word	0x200002a4
 80010a4:	e000ed04 	.word	0xe000ed04

080010a8 <UART2_TX_CPLT_IR_task>:


void UART2_TX_CPLT_IR_task(void* param)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskSuspend(NULL);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f008 ffd9 	bl	800a068 <vTaskSuspend>
		xSemaphoreGive(tx_UART_mutex);
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <UART2_TX_CPLT_IR_task+0x20>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	f008 f8da 	bl	8009278 <xQueueGenericSend>
		vTaskSuspend(NULL);
 80010c4:	e7f4      	b.n	80010b0 <UART2_TX_CPLT_IR_task+0x8>
 80010c6:	bf00      	nop
 80010c8:	20000298 	.word	0x20000298

080010cc <HAL_I2C_MemRxCpltCallback>:
	}
}


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(hi2c==&hi2c1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_I2C_MemRxCpltCallback+0x3c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d110      	bne.n	80010fe <HAL_I2C_MemRxCpltCallback+0x32>
	{
		BaseType_t check_if_yield_required;
		check_if_yield_required=xTaskResumeFromISR(I2C_MemRx_Cplt_IR_task_handle);
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_I2C_MemRxCpltCallback+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f009 f869 	bl	800a1b8 <xTaskResumeFromISR>
 80010e6:	60f8      	str	r0, [r7, #12]
		portYIELD_FROM_ISR(check_if_yield_required);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_I2C_MemRxCpltCallback+0x32>
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_I2C_MemRxCpltCallback+0x44>)
 80010f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	f3bf 8f6f 	isb	sy
	}
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002ac 	.word	0x200002ac
 800110c:	200002a8 	.word	0x200002a8
 8001110:	e000ed04 	.word	0xe000ed04

08001114 <I2C_MemRx_Cplt_IR_task>:

void I2C_MemRx_Cplt_IR_task(void*param)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskSuspend(NULL);
 800111c:	2000      	movs	r0, #0
 800111e:	f008 ffa3 	bl	800a068 <vTaskSuspend>
		xSemaphoreGive(hts221_rw_data_accsess_mutex);
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <I2C_MemRx_Cplt_IR_task+0x20>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	f008 f8a4 	bl	8009278 <xQueueGenericSend>
		vTaskSuspend(NULL);
 8001130:	e7f4      	b.n	800111c <I2C_MemRx_Cplt_IR_task+0x8>
 8001132:	bf00      	nop
 8001134:	2000029c 	.word	0x2000029c

08001138 <init_timers>:


// Timers handling functions

void init_timers()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2); //inicjalizacja timera
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <init_timers+0x24>)
 800113e:	f005 f9af 	bl	80064a0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);//inicjalizacja w trybie IR
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <init_timers+0x28>)
 8001144:	f005 fa14 	bl	8006570 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //inicjalizacja generatora PWM
 8001148:	2100      	movs	r1, #0
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <init_timers+0x24>)
 800114c:	f005 fb2e 	bl	80067ac <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,tim2_ARR/2); //wypełnienie 50%
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <init_timers+0x24>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	224c      	movs	r2, #76	; 0x4c
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000300 	.word	0x20000300
 8001160:	2000034c 	.word	0x2000034c

08001164 <blue_button_pushed>:


//Button handling functions

void blue_button_pushed(void* param)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(button_pushed)
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <blue_button_pushed+0x50>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0fa      	beq.n	800116c <blue_button_pushed+0x8>
		{
			button_pushed=false;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <blue_button_pushed+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			if(xSemaphoreTake(tx_UART_mutex,100))
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <blue_button_pushed+0x54>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2164      	movs	r1, #100	; 0x64
 8001182:	4618      	mov	r0, r3
 8001184:	f008 faf2 	bl	800976c <xQueueSemaphoreTake>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0ee      	beq.n	800116c <blue_button_pushed+0x8>
			{
				snprintf((char*)buffer_button_UART, sizeof(buffer_button_UART), "ALLERT: BUTTON PUSHED!!! Counter: %u\n\r",button_push_counter);
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <blue_button_pushed+0x58>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <blue_button_pushed+0x5c>)
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <blue_button_pushed+0x60>)
 800119a:	f00b fd77 	bl	800cc8c <sniprintf>
				HAL_UART_Transmit_IT(&huart2, buffer_button_UART, strlen((char*)buffer_button_UART));
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <blue_button_pushed+0x60>)
 80011a0:	f7ff f866 	bl	8000270 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4906      	ldr	r1, [pc, #24]	; (80011c4 <blue_button_pushed+0x60>)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <blue_button_pushed+0x64>)
 80011ae:	f006 fbcf 	bl	8007950 <HAL_UART_Transmit_IT>
		if(button_pushed)
 80011b2:	e7db      	b.n	800116c <blue_button_pushed+0x8>
 80011b4:	200001f4 	.word	0x200001f4
 80011b8:	20000298 	.word	0x20000298
 80011bc:	200001f6 	.word	0x200001f6
 80011c0:	080106fc 	.word	0x080106fc
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000398 	.word	0x20000398

080011cc <hts221_read>:

//HTS221 handling functions


void hts221_read(uint8_t address,uint8_t* dest, uint8_t size)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	if(xSemaphoreTake(hts221_rw_data_accsess_mutex,100))
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <hts221_read+0x58>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2164      	movs	r1, #100	; 0x64
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 fac2 	bl	800976c <xQueueSemaphoreTake>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <hts221_read+0x4e>
	{
		HAL_I2C_Mem_Read(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, dest, size, HAL_MAX_DELAY);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fa:	9102      	str	r1, [sp, #8]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	21be      	movs	r1, #190	; 0xbe
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <hts221_read+0x5c>)
 8001208:	f001 fd6a 	bl	8002ce0 <HAL_I2C_Mem_Read>
		xSemaphoreGive(hts221_rw_data_accsess_mutex);
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <hts221_read+0x58>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	f008 f82f 	bl	8009278 <xQueueGenericSend>
	}
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000029c 	.word	0x2000029c
 8001228:	200002ac 	.word	0x200002ac

0800122c <hts221_read_IT>:

void hts221_read_IT(uint8_t address,uint8_t* dest, uint8_t size)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	if(xSemaphoreTake(hts221_rw_data_accsess_mutex,100))
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <hts221_read_IT+0x44>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2164      	movs	r1, #100	; 0x64
 8001242:	4618      	mov	r0, r3
 8001244:	f008 fa92 	bl	800976c <xQueueSemaphoreTake>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <hts221_read_IT+0x3a>
	{

			HAL_I2C_Mem_Read_IT(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, dest, size);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	b29a      	uxth	r2, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	b29b      	uxth	r3, r3
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	21be      	movs	r1, #190	; 0xbe
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <hts221_read_IT+0x48>)
 8001262:	f001 fe57 	bl	8002f14 <HAL_I2C_Mem_Read_IT>
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000029c 	.word	0x2000029c
 8001274:	200002ac 	.word	0x200002ac

08001278 <hts221_write>:

void hts221_write(uint8_t address, uint8_t val)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af04      	add	r7, sp, #16
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
	if(xSemaphoreTake(hts221_rw_data_accsess_mutex,100))
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <hts221_write+0x54>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2164      	movs	r1, #100	; 0x64
 800128e:	4618      	mov	r0, r3
 8001290:	f008 fa6c 	bl	800976c <xQueueSemaphoreTake>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d014      	beq.n	80012c4 <hts221_write+0x4c>
	{
		HAL_I2C_Mem_Write(&hi2c1, HTS221_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &val, sizeof(val), HAL_MAX_DELAY);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b29a      	uxth	r2, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	21be      	movs	r1, #190	; 0xbe
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <hts221_write+0x58>)
 80012b2:	f001 fc01 	bl	8002ab8 <HAL_I2C_Mem_Write>
		xSemaphoreGive(hts221_rw_data_accsess_mutex);
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <hts221_write+0x54>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	f007 ffda 	bl	8009278 <xQueueGenericSend>
	}
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000029c 	.word	0x2000029c
 80012d0:	200002ac 	.word	0x200002ac

080012d4 <hts221_check_ID>:

void hts221_check_ID()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint8_t WHO_I_AM=0;
 80012da:	2300      	movs	r3, #0
 80012dc:	70fb      	strb	r3, [r7, #3]

	const char* str = "HTS221 Connected!\n\r";
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <hts221_check_ID+0x60>)
 80012e0:	607b      	str	r3, [r7, #4]

	hts221_read(HTS221_WHO_AM_I, &WHO_I_AM, 1);
 80012e2:	1cfb      	adds	r3, r7, #3
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff ff6f 	bl	80011cc <hts221_read>

	if(WHO_I_AM==HTS221_I2C_ID)
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2bbc      	cmp	r3, #188	; 0xbc
 80012f2:	d11a      	bne.n	800132a <hts221_check_ID+0x56>
	{
		if(xSemaphoreTake(tx_UART_mutex,100))
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <hts221_check_ID+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2164      	movs	r1, #100	; 0x64
 80012fa:	4618      	mov	r0, r3
 80012fc:	f008 fa36 	bl	800976c <xQueueSemaphoreTake>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d011      	beq.n	800132a <hts221_check_ID+0x56>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str),HAL_MAX_DELAY);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <hts221_check_ID+0x68>)
 8001318:	f006 fa90 	bl	800783c <HAL_UART_Transmit>
			xSemaphoreGive(tx_UART_mutex);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <hts221_check_ID+0x64>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	f007 ffa7 	bl	8009278 <xQueueGenericSend>
		}
	}
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	08010724 	.word	0x08010724
 8001338:	20000298 	.word	0x20000298
 800133c:	20000398 	.word	0x20000398

08001340 <hts221_tmp_interpol_init>:

void hts221_tmp_interpol_init()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t T0_degCx8=0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
	uint8_t T1_degCx8=0;
 800134a:	2300      	movs	r3, #0
 800134c:	71bb      	strb	r3, [r7, #6]
	uint8_t T1_T0_MSBx8=0;
 800134e:	2300      	movs	r3, #0
 8001350:	717b      	strb	r3, [r7, #5]

	hts221_read(HTS221_T0_OUT_H, &buffer_tmp[1], 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4932      	ldr	r1, [pc, #200]	; (8001420 <hts221_tmp_interpol_init+0xe0>)
 8001356:	203d      	movs	r0, #61	; 0x3d
 8001358:	f7ff ff38 	bl	80011cc <hts221_read>
	hts221_read(HTS221_T0_OUT_L, &buffer_tmp[0], 1);
 800135c:	2201      	movs	r2, #1
 800135e:	4931      	ldr	r1, [pc, #196]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 8001360:	203c      	movs	r0, #60	; 0x3c
 8001362:	f7ff ff33 	bl	80011cc <hts221_read>
	T0_OUT=((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <hts221_tmp_interpol_init+0xe8>)
 800137c:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_T1_OUT_H, &buffer_tmp[1], 1);
 800137e:	2201      	movs	r2, #1
 8001380:	4927      	ldr	r1, [pc, #156]	; (8001420 <hts221_tmp_interpol_init+0xe0>)
 8001382:	203f      	movs	r0, #63	; 0x3f
 8001384:	f7ff ff22 	bl	80011cc <hts221_read>
	hts221_read(HTS221_T1_OUT_L, &buffer_tmp[0], 1);
 8001388:	2201      	movs	r2, #1
 800138a:	4926      	ldr	r1, [pc, #152]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 800138c:	203e      	movs	r0, #62	; 0x3e
 800138e:	f7ff ff1d 	bl	80011cc <hts221_read>
	T1_OUT=((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <hts221_tmp_interpol_init+0xe4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <hts221_tmp_interpol_init+0xec>)
 80013a8:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_T0_degC_x8, &T0_degCx8, 1);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f7ff ff0b 	bl	80011cc <hts221_read>
	hts221_read(HTS221_T1_degC_x8, &T1_degCx8, 1);
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	2201      	movs	r2, #1
 80013ba:	4619      	mov	r1, r3
 80013bc:	2033      	movs	r0, #51	; 0x33
 80013be:	f7ff ff05 	bl	80011cc <hts221_read>
	hts221_read(HTS221_T1_T0_MSB_x8, &T1_T0_MSBx8, 1);
 80013c2:	1d7b      	adds	r3, r7, #5
 80013c4:	2201      	movs	r2, #1
 80013c6:	4619      	mov	r1, r3
 80013c8:	2035      	movs	r0, #53	; 0x35
 80013ca:	f7ff feff 	bl	80011cc <hts221_read>

	T0_degC=(T0_degCx8 + ((T1_T0_MSBx8 & 0x03)<<8))/8.f;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	461a      	mov	r2, r3
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013da:	4413      	add	r3, r2
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80013e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <hts221_tmp_interpol_init+0xf0>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]
	T1_degC=(T1_degCx8 + ((T1_T0_MSBx8 & 0x0C)<<6))/8.f;
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	461a      	mov	r2, r3
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	019b      	lsls	r3, r3, #6
 80013fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013fe:	4413      	add	r3, r2
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <hts221_tmp_interpol_init+0xf4>)
 8001412:	edc3 7a00 	vstr	s15, [r3]

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000279 	.word	0x20000279
 8001424:	20000278 	.word	0x20000278
 8001428:	2000027e 	.word	0x2000027e
 800142c:	20000280 	.word	0x20000280
 8001430:	20000284 	.word	0x20000284
 8001434:	20000288 	.word	0x20000288

08001438 <hts221_hmd_interpol_init>:

void hts221_hmd_interpol_init()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	uint8_t H0_rHx2=0;
 800143e:	2300      	movs	r3, #0
 8001440:	71fb      	strb	r3, [r7, #7]
	uint8_t H1_rHx2=0;
 8001442:	2300      	movs	r3, #0
 8001444:	71bb      	strb	r3, [r7, #6]

	hts221_read(HTS221_H0_OUT_H, &buffer_hmdt[1], 1);
 8001446:	2201      	movs	r2, #1
 8001448:	4929      	ldr	r1, [pc, #164]	; (80014f0 <hts221_hmd_interpol_init+0xb8>)
 800144a:	2037      	movs	r0, #55	; 0x37
 800144c:	f7ff febe 	bl	80011cc <hts221_read>
	hts221_read(HTS221_H0_OUT_L, &buffer_hmdt[0], 1);
 8001450:	2201      	movs	r2, #1
 8001452:	4928      	ldr	r1, [pc, #160]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 8001454:	2036      	movs	r0, #54	; 0x36
 8001456:	f7ff feb9 	bl	80011cc <hts221_read>
	H0_OUT=((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0];
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <hts221_hmd_interpol_init+0xc0>)
 8001470:	801a      	strh	r2, [r3, #0]

	hts221_read(HTS221_H1_OUT_H, &buffer_hmdt[1], 1);
 8001472:	2201      	movs	r2, #1
 8001474:	491e      	ldr	r1, [pc, #120]	; (80014f0 <hts221_hmd_interpol_init+0xb8>)
 8001476:	203b      	movs	r0, #59	; 0x3b
 8001478:	f7ff fea8 	bl	80011cc <hts221_read>
	hts221_read(HTS221_H1_OUT_L, &buffer_hmdt[0], 1);
 800147c:	2201      	movs	r2, #1
 800147e:	491d      	ldr	r1, [pc, #116]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 8001480:	203a      	movs	r0, #58	; 0x3a
 8001482:	f7ff fea3 	bl	80011cc <hts221_read>
	H1_OUT=((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0];
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <hts221_hmd_interpol_init+0xbc>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <hts221_hmd_interpol_init+0xc4>)
 800149c:	801a      	strh	r2, [r3, #0]



	hts221_read(HTS221_H0_rH_x2, &H0_rHx2, 1);
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	2030      	movs	r0, #48	; 0x30
 80014a6:	f7ff fe91 	bl	80011cc <hts221_read>
	hts221_read(HTS221_H1_rH_x2, &H1_rHx2, 1);
 80014aa:	1dbb      	adds	r3, r7, #6
 80014ac:	2201      	movs	r2, #1
 80014ae:	4619      	mov	r1, r3
 80014b0:	2031      	movs	r0, #49	; 0x31
 80014b2:	f7ff fe8b 	bl	80011cc <hts221_read>

	H0_rH=H0_rHx2/2.f;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <hts221_hmd_interpol_init+0xc8>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
	H1_rH=H1_rHx2/2.f;
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <hts221_hmd_interpol_init+0xcc>)
 80014e2:	edc3 7a00 	vstr	s15, [r3]
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000027d 	.word	0x2000027d
 80014f4:	2000027c 	.word	0x2000027c
 80014f8:	2000028c 	.word	0x2000028c
 80014fc:	2000028e 	.word	0x2000028e
 8001500:	20000290 	.word	0x20000290
 8001504:	20000294 	.word	0x20000294

08001508 <hts221_init>:

void hts221_init()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	hts221_check_ID();
 800150c:	f7ff fee2 	bl	80012d4 <hts221_check_ID>

	hts221_write(HTS221_CTRL_REG1, HTS221_PD_ON | HTS221_BDU_ON |HTS221_ODR_12HZ);
 8001510:	2187      	movs	r1, #135	; 0x87
 8001512:	2020      	movs	r0, #32
 8001514:	f7ff feb0 	bl	8001278 <hts221_write>

	hts221_tmp_interpol_init();
 8001518:	f7ff ff12 	bl	8001340 <hts221_tmp_interpol_init>

	hts221_hmd_interpol_init();
 800151c:	f7ff ff8c 	bl	8001438 <hts221_hmd_interpol_init>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <hts221_data_read>:

void hts221_data_read()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	hts221_read_IT(HTS221_TEMP_OUT_H, &buffer_tmp[1], 1);
 8001528:	2201      	movs	r2, #1
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <hts221_data_read+0x30>)
 800152c:	202b      	movs	r0, #43	; 0x2b
 800152e:	f7ff fe7d 	bl	800122c <hts221_read_IT>
	hts221_read_IT(HTS221_TEMP_OUT_L, &buffer_tmp[0], 1);
 8001532:	2201      	movs	r2, #1
 8001534:	4908      	ldr	r1, [pc, #32]	; (8001558 <hts221_data_read+0x34>)
 8001536:	202a      	movs	r0, #42	; 0x2a
 8001538:	f7ff fe78 	bl	800122c <hts221_read_IT>
	hts221_read_IT(HTS221_HUMIDITY_OUT_H, &buffer_hmdt[1], 1);
 800153c:	2201      	movs	r2, #1
 800153e:	4907      	ldr	r1, [pc, #28]	; (800155c <hts221_data_read+0x38>)
 8001540:	2029      	movs	r0, #41	; 0x29
 8001542:	f7ff fe73 	bl	800122c <hts221_read_IT>
	hts221_read_IT(HTS221_HUMIDITY_OUT_L, &buffer_hmdt[0], 1);
 8001546:	2201      	movs	r2, #1
 8001548:	4905      	ldr	r1, [pc, #20]	; (8001560 <hts221_data_read+0x3c>)
 800154a:	2028      	movs	r0, #40	; 0x28
 800154c:	f7ff fe6e 	bl	800122c <hts221_read_IT>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000279 	.word	0x20000279
 8001558:	20000278 	.word	0x20000278
 800155c:	2000027d 	.word	0x2000027d
 8001560:	2000027c 	.word	0x2000027c

08001564 <hts221_UART_data_tx>:

void hts221_UART_data_tx()
{
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af04      	add	r7, sp, #16
	if(xSemaphoreTake(hts221_rw_data_accsess_mutex,100))
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <hts221_UART_data_tx+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2164      	movs	r1, #100	; 0x64
 8001570:	4618      	mov	r0, r3
 8001572:	f008 f8fb 	bl	800976c <xQueueSemaphoreTake>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 808c 	beq.w	8001696 <hts221_UART_data_tx+0x132>
	{
		float tmp  = ((uint16_t)buffer_tmp[1]<<8) | (uint16_t)buffer_tmp[0];
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <hts221_UART_data_tx+0x140>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <hts221_UART_data_tx+0x140>)
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	edc7 7a01 	vstr	s15, [r7, #4]
		 * to odczyt spada. Współczynnik kierunkowy interpolacji (wyznaczony zgodnie z instrukcją)
		 * jest ewidentnie dodatni, więc nie wiem o co chodzi.
		 *
		 *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

		float hmdt =65536 - (((uint16_t)buffer_hmdt[1]<<8) | buffer_hmdt[0]);
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <hts221_UART_data_tx+0x144>)
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <hts221_UART_data_tx+0x144>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ae:	edc7 7a00 	vstr	s15, [r7]
		xSemaphoreGive(hts221_rw_data_accsess_mutex);
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <hts221_UART_data_tx+0x13c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	f007 fe5c 	bl	8009278 <xQueueGenericSend>


		tmp=((T1_degC-T0_degC)*(tmp-T0_OUT))/(T1_OUT-T0_OUT) + T0_degC;
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <hts221_UART_data_tx+0x148>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <hts221_UART_data_tx+0x14c>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <hts221_UART_data_tx+0x150>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80015e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <hts221_UART_data_tx+0x154>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <hts221_UART_data_tx+0x150>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <hts221_UART_data_tx+0x14c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160a:	edc7 7a01 	vstr	s15, [r7, #4]


		hmdt=(((H1_rH-H0_rH))*(hmdt-H0_OUT))/(H1_OUT-H0_OUT) + H0_rH;
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <hts221_UART_data_tx+0x158>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <hts221_UART_data_tx+0x15c>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <hts221_UART_data_tx+0x160>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	edd7 6a00 	vldr	s13, [r7]
 800162e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001632:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <hts221_UART_data_tx+0x164>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <hts221_UART_data_tx+0x160>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <hts221_UART_data_tx+0x15c>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a00 	vstr	s15, [r7]

		snprintf((char*)buffer_hts221_UART,sizeof(buffer_hts221_UART),"Temp: %3.4f[C]; Humid: %3.4f[%%]\n\r",tmp,hmdt);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f7fe ff6e 	bl	8000548 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001674:	e9cd 4500 	strd	r4, r5, [sp]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <hts221_UART_data_tx+0x168>)
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4814      	ldr	r0, [pc, #80]	; (80016d0 <hts221_UART_data_tx+0x16c>)
 800167e:	f00b fb05 	bl	800cc8c <sniprintf>

		HAL_UART_Transmit_IT(&huart2, buffer_hts221_UART, strlen((char*)buffer_hts221_UART));
 8001682:	4813      	ldr	r0, [pc, #76]	; (80016d0 <hts221_UART_data_tx+0x16c>)
 8001684:	f7fe fdf4 	bl	8000270 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4910      	ldr	r1, [pc, #64]	; (80016d0 <hts221_UART_data_tx+0x16c>)
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <hts221_UART_data_tx+0x170>)
 8001692:	f006 f95d 	bl	8007950 <HAL_UART_Transmit_IT>
	}


}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000029c 	.word	0x2000029c
 80016a4:	20000278 	.word	0x20000278
 80016a8:	2000027c 	.word	0x2000027c
 80016ac:	20000288 	.word	0x20000288
 80016b0:	20000284 	.word	0x20000284
 80016b4:	2000027e 	.word	0x2000027e
 80016b8:	20000280 	.word	0x20000280
 80016bc:	20000294 	.word	0x20000294
 80016c0:	20000290 	.word	0x20000290
 80016c4:	2000028c 	.word	0x2000028c
 80016c8:	2000028e 	.word	0x2000028e
 80016cc:	08010738 	.word	0x08010738
 80016d0:	20000238 	.word	0x20000238
 80016d4:	20000398 	.word	0x20000398

080016d8 <hts221_data_Task>:

void hts221_data_Task(void* param)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(hts221_read_ready)
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <hts221_data_Task+0x24>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0fa      	beq.n	80016e0 <hts221_data_Task+0x8>
		{
			hts221_read_ready=false;
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <hts221_data_Task+0x24>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]

			hts221_data_read();
 80016f0:	f7ff ff18 	bl	8001524 <hts221_data_read>

			hts221_UART_data_tx();
 80016f4:	f7ff ff36 	bl	8001564 <hts221_UART_data_tx>
		if(hts221_read_ready)
 80016f8:	e7f2      	b.n	80016e0 <hts221_data_Task+0x8>
 80016fa:	bf00      	nop
 80016fc:	200001f5 	.word	0x200001f5

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001706:	f000 fdc9 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170a:	f000 f891 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170e:	f000 fa03 	bl	8001b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001712:	f000 f9d1 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001716:	f000 f91d 	bl	8001954 <MX_TIM2_Init>
  MX_TIM4_Init();
 800171a:	f000 f975 	bl	8001a08 <MX_TIM4_Init>
  MX_I2C1_Init();
 800171e:	f000 f8d9 	bl	80018d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001722:	f007 fa8b 	bl	8008c3c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  tx_UART_mutex=xSemaphoreCreateBinary();
 8001726:	2203      	movs	r2, #3
 8001728:	2100      	movs	r1, #0
 800172a:	2001      	movs	r0, #1
 800172c:	f007 fd46 	bl	80091bc <xQueueGenericCreate>
 8001730:	4603      	mov	r3, r0
 8001732:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <main+0xe8>)
 8001734:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(tx_UART_mutex);
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <main+0xe8>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	f007 fd9a 	bl	8009278 <xQueueGenericSend>

  hts221_rw_data_accsess_mutex = xSemaphoreCreateBinary();
 8001744:	2203      	movs	r2, #3
 8001746:	2100      	movs	r1, #0
 8001748:	2001      	movs	r0, #1
 800174a:	f007 fd37 	bl	80091bc <xQueueGenericCreate>
 800174e:	4603      	mov	r3, r0
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <main+0xec>)
 8001752:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(hts221_rw_data_accsess_mutex);
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <main+0xec>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	f007 fd8b 	bl	8009278 <xQueueGenericSend>
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  init_timers();
 8001762:	f7ff fce9 	bl	8001138 <init_timers>
  hts221_init();
 8001766:	f7ff fecf 	bl	8001508 <hts221_init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <main+0xf0>)
 800176c:	2100      	movs	r1, #0
 800176e:	4821      	ldr	r0, [pc, #132]	; (80017f4 <main+0xf4>)
 8001770:	f007 faae 	bl	8008cd0 <osThreadNew>
 8001774:	4603      	mov	r3, r0
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <main+0xf8>)
 8001778:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(blue_button_pushed, "blue_button_pushed", 128, NULL, 5, NULL);
 800177a:	2300      	movs	r3, #0
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2305      	movs	r3, #5
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	491d      	ldr	r1, [pc, #116]	; (80017fc <main+0xfc>)
 8001788:	481d      	ldr	r0, [pc, #116]	; (8001800 <main+0x100>)
 800178a:	f008 fade 	bl	8009d4a <xTaskCreate>
  xTaskCreate(hts221_data_Task, "hts221_data_Task", 256, NULL, 5, NULL);
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2305      	movs	r3, #5
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179c:	4919      	ldr	r1, [pc, #100]	; (8001804 <main+0x104>)
 800179e:	481a      	ldr	r0, [pc, #104]	; (8001808 <main+0x108>)
 80017a0:	f008 fad3 	bl	8009d4a <xTaskCreate>

  xTaskCreate(GPIO_EXTI13_IR_task, "GPIO_EXTI13_IR_task", 128, NULL, 5, &GPIO_EXTI13_IR_task_handle);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <main+0x10c>)
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2305      	movs	r3, #5
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	4917      	ldr	r1, [pc, #92]	; (8001810 <main+0x110>)
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <main+0x114>)
 80017b4:	f008 fac9 	bl	8009d4a <xTaskCreate>
  xTaskCreate(UART2_TX_CPLT_IR_task, "UART2_TX_CPLT_IR_task", 128, NULL, 5, &UART2_TX_CPLT_IR_task_handle);
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <main+0x118>)
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2305      	movs	r3, #5
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	4915      	ldr	r1, [pc, #84]	; (800181c <main+0x11c>)
 80017c6:	4816      	ldr	r0, [pc, #88]	; (8001820 <main+0x120>)
 80017c8:	f008 fabf 	bl	8009d4a <xTaskCreate>
  xTaskCreate(I2C_MemRx_Cplt_IR_task, "I2C_MemRx_Cplt_IR_task", 128, NULL, 5, &I2C_MemRx_Cplt_IR_task_handle);
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <main+0x124>)
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	2305      	movs	r3, #5
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	4913      	ldr	r1, [pc, #76]	; (8001828 <main+0x128>)
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <main+0x12c>)
 80017dc:	f008 fab5 	bl	8009d4a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017e0:	f007 fa50 	bl	8008c84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <main+0xe4>
 80017e6:	bf00      	nop
 80017e8:	20000298 	.word	0x20000298
 80017ec:	2000029c 	.word	0x2000029c
 80017f0:	080107e0 	.word	0x080107e0
 80017f4:	08001bcd 	.word	0x08001bcd
 80017f8:	20000420 	.word	0x20000420
 80017fc:	0801075c 	.word	0x0801075c
 8001800:	08001165 	.word	0x08001165
 8001804:	08010770 	.word	0x08010770
 8001808:	080016d9 	.word	0x080016d9
 800180c:	200002a0 	.word	0x200002a0
 8001810:	08010784 	.word	0x08010784
 8001814:	08001035 	.word	0x08001035
 8001818:	200002a4 	.word	0x200002a4
 800181c:	08010798 	.word	0x08010798
 8001820:	080010a9 	.word	0x080010a9
 8001824:	200002a8 	.word	0x200002a8
 8001828:	080107b0 	.word	0x080107b0
 800182c:	08001115 	.word	0x08001115

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	; 0x58
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2244      	movs	r2, #68	; 0x44
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00b fabb 	bl	800cdba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001856:	f003 fa7d 	bl	8004d54 <HAL_PWREx_ControlVoltageScaling>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001860:	f000 f9d8 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001864:	2302      	movs	r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186e:	2310      	movs	r3, #16
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001876:	2302      	movs	r3, #2
 8001878:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800187e:	230a      	movs	r3, #10
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001882:	2307      	movs	r3, #7
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001886:	2302      	movs	r3, #2
 8001888:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800188a:	2302      	movs	r3, #2
 800188c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fab4 	bl	8004e00 <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800189e:	f000 f9b9 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a6:	2303      	movs	r3, #3
 80018a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	2104      	movs	r1, #4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fe7c 	bl	80055b8 <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018c6:	f000 f9a5 	bl	8001c14 <Error_Handler>
  }
}
 80018ca:	bf00      	nop
 80018cc:	3758      	adds	r7, #88	; 0x58
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_I2C1_Init+0x74>)
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <MX_I2C1_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_I2C1_Init+0x74>)
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <MX_I2C1_Init+0x7c>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_I2C1_Init+0x74>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_I2C1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <MX_I2C1_Init+0x74>)
 8001910:	f001 f836 	bl	8002980 <HAL_I2C_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800191a:	f000 f97b 	bl	8001c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <MX_I2C1_Init+0x74>)
 8001922:	f003 f971 	bl	8004c08 <HAL_I2CEx_ConfigAnalogFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 f972 	bl	8001c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_I2C1_Init+0x74>)
 8001934:	f003 f9b3 	bl	8004c9e <HAL_I2CEx_ConfigDigitalFilter>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f969 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002ac 	.word	0x200002ac
 800194c:	40005400 	.word	0x40005400
 8001950:	10909cec 	.word	0x10909cec

08001954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_TIM2_Init+0xb0>)
 800197a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM2_Init+0xb0>)
 8001982:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_TIM2_Init+0xb0>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 153;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_TIM2_Init+0xb0>)
 8001990:	2299      	movs	r2, #153	; 0x99
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_TIM2_Init+0xb0>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_TIM2_Init+0xb0>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a0:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM2_Init+0xb0>)
 80019a2:	f004 feac 	bl	80066fe <HAL_TIM_PWM_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 f932 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_TIM2_Init+0xb0>)
 80019c0:	f005 fe48 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80019ca:	f000 f923 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ce:	2360      	movs	r3, #96	; 0x60
 80019d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0xb0>)
 80019e6:	f005 f963 	bl	8006cb0 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019f0:	f000 f910 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0xb0>)
 80019f6:	f000 f9ed 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000300 	.word	0x20000300

08001a08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a2e:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <MX_TIM4_Init+0xac>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a34:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 181;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a42:	22b5      	movs	r2, #181	; 0xb5
 8001a44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001a52:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a54:	f004 fdfc 	bl	8006650 <HAL_TIM_OC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001a5e:	f000 f8d9 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a72:	f005 fdef 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001a7c:	f000 f8ca 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM4_Init+0xa8>)
 8001a98:	f005 f890 	bl	8006bbc <HAL_TIM_OC_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001aa2:	f000 f8b7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000034c 	.word	0x2000034c
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_USART2_UART_Init+0x5c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_USART2_UART_Init+0x58>)
 8001afc:	f005 fe50 	bl	80077a0 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b06:	f000 f885 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000398 	.word	0x20000398
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_GPIO_Init+0xac>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <MX_GPIO_Init+0xb0>)
 8001ba6:	f000 fd29 	bl	80025fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	2028      	movs	r0, #40	; 0x28
 8001bb0:	f000 fc6c 	bl	800248c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bb4:	2028      	movs	r0, #40	; 0x28
 8001bb6:	f000 fc85 	bl	80024c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000800 	.word	0x48000800

08001bcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f007 f90d 	bl	8008df4 <osDelay>
 8001bda:	e7fb      	b.n	8001bd4 <StartDefaultTask+0x8>

08001bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim==&htim4)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		hts221_read_ready=true;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001bfc:	f000 fb6e 	bl	80022dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000034c 	.word	0x2000034c
 8001c0c:	200001f5 	.word	0x200001f5
 8001c10:	40001000 	.word	0x40001000

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	210f      	movs	r1, #15
 8001c5a:	f06f 0001 	mvn.w	r0, #1
 8001c5e:	f000 fc15 	bl	800248c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0ac      	sub	sp, #176	; 0xb0
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2288      	movs	r2, #136	; 0x88
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00b f892 	bl	800cdba <memset>
  if(hi2c->Instance==I2C1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_I2C_MspInit+0xd0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d14b      	bne.n	8001d38 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fed9 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cb8:	f7ff ffac 	bl	8001c14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4813      	ldr	r0, [pc, #76]	; (8001d48 <HAL_I2C_MspInit+0xd8>)
 8001cfc:	f000 fc7e 	bl	80025fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_I2C_MspInit+0xd4>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	201f      	movs	r0, #31
 8001d1e:	f000 fbb5 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d22:	201f      	movs	r0, #31
 8001d24:	f000 fbce 	bl	80024c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2105      	movs	r1, #5
 8001d2c:	2020      	movs	r0, #32
 8001d2e:	f000 fbad 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d32:	2020      	movs	r0, #32
 8001d34:	f000 fbc6 	bl	80024c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	37b0      	adds	r7, #176	; 0xb0
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40005400 	.word	0x40005400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000400 	.word	0x48000400

08001d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_TIM_PWM_MspInit+0x38>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_TIM_PWM_MspInit+0x38>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_TIM_PWM_MspInit+0x38>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_TIM_OC_MspInit+0x44>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_TIM_OC_MspInit+0x48>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_TIM_OC_MspInit+0x48>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_TIM_OC_MspInit+0x48>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	201e      	movs	r0, #30
 8001db8:	f000 fb68 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dbc:	201e      	movs	r0, #30
 8001dbe:	f000 fb81 	bl	80024c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df4:	d11c      	bne.n	8001e30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_TIM_MspPostInit+0x64>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_TIM_MspPostInit+0x64>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_MspPostInit+0x64>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f000 fbe6 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0ac      	sub	sp, #176	; 0xb0
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2288      	movs	r2, #136	; 0x88
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00a ffac 	bl	800cdba <memset>
  if(huart->Instance==USART2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_UART_MspInit+0xc0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d143      	bne.n	8001ef4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fdf3 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e84:	f7ff fec6 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0xc4>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eda:	4619      	mov	r1, r3
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee0:	f000 fb8c 	bl	80025fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	2026      	movs	r0, #38	; 0x26
 8001eea:	f000 facf 	bl	800248c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eee:	2026      	movs	r0, #38	; 0x26
 8001ef0:	f000 fae8 	bl	80024c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	37b0      	adds	r7, #176	; 0xb0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40004400 	.word	0x40004400
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_InitTick+0xe0>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a33      	ldr	r2, [pc, #204]	; (8001fe4 <HAL_InitTick+0xe0>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_InitTick+0xe0>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2a:	f107 0210 	add.w	r2, r7, #16
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fd03 	bl	8005940 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f44:	f003 fcd0 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8001f48:	6378      	str	r0, [r7, #52]	; 0x34
 8001f4a:	e004      	b.n	8001f56 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f4c:	f003 fccc 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8001f50:	4603      	mov	r3, r0
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_InitTick+0xe4>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	3b01      	subs	r3, #1
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_InitTick+0xe8>)
 8001f66:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <HAL_InitTick+0xec>)
 8001f68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_InitTick+0xe8>)
 8001f6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_InitTick+0xe8>)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_InitTick+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_InitTick+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_InitTick+0xe8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f8a:	4818      	ldr	r0, [pc, #96]	; (8001fec <HAL_InitTick+0xe8>)
 8001f8c:	f004 fa26 	bl	80063dc <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <HAL_InitTick+0xe8>)
 8001fa0:	f004 fae6 	bl	8006570 <HAL_TIM_Base_Start_IT>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001faa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d111      	bne.n	8001fd6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb2:	2036      	movs	r0, #54	; 0x36
 8001fb4:	f000 fa86 	bl	80024c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	d808      	bhi.n	8001fd0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	2036      	movs	r0, #54	; 0x36
 8001fc4:	f000 fa62 	bl	800248c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_InitTick+0xf0>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e002      	b.n	8001fd6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	431bde83 	.word	0x431bde83
 8001fec:	20000424 	.word	0x20000424
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <TIM4_IRQHandler+0x10>)
 800202a:	f004 fcc5 	bl	80069b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000034c 	.word	0x2000034c

08002038 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <I2C1_EV_IRQHandler+0x10>)
 800203e:	f000 ffef 	bl	8003020 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002ac 	.word	0x200002ac

0800204c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <I2C1_ER_IRQHandler+0x10>)
 8002052:	f000 ffff 	bl	8003054 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200002ac 	.word	0x200002ac

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f005 fcd1 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000398 	.word	0x20000398

08002074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002078:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800207c:	f000 fc68 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM6_DAC_IRQHandler+0x10>)
 800208a:	f004 fc95 	bl	80069b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000424 	.word	0x20000424

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b2:	f00a ff2b 	bl	800cf0c <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0x12>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
  }

  return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
  }
  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f00a fe90 	bl	800cf0c <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20018000 	.word	0x20018000
 8002218:	00000400 	.word	0x00000400
 800221c:	20000470 	.word	0x20000470
 8002220:	2000d700 	.word	0x2000d700

08002224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7ff ffea 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	; (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <LoopForever+0xe>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	; (8002294 <LoopForever+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f00a fe4f 	bl	800cf18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800227a:	f7ff fa41 	bl	8001700 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800228c:	08010c88 	.word	0x08010c88
  ldr r2, =_sbss
 8002290:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002294:	2000d6fc 	.word	0x2000d6fc

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>
	...

0800229c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_Init+0x3c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_Init+0x3c>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b2:	2003      	movs	r0, #3
 80022b4:	f000 f8df 	bl	8002476 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b8:	200f      	movs	r0, #15
 80022ba:	f7ff fe23 	bl	8001f04 <HAL_InitTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	e001      	b.n	80022ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ca:	f7ff fca9 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ce:	79fb      	ldrb	r3, [r7, #7]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000474 	.word	0x20000474

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000474 	.word	0x20000474

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <__NVIC_EnableIRQ+0x38>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff4c 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800249e:	f7ff ff61 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	6978      	ldr	r0, [r7, #20]
 80024aa:	f7ff ffb1 	bl	8002410 <NVIC_EncodePriority>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff80 	bl	80023bc <__NVIC_SetPriority>
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff54 	bl	8002380 <__NVIC_EnableIRQ>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d008      	beq.n	800250a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 020e 	bic.w	r2, r2, #14
 8002518:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f003 021c 	and.w	r2, r3, #28
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d005      	beq.n	8002580 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2204      	movs	r2, #4
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e029      	b.n	80025d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020e 	bic.w	r2, r2, #14
 800258e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f003 021c 	and.w	r2, r3, #28
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    }
  }
  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025ec:	b2db      	uxtb	r3, r3
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	e17f      	b.n	800290c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8171 	beq.w	8002906 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d005      	beq.n	800263c <HAL_GPIO_Init+0x40>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d130      	bne.n	800269e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002672:	2201      	movs	r2, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0201 	and.w	r2, r3, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d118      	bne.n	80026dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d017      	beq.n	8002718 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d123      	bne.n	800276c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	6939      	ldr	r1, [r7, #16]
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80ac 	beq.w	8002906 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_GPIO_Init+0x330>)
 80027b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <HAL_GPIO_Init+0x330>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_GPIO_Init+0x330>)
 80027bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027c6:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <HAL_GPIO_Init+0x334>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x242>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4f      	ldr	r2, [pc, #316]	; (8002934 <HAL_GPIO_Init+0x338>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x23e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_GPIO_Init+0x33c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x23a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_GPIO_Init+0x340>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x236>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4c      	ldr	r2, [pc, #304]	; (8002940 <HAL_GPIO_Init+0x344>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x232>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4b      	ldr	r2, [pc, #300]	; (8002944 <HAL_GPIO_Init+0x348>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x22e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_GPIO_Init+0x34c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x22a>
 8002822:	2306      	movs	r3, #6
 8002824:	e00c      	b.n	8002840 <HAL_GPIO_Init+0x244>
 8002826:	2307      	movs	r3, #7
 8002828:	e00a      	b.n	8002840 <HAL_GPIO_Init+0x244>
 800282a:	2305      	movs	r3, #5
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x244>
 800282e:	2304      	movs	r3, #4
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x244>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x244>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x244>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x244>
 800283e:	2300      	movs	r3, #0
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002850:	4937      	ldr	r1, [pc, #220]	; (8002930 <HAL_GPIO_Init+0x334>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_GPIO_Init+0x350>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_GPIO_Init+0x350>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_GPIO_Init+0x350>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_GPIO_Init+0x350>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_GPIO_Init+0x350>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_GPIO_Init+0x350>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_GPIO_Init+0x350>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_GPIO_Init+0x350>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	f47f ae78 	bne.w	800260c <HAL_GPIO_Init+0x10>
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	48000400 	.word	0x48000400
 8002938:	48000800 	.word	0x48000800
 800293c:	48000c00 	.word	0x48000c00
 8002940:	48001000 	.word	0x48001000
 8002944:	48001400 	.word	0x48001400
 8002948:	48001800 	.word	0x48001800
 800294c:	40010400 	.word	0x40010400

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fb3e 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e08d      	b.n	8002aae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff f962 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e006      	b.n	8002a08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d108      	bne.n	8002a22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	e007      	b.n	8002a32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69d9      	ldr	r1, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	460b      	mov	r3, r1
 8002acc:	813b      	strh	r3, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 80f9 	bne.w	8002cd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_I2C_Mem_Write+0x34>
 8002ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ed      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Mem_Write+0x4e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0e6      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b0e:	f7ff fbf9 	bl	8002304 <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2319      	movs	r3, #25
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f001 fda4 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d1      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b58:	88f8      	ldrh	r0, [r7, #6]
 8002b5a:	893a      	ldrh	r2, [r7, #8]
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	4603      	mov	r3, r0
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 f833 	bl	8003bd4 <I2C_RequestMemoryWrite>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0a9      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2bff      	cmp	r3, #255	; 0xff
 8002b88:	d90e      	bls.n	8002ba8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	8979      	ldrh	r1, [r7, #10]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f001 ff1d 	bl	80049e0 <I2C_TransferConfig>
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	8979      	ldrh	r1, [r7, #10]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f001 ff0c 	bl	80049e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f001 fd9d 	bl	800470c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e07b      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d034      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x1c8>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d130      	bne.n	8002c80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	2200      	movs	r2, #0
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f001 fd20 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e04d      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d90e      	bls.n	8002c60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	2300      	movs	r3, #0
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 fec1 	bl	80049e0 <I2C_TransferConfig>
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	8979      	ldrh	r1, [r7, #10]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f001 feb0 	bl	80049e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d19e      	bne.n	8002bc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 fd83 	bl	800479a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01a      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_I2C_Mem_Write+0x224>)
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	fe00e800 	.word	0xfe00e800

08002ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	813b      	strh	r3, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	f040 80fd 	bne.w	8002f02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_I2C_Mem_Read+0x34>
 8002d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0f1      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x4e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0ea      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d36:	f7ff fae5 	bl	8002304 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2319      	movs	r3, #25
 8002d42:	2201      	movs	r2, #1
 8002d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f001 fc90 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0d5      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2222      	movs	r2, #34	; 0x22
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d80:	88f8      	ldrh	r0, [r7, #6]
 8002d82:	893a      	ldrh	r2, [r7, #8]
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4603      	mov	r3, r0
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 ff73 	bl	8003c7c <I2C_RequestMemoryRead>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0ad      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2bff      	cmp	r3, #255	; 0xff
 8002db0:	d90e      	bls.n	8002dd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	22ff      	movs	r2, #255	; 0xff
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <HAL_I2C_Mem_Read+0x22c>)
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f001 fe09 	bl	80049e0 <I2C_TransferConfig>
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	8979      	ldrh	r1, [r7, #10]
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_I2C_Mem_Read+0x22c>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f001 fdf8 	bl	80049e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	2200      	movs	r2, #0
 8002df8:	2104      	movs	r1, #4
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f001 fc37 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e07c      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d034      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x1d0>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d130      	bne.n	8002eb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f001 fc08 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e04d      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2bff      	cmp	r3, #255	; 0xff
 8002e70:	d90e      	bls.n	8002e90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	2300      	movs	r3, #0
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f001 fda9 	bl	80049e0 <I2C_TransferConfig>
 8002e8e:	e00f      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f001 fd98 	bl	80049e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d19a      	bne.n	8002df0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 fc6b 	bl	800479a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e01a      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_I2C_Mem_Read+0x230>)
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	80002400 	.word	0x80002400
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	460b      	mov	r3, r1
 8002f28:	813b      	strh	r3, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d166      	bne.n	8003008 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_I2C_Mem_Read_IT+0x32>
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e05b      	b.n	800300a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e051      	b.n	800300a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_Mem_Read_IT+0x60>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e04a      	b.n	800300a <HAL_I2C_Mem_Read_IT+0xf6>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2222      	movs	r2, #34	; 0x22
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8bba      	ldrh	r2, [r7, #28]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_I2C_Mem_Read_IT+0x100>)
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_I2C_Mem_Read_IT+0x104>)
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002faa:	897a      	ldrh	r2, [r7, #10]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d109      	bne.n	8002fca <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb6:	893b      	ldrh	r3, [r7, #8]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8002fc8:	e00b      	b.n	8002fe2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	8979      	ldrh	r1, [r7, #10]
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_I2C_Mem_Read_IT+0x108>)
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2300      	movs	r3, #0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f001 fcf6 	bl	80049e0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f001 fd20 	bl	8004a44 <I2C_Enable_IRQ>

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ffff0000 	.word	0xffff0000
 8003018:	080031c9 	.word	0x080031c9
 800301c:	80002000 	.word	0x80002000

08003020 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
  }
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003094:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00f      	beq.n	80030ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 030b 	and.w	r3, r3, #11
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f001 f95d 	bl	80043bc <I2C_ITError>
  }
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
 8003166:	4613      	mov	r3, r2
 8003168:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80031d4:	4b8d      	ldr	r3, [pc, #564]	; (800340c <I2C_Mem_ISR_IT+0x244>)
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <I2C_Mem_ISR_IT+0x22>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e10c      	b.n	8003404 <I2C_Mem_ISR_IT+0x23c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f001 f9e5 	bl	80045ea <I2C_Flush_TXDR>
 8003220:	e0dd      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d022      	beq.n	8003272 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01d      	beq.n	8003272 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003270:	e0b5      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d02c      	beq.n	80032d6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003282:	2b00      	cmp	r3, #0
 8003284:	d027      	beq.n	80032d6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d118      	bne.n	80032c2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80032c0:	e08d      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80032d4:	e083      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d037      	beq.n	800335a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02c      	beq.n	800334e <I2C_Mem_ISR_IT+0x186>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d128      	bne.n	800334e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d910      	bls.n	8003328 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	b299      	uxth	r1, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	b2da      	uxtb	r2, r3
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f001 fb5d 	bl	80049e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003326:	e017      	b.n	8003358 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	b299      	uxth	r1, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	b2da      	uxtb	r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f001 fb4a 	bl	80049e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334c:	e004      	b.n	8003358 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f001 f833 	bl	80043bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003356:	e042      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
 8003358:	e041      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d03c      	beq.n	80033de <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800336a:	2b00      	cmp	r3, #0
 800336c:	d037      	beq.n	80033de <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800336e:	2101      	movs	r1, #1
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f001 fbeb 	bl	8004b4c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003376:	2102      	movs	r1, #2
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f001 fb63 	bl	8004a44 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b22      	cmp	r3, #34	; 0x22
 8003388:	d101      	bne.n	800338e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <I2C_Mem_ISR_IT+0x248>)
 800338c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	d910      	bls.n	80033ba <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	b299      	uxth	r1, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f001 fb14 	bl	80049e0 <I2C_TransferConfig>
 80033b8:	e011      	b.n	80033de <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c8:	b299      	uxth	r1, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f001 fb01 	bl	80049e0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fdb3 	bl	8003f60 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	80002000 	.word	0x80002000
 8003410:	80002400 	.word	0x80002400

08003414 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <I2C_Slave_ISR_IT+0x24>
 8003434:	2302      	movs	r3, #2
 8003436:	e0e1      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e8>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003454:	6939      	ldr	r1, [r7, #16]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fe4a 	bl	80040f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d04b      	beq.n	80034fe <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800346c:	2b00      	cmp	r3, #0
 800346e:	d046      	beq.n	80034fe <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d128      	bne.n	80034cc <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b28      	cmp	r3, #40	; 0x28
 8003484:	d108      	bne.n	8003498 <I2C_Slave_ISR_IT+0x84>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800348c:	d104      	bne.n	8003498 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 ff3f 	bl	8004314 <I2C_ITListenCplt>
 8003496:	e031      	b.n	80034fc <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b29      	cmp	r3, #41	; 0x29
 80034a2:	d10e      	bne.n	80034c2 <I2C_Slave_ISR_IT+0xae>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034aa:	d00a      	beq.n	80034c2 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f001 f898 	bl	80045ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fcf3 	bl	8003ea6 <I2C_ITSlaveSeqCplt>
 80034c0:	e01c      	b.n	80034fc <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80034ca:	e08f      	b.n	80035ec <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <I2C_Slave_ISR_IT+0xda>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d17e      	bne.n	80035ec <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 ff61 	bl	80043bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80034fa:	e077      	b.n	80035ec <I2C_Slave_ISR_IT+0x1d8>
 80034fc:	e076      	b.n	80035ec <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800350e:	2b00      	cmp	r3, #0
 8003510:	d02a      	beq.n	8003568 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d018      	beq.n	800354e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d14b      	bne.n	80035f0 <I2C_Slave_ISR_IT+0x1dc>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800355e:	d047      	beq.n	80035f0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fca0 	bl	8003ea6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003566:	e043      	b.n	80035f0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800357c:	6939      	ldr	r1, [r7, #16]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fbd0 	bl	8003d24 <I2C_ITAddrCplt>
 8003584:	e035      	b.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d030      	beq.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02b      	beq.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d018      	beq.n	80035d6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80035d4:	e00d      	b.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d002      	beq.n	80035e4 <I2C_Slave_ISR_IT+0x1d0>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fc5e 	bl	8003ea6 <I2C_ITSlaveSeqCplt>
 80035ea:	e002      	b.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80035f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <I2C_Master_ISR_DMA+0x1a>
 800361a:	2302      	movs	r3, #2
 800361c:	e0d9      	b.n	80037d2 <I2C_Master_ISR_DMA+0x1ce>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003636:	2b00      	cmp	r3, #0
 8003638:	d011      	beq.n	800365e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2210      	movs	r2, #16
 8003640:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800364e:	2120      	movs	r1, #32
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f001 f9f7 	bl	8004a44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 ffc7 	bl	80045ea <I2C_Flush_TXDR>
 800365c:	e0b4      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d071      	beq.n	800374c <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800366e:	2b00      	cmp	r3, #0
 8003670:	d06c      	beq.n	800374c <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003680:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d04e      	beq.n	800372a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003698:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2bff      	cmp	r3, #255	; 0xff
 80036a2:	d906      	bls.n	80036b2 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80036aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e010      	b.n	80036d4 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c4:	d003      	beq.n	80036ce <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e002      	b.n	80036d4 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80036ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8a79      	ldrh	r1, [r7, #18]
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f001 f97c 	bl	80049e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b22      	cmp	r3, #34	; 0x22
 8003704:	d108      	bne.n	8003718 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003714:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003716:	e057      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003726:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003728:	e04e      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003738:	d003      	beq.n	8003742 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb76 	bl	8003e2c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003740:	e042      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003742:	2140      	movs	r1, #64	; 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fe39 	bl	80043bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800374a:	e03d      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d028      	beq.n	80037a8 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d025      	beq.n	80037c6 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003782:	d108      	bne.n	8003796 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003792:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003794:	e017      	b.n	80037c6 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb48 	bl	8003e2c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800379c:	e013      	b.n	80037c6 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fe0b 	bl	80043bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037a6:	e00e      	b.n	80037c6 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fbce 	bl	8003f60 <I2C_ITMasterCplt>
 80037c4:	e000      	b.n	80037c8 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80037c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80037e8:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <I2C_Mem_ISR_DMA+0x244>)
 80037ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <I2C_Mem_ISR_DMA+0x1e>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e10e      	b.n	8003a18 <I2C_Mem_ISR_DMA+0x23c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2210      	movs	r2, #16
 800381c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800382a:	2120      	movs	r1, #32
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f001 f909 	bl	8004a44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fed9 	bl	80045ea <I2C_Flush_TXDR>
 8003838:	e0e9      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00e      	beq.n	8003862 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003856:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
 8003860:	e0d5      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d05f      	beq.n	800392c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003872:	2b00      	cmp	r3, #0
 8003874:	d05a      	beq.n	800392c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003876:	2101      	movs	r1, #1
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f001 f967 	bl	8004b4c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800387e:	2110      	movs	r1, #16
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f001 f8df 	bl	8004a44 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d048      	beq.n	8003922 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d910      	bls.n	80038bc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	b299      	uxth	r1, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f001 f893 	bl	80049e0 <I2C_TransferConfig>
 80038ba:	e011      	b.n	80038e0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	b299      	uxth	r1, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f001 f880 	bl	80049e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d108      	bne.n	8003910 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800390e:	e07e      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003920:	e075      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fd49 	bl	80043bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800392a:	e070      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05d      	beq.n	80039f2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800393c:	2b00      	cmp	r3, #0
 800393e:	d058      	beq.n	80039f2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003940:	2101      	movs	r1, #1
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f001 f902 	bl	8004b4c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003948:	2110      	movs	r1, #16
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 f87a 	bl	8004a44 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b22      	cmp	r3, #34	; 0x22
 800395a:	d101      	bne.n	8003960 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <I2C_Mem_ISR_DMA+0x248>)
 800395e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2bff      	cmp	r3, #255	; 0xff
 8003968:	d910      	bls.n	800398c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	b299      	uxth	r1, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	b2da      	uxtb	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f001 f82b 	bl	80049e0 <I2C_TransferConfig>
 800398a:	e011      	b.n	80039b0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	b299      	uxth	r1, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 f818 	bl	80049e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b22      	cmp	r3, #34	; 0x22
 80039cc:	d108      	bne.n	80039e0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039dc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039de:	e016      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039f0:	e00d      	b.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 faa9 	bl	8003f60 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	80002000 	.word	0x80002000
 8003a24:	80002400 	.word	0x80002400

08003a28 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <I2C_Slave_ISR_DMA+0x24>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0bf      	b.n	8003bcc <I2C_Slave_ISR_DMA+0x1a4>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb40 	bl	80040f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8095 	beq.w	8003ba6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 808f 	beq.w	8003ba6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07d      	beq.n	8003b98 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00c      	beq.n	8003abe <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d128      	bne.n	8003b38 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b28      	cmp	r3, #40	; 0x28
 8003af0:	d108      	bne.n	8003b04 <I2C_Slave_ISR_DMA+0xdc>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003af8:	d104      	bne.n	8003b04 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fc09 	bl	8004314 <I2C_ITListenCplt>
 8003b02:	e048      	b.n	8003b96 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b29      	cmp	r3, #41	; 0x29
 8003b0e:	d10e      	bne.n	8003b2e <I2C_Slave_ISR_DMA+0x106>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b16:	d00a      	beq.n	8003b2e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fd62 	bl	80045ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f9bd 	bl	8003ea6 <I2C_ITSlaveSeqCplt>
 8003b2c:	e033      	b.n	8003b96 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2210      	movs	r2, #16
 8003b34:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003b36:	e034      	b.n	8003ba2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	f043 0204 	orr.w	r2, r3, #4
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <I2C_Slave_ISR_DMA+0x13a>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b60:	d11f      	bne.n	8003ba2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b21      	cmp	r3, #33	; 0x21
 8003b66:	d002      	beq.n	8003b6e <I2C_Slave_ISR_DMA+0x146>
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b29      	cmp	r3, #41	; 0x29
 8003b6c:	d103      	bne.n	8003b76 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
 8003b74:	e008      	b.n	8003b88 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b22      	cmp	r3, #34	; 0x22
 8003b7a:	d002      	beq.n	8003b82 <I2C_Slave_ISR_DMA+0x15a>
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b80:	d102      	bne.n	8003b88 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2222      	movs	r2, #34	; 0x22
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fc14 	bl	80043bc <I2C_ITError>
      if (treatdmanack == 1U)
 8003b94:	e005      	b.n	8003ba2 <I2C_Slave_ISR_DMA+0x17a>
 8003b96:	e004      	b.n	8003ba2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ba0:	e00f      	b.n	8003bc2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003ba2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ba4:	e00d      	b.n	8003bc2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f8b1 	bl	8003d24 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <I2C_RequestMemoryWrite+0xa4>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 feef 	bl	80049e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fd80 	bl	800470c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e02c      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	629a      	str	r2, [r3, #40]	; 0x28
 8003c26:	e015      	b.n	8003c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fd66 	bl	800470c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e012      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fd05 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	80002000 	.word	0x80002000

08003c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <I2C_RequestMemoryRead+0xa4>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fe9c 	bl	80049e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fd2d 	bl	800470c <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e02c      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ccc:	e015      	b.n	8003cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fd13 	bl	800470c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e012      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fcb2 	bl	800466e <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	80002000 	.word	0x80002000

08003d24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d3a:	2b28      	cmp	r3, #40	; 0x28
 8003d3c:	d16a      	bne.n	8003e14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d138      	bne.n	8003df4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	89bb      	ldrh	r3, [r7, #12]
 8003d8a:	4053      	eors	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f003 0306 	and.w	r3, r3, #6
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11c      	bne.n	8003dd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d13b      	bne.n	8003e24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2208      	movs	r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dc2:	89ba      	ldrh	r2, [r7, #12]
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff f9c6 	bl	800315a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003dce:	e029      	b.n	8003e24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 feb7 	bl	8004b4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003de6:	89ba      	ldrh	r2, [r7, #12]
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff f9b4 	bl	800315a <HAL_I2C_AddrCallback>
}
 8003df2:	e017      	b.n	8003e24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fea7 	bl	8004b4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e06:	89ba      	ldrh	r2, [r7, #12]
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff f9a4 	bl	800315a <HAL_I2C_AddrCallback>
}
 8003e12:	e007      	b.n	8003e24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b21      	cmp	r3, #33	; 0x21
 8003e46:	d115      	bne.n	8003e74 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2211      	movs	r2, #17
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fe74 	bl	8004b4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff f94c 	bl	800310a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e72:	e014      	b.n	8003e9e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2212      	movs	r2, #18
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e88:	2102      	movs	r1, #2
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fe5e 	bl	8004b4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff f940 	bl	800311e <HAL_I2C_MasterRxCpltCallback>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e00c      	b.n	8003ef4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b29      	cmp	r3, #41	; 0x29
 8003efe:	d112      	bne.n	8003f26 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2228      	movs	r2, #40	; 0x28
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2221      	movs	r2, #33	; 0x21
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f0e:	2101      	movs	r1, #1
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fe1b 	bl	8004b4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff f907 	bl	8003132 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f24:	e017      	b.n	8003f56 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f30:	d111      	bne.n	8003f56 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2228      	movs	r2, #40	; 0x28
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2222      	movs	r2, #34	; 0x22
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f40:	2102      	movs	r1, #2
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fe02 	bl	8004b4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff f8f8 	bl	8003146 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2220      	movs	r2, #32
 8003f74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b21      	cmp	r3, #33	; 0x21
 8003f80:	d107      	bne.n	8003f92 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f82:	2101      	movs	r1, #1
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fde1 	bl	8004b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2211      	movs	r2, #17
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f90:	e00c      	b.n	8003fac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b22      	cmp	r3, #34	; 0x22
 8003f9c:	d106      	bne.n	8003fac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fdd3 	bl	8004b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2212      	movs	r2, #18
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b4c      	ldr	r3, [pc, #304]	; (80040e8 <I2C_ITMasterCplt+0x188>)
 8003fb8:	400b      	ands	r3, r1
 8003fba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a49      	ldr	r2, [pc, #292]	; (80040ec <I2C_ITMasterCplt+0x18c>)
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b60      	cmp	r3, #96	; 0x60
 8003ff0:	d10a      	bne.n	8004008 <I2C_ITMasterCplt+0xa8>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2db      	uxtb	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004006:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 faee 	bl	80045ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d002      	beq.n	8004026 <I2C_ITMasterCplt+0xc6>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f9c5 	bl	80043bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004032:	e054      	b.n	80040de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b21      	cmp	r3, #33	; 0x21
 800403e:	d124      	bne.n	800408a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d10b      	bne.n	8004072 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff f88d 	bl	800318a <HAL_I2C_MemTxCpltCallback>
}
 8004070:	e035      	b.n	80040de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff f841 	bl	800310a <HAL_I2C_MasterTxCpltCallback>
}
 8004088:	e029      	b.n	80040de <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b22      	cmp	r3, #34	; 0x22
 8004094:	d123      	bne.n	80040de <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10b      	bne.n	80040c8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fd f803 	bl	80010cc <HAL_I2C_MemRxCpltCallback>
}
 80040c6:	e00a      	b.n	80040de <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff f820 	bl	800311e <HAL_I2C_MasterRxCpltCallback>
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	fe00e800 	.word	0xfe00e800
 80040ec:	ffff0000 	.word	0xffff0000

080040f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2220      	movs	r2, #32
 8004114:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b21      	cmp	r3, #33	; 0x21
 800411a:	d002      	beq.n	8004122 <I2C_ITSlaveCplt+0x32>
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b29      	cmp	r3, #41	; 0x29
 8004120:	d108      	bne.n	8004134 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004122:	f248 0101 	movw	r1, #32769	; 0x8001
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fd10 	bl	8004b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2221      	movs	r2, #33	; 0x21
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
 8004132:	e019      	b.n	8004168 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b22      	cmp	r3, #34	; 0x22
 8004138:	d002      	beq.n	8004140 <I2C_ITSlaveCplt+0x50>
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d108      	bne.n	8004152 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004140:	f248 0102 	movw	r1, #32770	; 0x8002
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fd01 	bl	8004b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2222      	movs	r2, #34	; 0x22
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
 8004150:	e00a      	b.n	8004168 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b28      	cmp	r3, #40	; 0x28
 8004156:	d107      	bne.n	8004168 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004158:	f248 0103 	movw	r1, #32771	; 0x8003
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fcf5 	bl	8004b4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004176:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b62      	ldr	r3, [pc, #392]	; (800430c <I2C_ITSlaveCplt+0x21c>)
 8004184:	400b      	ands	r3, r1
 8004186:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa2e 	bl	80045ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01f      	beq.n	80041f0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041be:	e017      	b.n	80041f0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f043 0204 	orr.w	r2, r3, #4
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8a4 	bl	80043bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b28      	cmp	r3, #40	; 0x28
 800427e:	d141      	bne.n	8004304 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f846 	bl	8004314 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004288:	e03c      	b.n	8004304 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004292:	d014      	beq.n	80042be <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fe06 	bl	8003ea6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <I2C_ITSlaveCplt+0x220>)
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fe ff5d 	bl	8003176 <HAL_I2C_ListenCpltCallback>
}
 80042bc:	e022      	b.n	8004304 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b22      	cmp	r3, #34	; 0x22
 80042c8:	d10e      	bne.n	80042e8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fe ff30 	bl	8003146 <HAL_I2C_SlaveRxCpltCallback>
}
 80042e6:	e00d      	b.n	8004304 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fe ff17 	bl	8003132 <HAL_I2C_SlaveTxCpltCallback>
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	fe00e800 	.word	0xfe00e800
 8004310:	ffff0000 	.word	0xffff0000

08004314 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <I2C_ITListenCplt+0xa4>)
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d022      	beq.n	8004390 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004390:	f248 0103 	movw	r1, #32771	; 0x8003
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fbd9 	bl	8004b4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2210      	movs	r2, #16
 80043a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fee3 	bl	8003176 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	ffff0000 	.word	0xffff0000

080043bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a6d      	ldr	r2, [pc, #436]	; (8004590 <I2C_ITError+0x1d4>)
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b28      	cmp	r3, #40	; 0x28
 80043f2:	d005      	beq.n	8004400 <I2C_ITError+0x44>
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b29      	cmp	r3, #41	; 0x29
 80043f8:	d002      	beq.n	8004400 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b2a      	cmp	r3, #42	; 0x2a
 80043fe:	d10b      	bne.n	8004418 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004400:	2103      	movs	r1, #3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fba2 	bl	8004b4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2228      	movs	r2, #40	; 0x28
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a60      	ldr	r2, [pc, #384]	; (8004594 <I2C_ITError+0x1d8>)
 8004414:	635a      	str	r2, [r3, #52]	; 0x34
 8004416:	e030      	b.n	800447a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004418:	f248 0103 	movw	r1, #32771	; 0x8003
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb95 	bl	8004b4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f8e1 	bl	80045ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b60      	cmp	r3, #96	; 0x60
 8004432:	d01f      	beq.n	8004474 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b20      	cmp	r3, #32
 8004448:	d114      	bne.n	8004474 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d109      	bne.n	800446c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2220      	movs	r2, #32
 8004472:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d039      	beq.n	80044fc <I2C_ITError+0x140>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b11      	cmp	r3, #17
 800448c:	d002      	beq.n	8004494 <I2C_ITError+0xd8>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d133      	bne.n	80044fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a2:	d107      	bne.n	80044b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe f890 	bl	80025de <HAL_DMA_GetState>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d017      	beq.n	80044f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	4a33      	ldr	r2, [pc, #204]	; (8004598 <I2C_ITError+0x1dc>)
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe f83f 	bl	800255c <HAL_DMA_Abort_IT>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d04d      	beq.n	8004580 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ee:	4610      	mov	r0, r2
 80044f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044f2:	e045      	b.n	8004580 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f851 	bl	800459c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044fa:	e041      	b.n	8004580 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d039      	beq.n	8004578 <I2C_ITError+0x1bc>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b12      	cmp	r3, #18
 8004508:	d002      	beq.n	8004510 <I2C_ITError+0x154>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b22      	cmp	r3, #34	; 0x22
 800450e:	d133      	bne.n	8004578 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d107      	bne.n	8004530 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800452e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe f852 	bl	80025de <HAL_DMA_GetState>
 800453a:	4603      	mov	r3, r0
 800453c:	2b01      	cmp	r3, #1
 800453e:	d017      	beq.n	8004570 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <I2C_ITError+0x1dc>)
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe f801 	bl	800255c <HAL_DMA_Abort_IT>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800456a:	4610      	mov	r0, r2
 800456c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800456e:	e009      	b.n	8004584 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f813 	bl	800459c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004576:	e005      	b.n	8004584 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f80f 	bl	800459c <I2C_TreatErrorCallback>
  }
}
 800457e:	e002      	b.n	8004586 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004584:	bf00      	nop
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	ffff0000 	.word	0xffff0000
 8004594:	08003415 	.word	0x08003415
 8004598:	08004633 	.word	0x08004633

0800459c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d10e      	bne.n	80045ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fe fdf3 	bl	80031b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045cc:	e009      	b.n	80045e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fe fdde 	bl	800319e <HAL_I2C_ErrorCallback>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d103      	bne.n	8004608 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2200      	movs	r2, #0
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d007      	beq.n	8004626 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	619a      	str	r2, [r3, #24]
  }
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	2200      	movs	r2, #0
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	2200      	movs	r2, #0
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff ff9b 	bl	800459c <I2C_TreatErrorCallback>
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800467e:	e031      	b.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004686:	d02d      	beq.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004688:	f7fd fe3c 	bl	8002304 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d302      	bcc.n	800469e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d122      	bne.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4013      	ands	r3, r2
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d113      	bne.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e00f      	b.n	8004704 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d0be      	beq.n	8004680 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004718:	e033      	b.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f87e 	bl	8004820 <I2C_IsErrorOccurred>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e031      	b.n	8004792 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004734:	d025      	beq.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fd fde5 	bl	8002304 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11a      	bne.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d013      	beq.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d1c4      	bne.n	800471a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a6:	e02f      	b.n	8004808 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f837 	bl	8004820 <I2C_IsErrorOccurred>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e02d      	b.n	8004818 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047bc:	f7fd fda2 	bl	8002304 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d302      	bcc.n	80047d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11a      	bne.n	8004808 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d013      	beq.n	8004808 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e007      	b.n	8004818 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d1c8      	bne.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d068      	beq.n	800491e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004854:	e049      	b.n	80048ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485c:	d045      	beq.n	80048ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fd fd51 	bl	8002304 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_IsErrorOccurred+0x54>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d13a      	bne.n	80048ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004886:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004896:	d121      	bne.n	80048dc <I2C_IsErrorOccurred+0xbc>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800489e:	d01d      	beq.n	80048dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d01a      	beq.n	80048dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048b6:	f7fd fd25 	bl	8002304 <HAL_GetTick>
 80048ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048bc:	e00e      	b.n	80048dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048be:	f7fd fd21 	bl	8002304 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b19      	cmp	r3, #25
 80048ca:	d907      	bls.n	80048dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f043 0320 	orr.w	r3, r3, #32
 80048d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048da:	e006      	b.n	80048ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d1e9      	bne.n	80048be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d003      	beq.n	8004900 <I2C_IsErrorOccurred+0xe0>
 80048f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0aa      	beq.n	8004856 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2220      	movs	r2, #32
 800490e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f043 0304 	orr.w	r3, r3, #4
 8004916:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01c      	beq.n	80049ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fe28 	bl	80045ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <I2C_IsErrorOccurred+0x1bc>)
 80049a6:	400b      	ands	r3, r1
 80049a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3728      	adds	r7, #40	; 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	fe00e800 	.word	0xfe00e800

080049e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	4613      	mov	r3, r2
 80049f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f2:	897b      	ldrh	r3, [r7, #10]
 80049f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049f8:	7a7b      	ldrb	r3, [r7, #9]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0d5b      	lsrs	r3, r3, #21
 8004a1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <I2C_TransferConfig+0x60>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	43db      	mvns	r3, r3
 8004a24:	ea02 0103 	and.w	r1, r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	03ff63ff 	.word	0x03ff63ff

08004a44 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	4a39      	ldr	r2, [pc, #228]	; (8004b40 <I2C_Enable_IRQ+0xfc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d032      	beq.n	8004ac4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004a62:	4a38      	ldr	r2, [pc, #224]	; (8004b44 <I2C_Enable_IRQ+0x100>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02d      	beq.n	8004ac4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004a6c:	4a36      	ldr	r2, [pc, #216]	; (8004b48 <I2C_Enable_IRQ+0x104>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d028      	beq.n	8004ac4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da03      	bge.n	8004a82 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a82:	887b      	ldrh	r3, [r7, #2]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004a92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a94:	887b      	ldrh	r3, [r7, #2]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004aa4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d103      	bne.n	8004ab4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ab2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d133      	bne.n	8004b22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ac2:	e02e      	b.n	8004b22 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da03      	bge.n	8004ad4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ad2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004ae4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004af6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d103      	bne.n	8004b06 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d103      	bne.n	8004b14 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d103      	bne.n	8004b22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	08003605 	.word	0x08003605
 8004b44:	08003a29 	.word	0x08003a29
 8004b48:	080037dd 	.word	0x080037dd

08004b4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004b6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b7a:	2b28      	cmp	r3, #40	; 0x28
 8004b7c:	d003      	beq.n	8004b86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004b84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00f      	beq.n	8004bb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004b96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ba4:	2b28      	cmp	r3, #40	; 0x28
 8004ba6:	d003      	beq.n	8004bb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004bae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da03      	bge.n	8004bc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d103      	bne.n	8004bce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d103      	bne.n	8004bdc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f043 0320 	orr.w	r3, r3, #32
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d103      	bne.n	8004bea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	400a      	ands	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d138      	bne.n	8004c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e032      	b.n	8004c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d139      	bne.n	8004d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e033      	b.n	8004d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2224      	movs	r2, #36	; 0x24
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40007000 	.word	0x40007000

08004d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d62:	d130      	bne.n	8004dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d64:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d70:	d038      	beq.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d72:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2232      	movs	r2, #50	; 0x32
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0c9b      	lsrs	r3, r3, #18
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d98:	e002      	b.n	8004da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da0:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dac:	d102      	bne.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f2      	bne.n	8004d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc0:	d110      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e00f      	b.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd2:	d007      	beq.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40007000 	.word	0x40007000
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	431bde83 	.word	0x431bde83

08004e00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e3ca      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e12:	4b97      	ldr	r3, [pc, #604]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e1c:	4b94      	ldr	r3, [pc, #592]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80e4 	beq.w	8004ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_RCC_OscConfig+0x4a>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	f040 808b 	bne.w	8004f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 8087 	bne.w	8004f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e4a:	4b89      	ldr	r3, [pc, #548]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e3a2      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_RCC_OscConfig+0x7c>
 8004e72:	4b7f      	ldr	r3, [pc, #508]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7a:	e005      	b.n	8004e88 <HAL_RCC_OscConfig+0x88>
 8004e7c:	4b7c      	ldr	r3, [pc, #496]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d223      	bcs.n	8004ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fd87 	bl	80059a4 <RCC_SetFlashLatencyFromMSIRange>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e383      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ea0:	4b73      	ldr	r3, [pc, #460]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a72      	ldr	r2, [pc, #456]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	f043 0308 	orr.w	r3, r3, #8
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b70      	ldr	r3, [pc, #448]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	496d      	ldr	r1, [pc, #436]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	4968      	ldr	r1, [pc, #416]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
 8004ed2:	e025      	b.n	8004f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ed4:	4b66      	ldr	r3, [pc, #408]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004eda:	f043 0308 	orr.w	r3, r3, #8
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b63      	ldr	r3, [pc, #396]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4960      	ldr	r1, [pc, #384]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	495b      	ldr	r1, [pc, #364]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd47 	bl	80059a4 <RCC_SetFlashLatencyFromMSIRange>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e343      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f20:	f000 fc4a 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b52      	ldr	r3, [pc, #328]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	4950      	ldr	r1, [pc, #320]	; (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	4a4e      	ldr	r2, [pc, #312]	; (8005078 <HAL_RCC_OscConfig+0x278>)
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f40:	4b4e      	ldr	r3, [pc, #312]	; (800507c <HAL_RCC_OscConfig+0x27c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fc ffdd 	bl	8001f04 <HAL_InitTick>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d052      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	e327      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d032      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a42      	ldr	r2, [pc, #264]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f6c:	f7fd f9ca 	bl	8002304 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f74:	f7fd f9c6 	bl	8002304 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e310      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f86:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f92:	4b37      	ldr	r3, [pc, #220]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a36      	ldr	r2, [pc, #216]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b34      	ldr	r3, [pc, #208]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4931      	ldr	r1, [pc, #196]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	492c      	ldr	r1, [pc, #176]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
 8004fc4:	e01a      	b.n	8004ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a29      	ldr	r2, [pc, #164]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fd2:	f7fd f997 	bl	8002304 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fda:	f7fd f993 	bl	8002304 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e2dd      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fec:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x1da>
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d074      	beq.n	80050f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d005      	beq.n	800501a <HAL_RCC_OscConfig+0x21a>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d10e      	bne.n	8005032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d10b      	bne.n	8005032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d064      	beq.n	80050f0 <HAL_RCC_OscConfig+0x2f0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d160      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e2ba      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d106      	bne.n	800504a <HAL_RCC_OscConfig+0x24a>
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e026      	b.n	8005098 <HAL_RCC_OscConfig+0x298>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005052:	d115      	bne.n	8005080 <HAL_RCC_OscConfig+0x280>
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a05      	ldr	r2, [pc, #20]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 800505a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a02      	ldr	r2, [pc, #8]	; (8005070 <HAL_RCC_OscConfig+0x270>)
 8005066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e014      	b.n	8005098 <HAL_RCC_OscConfig+0x298>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	08010804 	.word	0x08010804
 8005078:	20000000 	.word	0x20000000
 800507c:	20000004 	.word	0x20000004
 8005080:	4ba0      	ldr	r3, [pc, #640]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a9f      	ldr	r2, [pc, #636]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b9d      	ldr	r3, [pc, #628]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a9c      	ldr	r2, [pc, #624]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd f930 	bl	8002304 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fd f92c 	bl	8002304 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e276      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ba:	4b92      	ldr	r3, [pc, #584]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x2a8>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd f91c 	bl	8002304 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fd f918 	bl	8002304 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e262      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050e2:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2d0>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d060      	beq.n	80051c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d005      	beq.n	8005110 <HAL_RCC_OscConfig+0x310>
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d119      	bne.n	800513e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d116      	bne.n	800513e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005110:	4b7c      	ldr	r3, [pc, #496]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_OscConfig+0x328>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e23f      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	4973      	ldr	r1, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005138:	4313      	orrs	r3, r2
 800513a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513c:	e040      	b.n	80051c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d023      	beq.n	800518e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005146:	4b6f      	ldr	r3, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6e      	ldr	r2, [pc, #440]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd f8d7 	bl	8002304 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515a:	f7fd f8d3 	bl	8002304 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e21d      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800516c:	4b65      	ldr	r3, [pc, #404]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005178:	4b62      	ldr	r3, [pc, #392]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	495f      	ldr	r1, [pc, #380]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
 800518c:	e018      	b.n	80051c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518e:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fd f8b3 	bl	8002304 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fd f8af 	bl	8002304 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1f9      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051b4:	4b53      	ldr	r3, [pc, #332]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d03c      	beq.n	8005246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01c      	beq.n	800520e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051da:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fd f88e 	bl	8002304 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ec:	f7fd f88a 	bl	8002304 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e1d4      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0ef      	beq.n	80051ec <HAL_RCC_OscConfig+0x3ec>
 800520c:	e01b      	b.n	8005246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520e:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005214:	4a3b      	ldr	r2, [pc, #236]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521e:	f7fd f871 	bl	8002304 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005226:	f7fd f86d 	bl	8002304 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1b7      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005238:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ef      	bne.n	8005226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a6 	beq.w	80053a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005258:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005264:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526e:	6593      	str	r3, [r2, #88]	; 0x58
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 8005272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527c:	2301      	movs	r3, #1
 800527e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005280:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_RCC_OscConfig+0x508>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d118      	bne.n	80052be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RCC_OscConfig+0x508>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_RCC_OscConfig+0x508>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005298:	f7fd f834 	bl	8002304 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a0:	f7fd f830 	bl	8002304 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e17a      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <HAL_RCC_OscConfig+0x508>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d108      	bne.n	80052d8 <HAL_RCC_OscConfig+0x4d8>
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052d6:	e029      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b05      	cmp	r3, #5
 80052de:	d115      	bne.n	800530c <HAL_RCC_OscConfig+0x50c>
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	4a07      	ldr	r2, [pc, #28]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	4a03      	ldr	r2, [pc, #12]	; (8005304 <HAL_RCC_OscConfig+0x504>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
 800530c:	4b9c      	ldr	r3, [pc, #624]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a9b      	ldr	r2, [pc, #620]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	4b98      	ldr	r3, [pc, #608]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a97      	ldr	r2, [pc, #604]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fc ffe6 	bl	8002304 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	e00a      	b.n	8005352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fc ffe2 	bl	8002304 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e12a      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ed      	beq.n	800533c <HAL_RCC_OscConfig+0x53c>
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc ffcf 	bl	8002304 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fc ffcb 	bl	8002304 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e113      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005380:	4b7f      	ldr	r3, [pc, #508]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ed      	bne.n	800536a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	4a79      	ldr	r2, [pc, #484]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80fe 	beq.w	80055a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	f040 80d0 	bne.w	8005554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053b4:	4b72      	ldr	r3, [pc, #456]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 0203 	and.w	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d130      	bne.n	800542a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	3b01      	subs	r3, #1
 80053d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d127      	bne.n	800542a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d11f      	bne.n	800542a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053f4:	2a07      	cmp	r2, #7
 80053f6:	bf14      	ite	ne
 80053f8:	2201      	movne	r2, #1
 80053fa:	2200      	moveq	r2, #0
 80053fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d109      	bne.n	800542a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	3b01      	subs	r3, #1
 8005424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d06e      	beq.n	8005508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d069      	beq.n	8005504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005430:	4b53      	ldr	r3, [pc, #332]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800543c:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0ad      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800544c:	4b4c      	ldr	r3, [pc, #304]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005458:	f7fc ff54 	bl	8002304 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc ff50 	bl	8002304 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e09a      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005472:	4b43      	ldr	r3, [pc, #268]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	4b40      	ldr	r3, [pc, #256]	; (8005584 <HAL_RCC_OscConfig+0x784>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800548e:	3a01      	subs	r2, #1
 8005490:	0112      	lsls	r2, r2, #4
 8005492:	4311      	orrs	r1, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005498:	0212      	lsls	r2, r2, #8
 800549a:	4311      	orrs	r1, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054a0:	0852      	lsrs	r2, r2, #1
 80054a2:	3a01      	subs	r2, #1
 80054a4:	0552      	lsls	r2, r2, #21
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0652      	lsls	r2, r2, #25
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b8:	0912      	lsrs	r2, r2, #4
 80054ba:	0452      	lsls	r2, r2, #17
 80054bc:	430a      	orrs	r2, r1
 80054be:	4930      	ldr	r1, [pc, #192]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054c4:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054dc:	f7fc ff12 	bl	8002304 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fc ff0e 	bl	8002304 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e058      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005502:	e050      	b.n	80055a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e04f      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d148      	bne.n	80055a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005514:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a19      	ldr	r2, [pc, #100]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800552a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800552c:	f7fc feea 	bl	8002304 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fc fee6 	bl	8002304 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e030      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005546:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0x734>
 8005552:	e028      	b.n	80055a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d023      	beq.n	80055a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_RCC_OscConfig+0x780>)
 8005560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fc fecd 	bl	8002304 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556c:	e00c      	b.n	8005588 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556e:	f7fc fec9 	bl	8002304 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d905      	bls.n	8005588 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e013      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
 8005580:	40021000 	.word	0x40021000
 8005584:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_OscConfig+0x7b0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ec      	bne.n	800556e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_OscConfig+0x7b0>)
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	4905      	ldr	r1, [pc, #20]	; (80055b0 <HAL_RCC_OscConfig+0x7b0>)
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_RCC_OscConfig+0x7b4>)
 800559c:	4013      	ands	r3, r2
 800559e:	60cb      	str	r3, [r1, #12]
 80055a0:	e001      	b.n	80055a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	feeefffc 	.word	0xfeeefffc

080055b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0e7      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d910      	bls.n	80055fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b72      	ldr	r3, [pc, #456]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 0207 	bic.w	r2, r3, #7
 80055e2:	4970      	ldr	r1, [pc, #448]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b6e      	ldr	r3, [pc, #440]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0cf      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d010      	beq.n	800562a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005614:	429a      	cmp	r2, r3
 8005616:	d908      	bls.n	800562a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005618:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4960      	ldr	r1, [pc, #384]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04c      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800563e:	4b5a      	ldr	r3, [pc, #360]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d121      	bne.n	800568e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e0a6      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d107      	bne.n	8005666 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005656:	4b54      	ldr	r3, [pc, #336]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d115      	bne.n	800568e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e09a      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800566e:	4b4e      	ldr	r3, [pc, #312]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e08e      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567e:	4b4a      	ldr	r3, [pc, #296]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e086      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 0203 	bic.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4943      	ldr	r1, [pc, #268]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a0:	f7fc fe30 	bl	8002304 <HAL_GetTick>
 80056a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a6:	e00a      	b.n	80056be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a8:	f7fc fe2c 	bl	8002304 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e06e      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056be:	4b3a      	ldr	r3, [pc, #232]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 020c 	and.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d1eb      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d208      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	492b      	ldr	r1, [pc, #172]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d210      	bcs.n	800572e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 0207 	bic.w	r2, r3, #7
 8005714:	4923      	ldr	r1, [pc, #140]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571c:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <HAL_RCC_ClockConfig+0x1ec>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d001      	beq.n	800572e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e036      	b.n	800579c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	4918      	ldr	r1, [pc, #96]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005748:	4313      	orrs	r3, r2
 800574a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4910      	ldr	r1, [pc, #64]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800576c:	f000 f824 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	490b      	ldr	r1, [pc, #44]	; (80057ac <HAL_RCC_ClockConfig+0x1f4>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1f8>)
 800578a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_ClockConfig+0x1fc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7fc fbb7 	bl	8001f04 <HAL_InitTick>
 8005796:	4603      	mov	r3, r0
 8005798:	72fb      	strb	r3, [r7, #11]

  return status;
 800579a:	7afb      	ldrb	r3, [r7, #11]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40022000 	.word	0x40022000
 80057a8:	40021000 	.word	0x40021000
 80057ac:	08010804 	.word	0x08010804
 80057b0:	20000000 	.word	0x20000000
 80057b4:	20000004 	.word	0x20000004

080057b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057d0:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0x34>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d121      	bne.n	800582a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d11e      	bne.n	800582a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057ec:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057f8:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e005      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d102      	bne.n	8005836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005830:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e004      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d101      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800583c:	4b23      	ldr	r3, [pc, #140]	; (80058cc <HAL_RCC_GetSysClockFreq+0x114>)
 800583e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d134      	bne.n	80058b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005846:	4b1e      	ldr	r3, [pc, #120]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d003      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0xa6>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d003      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0xac>
 800585c:	e005      	b.n	800586a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005860:	617b      	str	r3, [r7, #20]
      break;
 8005862:	e005      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005866:	617b      	str	r3, [r7, #20]
      break;
 8005868:	e002      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	617b      	str	r3, [r7, #20]
      break;
 800586e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005870:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	3301      	adds	r3, #1
 800587c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	fb03 f202 	mul.w	r2, r3, r2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	0e5b      	lsrs	r3, r3, #25
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	3301      	adds	r3, #1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058b0:	69bb      	ldr	r3, [r7, #24]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3724      	adds	r7, #36	; 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	0801081c 	.word	0x0801081c
 80058c8:	00f42400 	.word	0x00f42400
 80058cc:	007a1200 	.word	0x007a1200

080058d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000000 	.word	0x20000000

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058ec:	f7ff fff0 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4904      	ldr	r1, [pc, #16]	; (8005910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	08010814 	.word	0x08010814

08005914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005918:	f7ff ffda 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0adb      	lsrs	r3, r3, #11
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4904      	ldr	r1, [pc, #16]	; (800593c <HAL_RCC_GetPCLK2Freq+0x28>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021000 	.word	0x40021000
 800593c:	08010814 	.word	0x08010814

08005940 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	220f      	movs	r2, #15
 800594e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_RCC_GetClockConfig+0x5c>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0203 	and.w	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <HAL_RCC_GetClockConfig+0x5c>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <HAL_RCC_GetClockConfig+0x5c>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_RCC_GetClockConfig+0x5c>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <HAL_RCC_GetClockConfig+0x60>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0207 	and.w	r2, r3, #7
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000
 80059a0:	40022000 	.word	0x40022000

080059a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059b0:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059bc:	f7ff f9bc 	bl	8004d38 <HAL_PWREx_GetVoltageRange>
 80059c0:	6178      	str	r0, [r7, #20]
 80059c2:	e014      	b.n	80059ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059c4:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ce:	6593      	str	r3, [r2, #88]	; 0x58
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059dc:	f7ff f9ac 	bl	8004d38 <HAL_PWREx_GetVoltageRange>
 80059e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f4:	d10b      	bne.n	8005a0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d919      	bls.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005a00:	d902      	bls.n	8005a08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a02:	2302      	movs	r3, #2
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e013      	b.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a08:	2301      	movs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e010      	b.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b80      	cmp	r3, #128	; 0x80
 8005a12:	d902      	bls.n	8005a1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a14:	2303      	movs	r3, #3
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	e00a      	b.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b80      	cmp	r3, #128	; 0x80
 8005a1e:	d102      	bne.n	8005a26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a20:	2302      	movs	r3, #2
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e004      	b.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b70      	cmp	r3, #112	; 0x70
 8005a2a:	d101      	bne.n	8005a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 0207 	bic.w	r2, r3, #7
 8005a38:	4909      	ldr	r1, [pc, #36]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d001      	beq.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40022000 	.word	0x40022000

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a70:	2300      	movs	r3, #0
 8005a72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d041      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a88:	d02a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a8e:	d824      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a94:	d008      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a9a:	d81e      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa4:	d010      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aa6:	e018      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aa8:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a85      	ldr	r2, [pc, #532]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fabb 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ac6:	e00c      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3320      	adds	r3, #32
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fba6 	bl	8006220 <RCCEx_PLLSAI2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad8:	e003      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	74fb      	strb	r3, [r7, #19]
      break;
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ae8:	4b76      	ldr	r3, [pc, #472]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af6:	4973      	ldr	r1, [pc, #460]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005afe:	e001      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d041      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b18:	d02a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b1e:	d824      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b24:	d008      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2a:	d81e      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b34:	d010      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b36:	e018      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b38:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a61      	ldr	r2, [pc, #388]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b44:	e015      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fa73 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b56:	e00c      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3320      	adds	r3, #32
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fb5e 	bl	8006220 <RCCEx_PLLSAI2_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b68:	e003      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	74fb      	strb	r3, [r7, #19]
      break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b72:	7cfb      	ldrb	r3, [r7, #19]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b78:	4b52      	ldr	r3, [pc, #328]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	494f      	ldr	r1, [pc, #316]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b8e:	e001      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80a0 	beq.w	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ba6:	4b47      	ldr	r3, [pc, #284]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc8:	4b3e      	ldr	r3, [pc, #248]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be4:	f7fc fb8e 	bl	8002304 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bea:	e009      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fc fb8a 	bl	8002304 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	74fb      	strb	r3, [r7, #19]
        break;
 8005bfe:	e005      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ef      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d15c      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d019      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c5c:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6e:	f7fc fb49 	bl	8002304 <HAL_GetTick>
 8005c72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c74:	e00b      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fc fb45 	bl	8002304 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d902      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0ec      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca2:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb2:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cba:	e009      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	74bb      	strb	r3, [r7, #18]
 8005cc0:	e006      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd0:	7c7b      	ldrb	r3, [r7, #17]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd6:	4b9e      	ldr	r3, [pc, #632]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	4a9d      	ldr	r2, [pc, #628]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cee:	4b98      	ldr	r3, [pc, #608]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f023 0203 	bic.w	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	4994      	ldr	r1, [pc, #592]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d10:	4b8f      	ldr	r3, [pc, #572]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 020c 	bic.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	498c      	ldr	r1, [pc, #560]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d32:	4b87      	ldr	r3, [pc, #540]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	4983      	ldr	r1, [pc, #524]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d54:	4b7e      	ldr	r3, [pc, #504]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	497b      	ldr	r1, [pc, #492]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d76:	4b76      	ldr	r3, [pc, #472]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	4972      	ldr	r1, [pc, #456]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d98:	4b6d      	ldr	r3, [pc, #436]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da6:	496a      	ldr	r1, [pc, #424]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dba:	4b65      	ldr	r3, [pc, #404]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	4961      	ldr	r1, [pc, #388]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ddc:	4b5c      	ldr	r3, [pc, #368]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	4959      	ldr	r1, [pc, #356]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dfe:	4b54      	ldr	r3, [pc, #336]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0c:	4950      	ldr	r1, [pc, #320]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	4948      	ldr	r1, [pc, #288]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	493f      	ldr	r1, [pc, #252]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d028      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e64:	4b3a      	ldr	r3, [pc, #232]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e72:	4937      	ldr	r1, [pc, #220]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e82:	d106      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e84:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e8e:	60d3      	str	r3, [r2, #12]
 8005e90:	e011      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9a:	d10c      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f8c8 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d028      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ec2:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	491f      	ldr	r1, [pc, #124]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eec:	60d3      	str	r3, [r2, #12]
 8005eee:	e011      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3304      	adds	r3, #4
 8005efe:	2101      	movs	r1, #1
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f899 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f0a:	7cfb      	ldrb	r3, [r7, #19]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2e:	4908      	ldr	r1, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f3e:	d109      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
 8005f4c:	e014      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f867 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02f      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f92:	4928      	ldr	r1, [pc, #160]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f844 	bl	8006038 <RCCEx_PLLSAI1_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	74bb      	strb	r3, [r7, #18]
 8005fbe:	e011      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3320      	adds	r3, #32
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f925 	bl	8006220 <RCCEx_PLLSAI2_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffe:	490d      	ldr	r1, [pc, #52]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006022:	4904      	ldr	r1, [pc, #16]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800602a:	7cbb      	ldrb	r3, [r7, #18]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000

08006038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006046:	4b75      	ldr	r3, [pc, #468]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006052:	4b72      	ldr	r3, [pc, #456]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0203 	and.w	r2, r3, #3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d10d      	bne.n	800607e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
       ||
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800606a:	4b6c      	ldr	r3, [pc, #432]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
       ||
 800607a:	429a      	cmp	r2, r3
 800607c:	d047      	beq.n	800610e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	73fb      	strb	r3, [r7, #15]
 8006082:	e044      	b.n	800610e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d018      	beq.n	80060be <RCCEx_PLLSAI1_Config+0x86>
 800608c:	2b03      	cmp	r3, #3
 800608e:	d825      	bhi.n	80060dc <RCCEx_PLLSAI1_Config+0xa4>
 8006090:	2b01      	cmp	r3, #1
 8006092:	d002      	beq.n	800609a <RCCEx_PLLSAI1_Config+0x62>
 8006094:	2b02      	cmp	r3, #2
 8006096:	d009      	beq.n	80060ac <RCCEx_PLLSAI1_Config+0x74>
 8006098:	e020      	b.n	80060dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800609a:	4b60      	ldr	r3, [pc, #384]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11d      	bne.n	80060e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060aa:	e01a      	b.n	80060e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060ac:	4b5b      	ldr	r3, [pc, #364]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060bc:	e013      	b.n	80060e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060be:	4b57      	ldr	r3, [pc, #348]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060ca:	4b54      	ldr	r3, [pc, #336]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060da:	e006      	b.n	80060ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e004      	b.n	80060ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10d      	bne.n	800610e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060f2:	4b4a      	ldr	r3, [pc, #296]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	430b      	orrs	r3, r1
 8006108:	4944      	ldr	r1, [pc, #272]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d17d      	bne.n	8006210 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006114:	4b41      	ldr	r3, [pc, #260]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a40      	ldr	r2, [pc, #256]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800611a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800611e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006120:	f7fc f8f0 	bl	8002304 <HAL_GetTick>
 8006124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006126:	e009      	b.n	800613c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006128:	f7fc f8ec 	bl	8002304 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d902      	bls.n	800613c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	73fb      	strb	r3, [r7, #15]
        break;
 800613a:	e005      	b.n	8006148 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ef      	bne.n	8006128 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d160      	bne.n	8006210 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d111      	bne.n	8006178 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006154:	4b31      	ldr	r3, [pc, #196]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800615c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	0211      	lsls	r1, r2, #8
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68d2      	ldr	r2, [r2, #12]
 800616a:	0912      	lsrs	r2, r2, #4
 800616c:	0452      	lsls	r2, r2, #17
 800616e:	430a      	orrs	r2, r1
 8006170:	492a      	ldr	r1, [pc, #168]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
 8006176:	e027      	b.n	80061c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d112      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800617e:	4b27      	ldr	r3, [pc, #156]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6892      	ldr	r2, [r2, #8]
 800618e:	0211      	lsls	r1, r2, #8
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6912      	ldr	r2, [r2, #16]
 8006194:	0852      	lsrs	r2, r2, #1
 8006196:	3a01      	subs	r2, #1
 8006198:	0552      	lsls	r2, r2, #21
 800619a:	430a      	orrs	r2, r1
 800619c:	491f      	ldr	r1, [pc, #124]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	610b      	str	r3, [r1, #16]
 80061a2:	e011      	b.n	80061c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	0211      	lsls	r1, r2, #8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6952      	ldr	r2, [r2, #20]
 80061ba:	0852      	lsrs	r2, r2, #1
 80061bc:	3a01      	subs	r2, #1
 80061be:	0652      	lsls	r2, r2, #25
 80061c0:	430a      	orrs	r2, r1
 80061c2:	4916      	ldr	r1, [pc, #88]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fc f896 	bl	8002304 <HAL_GetTick>
 80061d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061da:	e009      	b.n	80061f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061dc:	f7fc f892 	bl	8002304 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d902      	bls.n	80061f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73fb      	strb	r3, [r7, #15]
          break;
 80061ee:	e005      	b.n	80061fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ef      	beq.n	80061dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	4904      	ldr	r1, [pc, #16]	; (800621c <RCCEx_PLLSAI1_Config+0x1e4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000

08006220 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800622e:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d018      	beq.n	800626c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800623a:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0203 	and.w	r2, r3, #3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d10d      	bne.n	8006266 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
       ||
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006252:	4b61      	ldr	r3, [pc, #388]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
       ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d047      	beq.n	80062f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
 800626a:	e044      	b.n	80062f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d018      	beq.n	80062a6 <RCCEx_PLLSAI2_Config+0x86>
 8006274:	2b03      	cmp	r3, #3
 8006276:	d825      	bhi.n	80062c4 <RCCEx_PLLSAI2_Config+0xa4>
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <RCCEx_PLLSAI2_Config+0x62>
 800627c:	2b02      	cmp	r3, #2
 800627e:	d009      	beq.n	8006294 <RCCEx_PLLSAI2_Config+0x74>
 8006280:	e020      	b.n	80062c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006282:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d11d      	bne.n	80062ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006292:	e01a      	b.n	80062ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006294:	4b50      	ldr	r3, [pc, #320]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d116      	bne.n	80062ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a4:	e013      	b.n	80062ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062a6:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10f      	bne.n	80062d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062b2:	4b49      	ldr	r3, [pc, #292]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062c2:	e006      	b.n	80062d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
      break;
 80062c8:	e004      	b.n	80062d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10d      	bne.n	80062f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062da:	4b3f      	ldr	r3, [pc, #252]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	430b      	orrs	r3, r1
 80062f0:	4939      	ldr	r1, [pc, #228]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d167      	bne.n	80063cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a35      	ldr	r2, [pc, #212]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006308:	f7fb fffc 	bl	8002304 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800630e:	e009      	b.n	8006324 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006310:	f7fb fff8 	bl	8002304 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d902      	bls.n	8006324 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	73fb      	strb	r3, [r7, #15]
        break;
 8006322:	e005      	b.n	8006330 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ef      	bne.n	8006310 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d14a      	bne.n	80063cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d111      	bne.n	8006360 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800633c:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	0211      	lsls	r1, r2, #8
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68d2      	ldr	r2, [r2, #12]
 8006352:	0912      	lsrs	r2, r2, #4
 8006354:	0452      	lsls	r2, r2, #17
 8006356:	430a      	orrs	r2, r1
 8006358:	491f      	ldr	r1, [pc, #124]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635a:	4313      	orrs	r3, r2
 800635c:	614b      	str	r3, [r1, #20]
 800635e:	e011      	b.n	8006384 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6892      	ldr	r2, [r2, #8]
 8006370:	0211      	lsls	r1, r2, #8
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6912      	ldr	r2, [r2, #16]
 8006376:	0852      	lsrs	r2, r2, #1
 8006378:	3a01      	subs	r2, #1
 800637a:	0652      	lsls	r2, r2, #25
 800637c:	430a      	orrs	r2, r1
 800637e:	4916      	ldr	r1, [pc, #88]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006380:	4313      	orrs	r3, r2
 8006382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800638a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fb ffb8 	bl	8002304 <HAL_GetTick>
 8006394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006396:	e009      	b.n	80063ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006398:	f7fb ffb4 	bl	8002304 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d902      	bls.n	80063ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	73fb      	strb	r3, [r7, #15]
          break;
 80063aa:	e005      	b.n	80063b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ef      	beq.n	8006398 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4904      	ldr	r1, [pc, #16]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40021000 	.word	0x40021000

080063dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e049      	b.n	8006482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f841 	bl	800648a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f000 fd84 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e047      	b.n	8006548 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a23      	ldr	r2, [pc, #140]	; (8006554 <HAL_TIM_Base_Start+0xb4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01d      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d018      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_TIM_Base_Start+0xb8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <HAL_TIM_Base_Start+0xbc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_TIM_Base_Start+0xc0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <HAL_TIM_Base_Start+0xc4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIM_Base_Start+0x66>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_TIM_Base_Start+0xc8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d115      	bne.n	8006532 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	4b17      	ldr	r3, [pc, #92]	; (800656c <HAL_TIM_Base_Start+0xcc>)
 800650e:	4013      	ands	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d015      	beq.n	8006544 <HAL_TIM_Base_Start+0xa4>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651e:	d011      	beq.n	8006544 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006530:	e008      	b.n	8006544 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e000      	b.n	8006546 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	00010007 	.word	0x00010007

08006570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e04f      	b.n	8006628 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a23      	ldr	r2, [pc, #140]	; (8006634 <HAL_TIM_Base_Start_IT+0xc4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01d      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d018      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	; (8006638 <HAL_TIM_Base_Start_IT+0xc8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_TIM_Base_Start_IT+0xcc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_TIM_Base_Start_IT+0xd0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <HAL_TIM_Base_Start_IT+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0x76>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <HAL_TIM_Base_Start_IT+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d115      	bne.n	8006612 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <HAL_TIM_Base_Start_IT+0xdc>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b06      	cmp	r3, #6
 80065f6:	d015      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0xb4>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d011      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006610:	e008      	b.n	8006624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e000      	b.n	8006626 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006624:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	00010007 	.word	0x00010007

08006650 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e049      	b.n	80066f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb fb86 	bl	8001d88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f000 fc4a 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e049      	b.n	80067a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fb fb11 	bl	8001d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 fbf3 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_TIM_PWM_Start+0x24>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e03c      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d109      	bne.n	80067ea <HAL_TIM_PWM_Start+0x3e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	e02f      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x58>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e022      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start+0x72>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e015      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b10      	cmp	r3, #16
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x8c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e008      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e09c      	b.n	800698c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0xb6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e023      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0xc6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	e01b      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xd6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006880:	e013      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xe6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006890:	e00b      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b10      	cmp	r3, #16
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xf6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a0:	e003      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2201      	movs	r2, #1
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fea8 	bl	8007608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a35      	ldr	r2, [pc, #212]	; (8006994 <HAL_TIM_PWM_Start+0x1e8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a34      	ldr	r2, [pc, #208]	; (8006998 <HAL_TIM_PWM_Start+0x1ec>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a32      	ldr	r2, [pc, #200]	; (800699c <HAL_TIM_PWM_Start+0x1f0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_TIM_PWM_Start+0x1f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <HAL_TIM_PWM_Start+0x1f8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_Start+0x142>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_PWM_Start+0x144>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a22      	ldr	r2, [pc, #136]	; (8006994 <HAL_TIM_PWM_Start+0x1e8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01d      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d018      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a22      	ldr	r2, [pc, #136]	; (80069a8 <HAL_TIM_PWM_Start+0x1fc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a21      	ldr	r2, [pc, #132]	; (80069ac <HAL_TIM_PWM_Start+0x200>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <HAL_TIM_PWM_Start+0x204>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <HAL_TIM_PWM_Start+0x1ec>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_TIM_PWM_Start+0x19e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <HAL_TIM_PWM_Start+0x1f0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d115      	bne.n	8006976 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <HAL_TIM_PWM_Start+0x208>)
 8006952:	4013      	ands	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b06      	cmp	r3, #6
 800695a:	d015      	beq.n	8006988 <HAL_TIM_PWM_Start+0x1dc>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006962:	d011      	beq.n	8006988 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	e008      	b.n	8006988 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e000      	b.n	800698a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40013400 	.word	0x40013400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	00010007 	.word	0x00010007

080069b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0202 	mvn.w	r2, #2
 80069ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa72 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa64 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa75 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0204 	mvn.w	r2, #4
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa4c 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa3e 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa4f 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d020      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0208 	mvn.w	r2, #8
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa26 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa18 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa29 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d020      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0210 	mvn.w	r2, #16
 8006ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa00 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9f2 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa03 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0201 	mvn.w	r2, #1
 8006b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fb f85c 	bl	8001bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fe18 	bl	8007778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fe10 	bl	800778c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9c2 	bl	8006f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0220 	mvn.w	r2, #32
 8006bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fdd8 	bl	8007764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_TIM_OC_ConfigChannel+0x1e>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e066      	b.n	8006ca8 <HAL_TIM_OC_ConfigChannel+0xec>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b14      	cmp	r3, #20
 8006be6:	d857      	bhi.n	8006c98 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006c99 	.word	0x08006c99
 8006bf8:	08006c99 	.word	0x08006c99
 8006bfc:	08006c99 	.word	0x08006c99
 8006c00:	08006c53 	.word	0x08006c53
 8006c04:	08006c99 	.word	0x08006c99
 8006c08:	08006c99 	.word	0x08006c99
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006c61 	.word	0x08006c61
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006c99 	.word	0x08006c99
 8006c1c:	08006c99 	.word	0x08006c99
 8006c20:	08006c6f 	.word	0x08006c6f
 8006c24:	08006c99 	.word	0x08006c99
 8006c28:	08006c99 	.word	0x08006c99
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006c8b 	.word	0x08006c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fa06 	bl	800705c <TIM_OC1_SetConfig>
      break;
 8006c50:	e025      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fa8f 	bl	800717c <TIM_OC2_SetConfig>
      break;
 8006c5e:	e01e      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fb12 	bl	8007290 <TIM_OC3_SetConfig>
      break;
 8006c6c:	e017      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fb93 	bl	80073a0 <TIM_OC4_SetConfig>
      break;
 8006c7a:	e010      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fbf6 	bl	8007474 <TIM_OC5_SetConfig>
      break;
 8006c88:	e009      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fc53 	bl	800753c <TIM_OC6_SetConfig>
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e0ff      	b.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b14      	cmp	r3, #20
 8006cda:	f200 80f0 	bhi.w	8006ebe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d39 	.word	0x08006d39
 8006ce8:	08006ebf 	.word	0x08006ebf
 8006cec:	08006ebf 	.word	0x08006ebf
 8006cf0:	08006ebf 	.word	0x08006ebf
 8006cf4:	08006d79 	.word	0x08006d79
 8006cf8:	08006ebf 	.word	0x08006ebf
 8006cfc:	08006ebf 	.word	0x08006ebf
 8006d00:	08006ebf 	.word	0x08006ebf
 8006d04:	08006dbb 	.word	0x08006dbb
 8006d08:	08006ebf 	.word	0x08006ebf
 8006d0c:	08006ebf 	.word	0x08006ebf
 8006d10:	08006ebf 	.word	0x08006ebf
 8006d14:	08006dfb 	.word	0x08006dfb
 8006d18:	08006ebf 	.word	0x08006ebf
 8006d1c:	08006ebf 	.word	0x08006ebf
 8006d20:	08006ebf 	.word	0x08006ebf
 8006d24:	08006e3d 	.word	0x08006e3d
 8006d28:	08006ebf 	.word	0x08006ebf
 8006d2c:	08006ebf 	.word	0x08006ebf
 8006d30:	08006ebf 	.word	0x08006ebf
 8006d34:	08006e7d 	.word	0x08006e7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f98c 	bl	800705c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0208 	orr.w	r2, r2, #8
 8006d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0204 	bic.w	r2, r2, #4
 8006d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6999      	ldr	r1, [r3, #24]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	619a      	str	r2, [r3, #24]
      break;
 8006d76:	e0a5      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f9fc 	bl	800717c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6999      	ldr	r1, [r3, #24]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	021a      	lsls	r2, r3, #8
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	619a      	str	r2, [r3, #24]
      break;
 8006db8:	e084      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fa65 	bl	8007290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0208 	orr.w	r2, r2, #8
 8006dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0204 	bic.w	r2, r2, #4
 8006de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69d9      	ldr	r1, [r3, #28]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	61da      	str	r2, [r3, #28]
      break;
 8006df8:	e064      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 facd 	bl	80073a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69d9      	ldr	r1, [r3, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	021a      	lsls	r2, r3, #8
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	61da      	str	r2, [r3, #28]
      break;
 8006e3a:	e043      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fb16 	bl	8007474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0208 	orr.w	r2, r2, #8
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0204 	bic.w	r2, r2, #4
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e7a:	e023      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fb5a 	bl	800753c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	021a      	lsls	r2, r3, #8
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ebc:	e002      	b.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a40      	ldr	r2, [pc, #256]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d00f      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a3c      	ldr	r2, [pc, #240]	; (8007044 <TIM_Base_SetConfig+0x11c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a3b      	ldr	r2, [pc, #236]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3a      	ldr	r2, [pc, #232]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d108      	bne.n	8006f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01f      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d01b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d017      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2b      	ldr	r2, [pc, #172]	; (8007044 <TIM_Base_SetConfig+0x11c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2a      	ldr	r2, [pc, #168]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a29      	ldr	r2, [pc, #164]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a28      	ldr	r2, [pc, #160]	; (8007050 <TIM_Base_SetConfig+0x128>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a27      	ldr	r2, [pc, #156]	; (8007054 <TIM_Base_SetConfig+0x12c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_Base_SetConfig+0x9a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <TIM_Base_SetConfig+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a10      	ldr	r2, [pc, #64]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0xf8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a12      	ldr	r2, [pc, #72]	; (800704c <TIM_Base_SetConfig+0x124>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0xf8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a11      	ldr	r2, [pc, #68]	; (8007050 <TIM_Base_SetConfig+0x128>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0xf8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a10      	ldr	r2, [pc, #64]	; (8007054 <TIM_Base_SetConfig+0x12c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0xf8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a0f      	ldr	r2, [pc, #60]	; (8007058 <TIM_Base_SetConfig+0x130>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d103      	bne.n	8007028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	615a      	str	r2, [r3, #20]
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40013400 	.word	0x40013400
 8007050:	40014000 	.word	0x40014000
 8007054:	40014400 	.word	0x40014400
 8007058:	40014800 	.word	0x40014800

0800705c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f023 0201 	bic.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 0302 	bic.w	r3, r3, #2
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a2c      	ldr	r2, [pc, #176]	; (8007168 <TIM_OC1_SetConfig+0x10c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00f      	beq.n	80070dc <TIM_OC1_SetConfig+0x80>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a2b      	ldr	r2, [pc, #172]	; (800716c <TIM_OC1_SetConfig+0x110>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00b      	beq.n	80070dc <TIM_OC1_SetConfig+0x80>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <TIM_OC1_SetConfig+0x114>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d007      	beq.n	80070dc <TIM_OC1_SetConfig+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a29      	ldr	r2, [pc, #164]	; (8007174 <TIM_OC1_SetConfig+0x118>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_OC1_SetConfig+0x80>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <TIM_OC1_SetConfig+0x11c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d10c      	bne.n	80070f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 0308 	bic.w	r3, r3, #8
 80070e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <TIM_OC1_SetConfig+0x10c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_OC1_SetConfig+0xc2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1a      	ldr	r2, [pc, #104]	; (800716c <TIM_OC1_SetConfig+0x110>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_OC1_SetConfig+0xc2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a19      	ldr	r2, [pc, #100]	; (8007170 <TIM_OC1_SetConfig+0x114>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_OC1_SetConfig+0xc2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a18      	ldr	r2, [pc, #96]	; (8007174 <TIM_OC1_SetConfig+0x118>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC1_SetConfig+0xc2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <TIM_OC1_SetConfig+0x11c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d111      	bne.n	8007142 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40013400 	.word	0x40013400
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800

0800717c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f023 0210 	bic.w	r2, r3, #16
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a28      	ldr	r2, [pc, #160]	; (800727c <TIM_OC2_SetConfig+0x100>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC2_SetConfig+0x6c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a27      	ldr	r2, [pc, #156]	; (8007280 <TIM_OC2_SetConfig+0x104>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10d      	bne.n	8007204 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <TIM_OC2_SetConfig+0x100>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00f      	beq.n	800722c <TIM_OC2_SetConfig+0xb0>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a1c      	ldr	r2, [pc, #112]	; (8007280 <TIM_OC2_SetConfig+0x104>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00b      	beq.n	800722c <TIM_OC2_SetConfig+0xb0>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <TIM_OC2_SetConfig+0x108>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_OC2_SetConfig+0xb0>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <TIM_OC2_SetConfig+0x10c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC2_SetConfig+0xb0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a19      	ldr	r2, [pc, #100]	; (800728c <TIM_OC2_SetConfig+0x110>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d113      	bne.n	8007254 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40013400 	.word	0x40013400
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400
 800728c:	40014800 	.word	0x40014800

08007290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <TIM_OC3_SetConfig+0xfc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC3_SetConfig+0x6a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <TIM_OC3_SetConfig+0x100>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d10d      	bne.n	8007316 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a1c      	ldr	r2, [pc, #112]	; (800738c <TIM_OC3_SetConfig+0xfc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_OC3_SetConfig+0xae>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <TIM_OC3_SetConfig+0x100>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <TIM_OC3_SetConfig+0xae>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <TIM_OC3_SetConfig+0x104>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_OC3_SetConfig+0xae>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a19      	ldr	r2, [pc, #100]	; (8007398 <TIM_OC3_SetConfig+0x108>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_OC3_SetConfig+0xae>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a18      	ldr	r2, [pc, #96]	; (800739c <TIM_OC3_SetConfig+0x10c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d113      	bne.n	8007366 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800734c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40013400 	.word	0x40013400
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800

080073a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	031b      	lsls	r3, r3, #12
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a18      	ldr	r2, [pc, #96]	; (8007460 <TIM_OC4_SetConfig+0xc0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00f      	beq.n	8007424 <TIM_OC4_SetConfig+0x84>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <TIM_OC4_SetConfig+0xc4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00b      	beq.n	8007424 <TIM_OC4_SetConfig+0x84>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <TIM_OC4_SetConfig+0xc8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d007      	beq.n	8007424 <TIM_OC4_SetConfig+0x84>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a15      	ldr	r2, [pc, #84]	; (800746c <TIM_OC4_SetConfig+0xcc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_OC4_SetConfig+0x84>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a14      	ldr	r2, [pc, #80]	; (8007470 <TIM_OC4_SetConfig+0xd0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d109      	bne.n	8007438 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	019b      	lsls	r3, r3, #6
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40013400 	.word	0x40013400
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a17      	ldr	r2, [pc, #92]	; (8007528 <TIM_OC5_SetConfig+0xb4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_OC5_SetConfig+0x7a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a16      	ldr	r2, [pc, #88]	; (800752c <TIM_OC5_SetConfig+0xb8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_OC5_SetConfig+0x7a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <TIM_OC5_SetConfig+0xbc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_OC5_SetConfig+0x7a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a14      	ldr	r2, [pc, #80]	; (8007534 <TIM_OC5_SetConfig+0xc0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_OC5_SetConfig+0x7a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <TIM_OC5_SetConfig+0xc4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d109      	bne.n	8007502 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800

0800753c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	051b      	lsls	r3, r3, #20
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <TIM_OC6_SetConfig+0xb8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00f      	beq.n	80075b8 <TIM_OC6_SetConfig+0x7c>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <TIM_OC6_SetConfig+0xbc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00b      	beq.n	80075b8 <TIM_OC6_SetConfig+0x7c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <TIM_OC6_SetConfig+0xc0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_OC6_SetConfig+0x7c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a15      	ldr	r2, [pc, #84]	; (8007600 <TIM_OC6_SetConfig+0xc4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC6_SetConfig+0x7c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a14      	ldr	r2, [pc, #80]	; (8007604 <TIM_OC6_SetConfig+0xc8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d109      	bne.n	80075cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	029b      	lsls	r3, r3, #10
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	621a      	str	r2, [r3, #32]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40013400 	.word	0x40013400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800

08007608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2201      	movs	r2, #1
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1a      	ldr	r2, [r3, #32]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	431a      	orrs	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007668:	2302      	movs	r3, #2
 800766a:	e068      	b.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2e      	ldr	r2, [pc, #184]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2d      	ldr	r2, [pc, #180]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d108      	bne.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01d      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076de:	d018      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1a      	ldr	r2, [pc, #104]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a18      	ldr	r2, [pc, #96]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a13      	ldr	r2, [pc, #76]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a14      	ldr	r2, [pc, #80]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10c      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4313      	orrs	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40014000 	.word	0x40014000

08007764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e040      	b.n	8007834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa fb3a 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fec8 	bl	800857c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc0d 	bl	800800c <UART_SetConfig>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e01b      	b.n	8007834 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800780a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800781a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 ff47 	bl	80086c0 <UART_CheckIdleState>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007850:	2b20      	cmp	r3, #32
 8007852:	d178      	bne.n	8007946 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_UART_Transmit+0x24>
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e071      	b.n	8007948 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2221      	movs	r2, #33	; 0x21
 8007870:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007872:	f7fa fd47 	bl	8002304 <HAL_GetTick>
 8007876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007890:	d108      	bne.n	80078a4 <HAL_UART_Transmit+0x68>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e003      	b.n	80078ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078ac:	e030      	b.n	8007910 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	2180      	movs	r1, #128	; 0x80
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 ffa9 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e03c      	b.n	8007948 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	881a      	ldrh	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078e0:	b292      	uxth	r2, r2
 80078e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	3302      	adds	r3, #2
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e008      	b.n	80078fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b292      	uxth	r2, r2
 80078f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	3301      	adds	r3, #1
 80078fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1c8      	bne.n	80078ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2200      	movs	r2, #0
 8007924:	2140      	movs	r1, #64	; 0x40
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 ff72 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e005      	b.n	8007948 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e000      	b.n	8007948 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007950:	b480      	push	{r7}
 8007952:	b08b      	sub	sp, #44	; 0x2c
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007962:	2b20      	cmp	r3, #32
 8007964:	d147      	bne.n	80079f6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_UART_Transmit_IT+0x22>
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e040      	b.n	80079f8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2221      	movs	r2, #33	; 0x21
 800799e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a8:	d107      	bne.n	80079ba <HAL_UART_Transmit_IT+0x6a>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a13      	ldr	r2, [pc, #76]	; (8007a04 <HAL_UART_Transmit_IT+0xb4>)
 80079b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80079b8:	e002      	b.n	80079c0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <HAL_UART_Transmit_IT+0xb8>)
 80079be:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	69f9      	ldr	r1, [r7, #28]
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e6      	bne.n	80079c0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	372c      	adds	r7, #44	; 0x2c
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	08008a8b 	.word	0x08008a8b
 8007a08:	080089d3 	.word	0x080089d3

08007a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b0ba      	sub	sp, #232	; 0xe8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00f      	beq.n	8007a74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 82ae 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
      }
      return;
 8007a72:	e2a8      	b.n	8007fc6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8117 	beq.w	8007cac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a8e:	4b85      	ldr	r3, [pc, #532]	; (8007ca4 <HAL_UART_IRQHandler+0x298>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 810a 	beq.w	8007cac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d011      	beq.n	8007ac8 <HAL_UART_IRQHandler+0xbc>
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abe:	f043 0201 	orr.w	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d011      	beq.n	8007af8 <HAL_UART_IRQHandler+0xec>
 8007ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
 8007b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2204      	movs	r2, #4
 8007b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1e:	f043 0202 	orr.w	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2208      	movs	r2, #8
 8007b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b5a:	f043 0208 	orr.w	r2, r3, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d012      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18a>
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00c      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8214 	beq.w	8007fca <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d005      	beq.n	8007bee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04f      	beq.n	8007c8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fe75 	bl	80088de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d141      	bne.n	8007c86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d9      	bne.n	8007c02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <HAL_UART_IRQHandler+0x29c>)
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fa fc7a 	bl	800255c <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d017      	beq.n	8007c9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	e00f      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9ae 	bl	8007fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	e00b      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f9aa 	bl	8007fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	e007      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9a6 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c9c:	e195      	b.n	8007fca <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9e:	bf00      	nop
    return;
 8007ca0:	e193      	b.n	8007fca <HAL_UART_IRQHandler+0x5be>
 8007ca2:	bf00      	nop
 8007ca4:	04000120 	.word	0x04000120
 8007ca8:	080089a7 	.word	0x080089a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	f040 814e 	bne.w	8007f52 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8147 	beq.w	8007f52 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8140 	beq.w	8007f52 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	f040 80b8 	bne.w	8007e5a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 8167 	beq.w	8007fce <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f080 815f 	bcs.w	8007fce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8086 	bne.w	8007e38 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1da      	bne.n	8007d2c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e1      	bne.n	8007d76 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e08:	f023 0310 	bic.w	r3, r3, #16
 8007e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e4      	bne.n	8007df8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fa fb54 	bl	80024e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8ce 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e58:	e0b9      	b.n	8007fce <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80ab 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80a6 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8007eaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e4      	bne.n	8007e86 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	623b      	str	r3, [r7, #32]
   return(result);
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ee0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e3      	bne.n	8007ebc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f023 0310 	bic.w	r3, r3, #16
 8007f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	69b9      	ldr	r1, [r7, #24]
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	617b      	str	r3, [r7, #20]
   return(result);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e4      	bne.n	8007f08 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f852 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f50:	e03f      	b.n	8007fd2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <HAL_UART_IRQHandler+0x570>
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fe12 	bl	8008b9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f7a:	e02d      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00e      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01c      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
    }
    return;
 8007fa4:	e017      	b.n	8007fd6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fdc3 	bl	8008b4a <UART_EndTransmit_IT>
    return;
 8007fc4:	e008      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fc6:	bf00      	nop
 8007fc8:	e006      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007fca:	bf00      	nop
 8007fcc:	e004      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fce:	bf00      	nop
 8007fd0:	e002      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e000      	b.n	8007fd8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007fd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007fd8:	37e8      	adds	r7, #232	; 0xe8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop

08007fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b08a      	sub	sp, #40	; 0x28
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	431a      	orrs	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	431a      	orrs	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	4313      	orrs	r3, r2
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4ba4      	ldr	r3, [pc, #656]	; (80082cc <UART_SetConfig+0x2c0>)
 800803c:	4013      	ands	r3, r2
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008044:	430b      	orrs	r3, r1
 8008046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a99      	ldr	r2, [pc, #612]	; (80082d0 <UART_SetConfig+0x2c4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008074:	4313      	orrs	r3, r2
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008088:	430a      	orrs	r2, r1
 800808a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a90      	ldr	r2, [pc, #576]	; (80082d4 <UART_SetConfig+0x2c8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d126      	bne.n	80080e4 <UART_SetConfig+0xd8>
 8008096:	4b90      	ldr	r3, [pc, #576]	; (80082d8 <UART_SetConfig+0x2cc>)
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d81b      	bhi.n	80080dc <UART_SetConfig+0xd0>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0xa0>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c2:	e116      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ca:	e112      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d2:	e10e      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080da:	e10a      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e2:	e106      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a7c      	ldr	r2, [pc, #496]	; (80082dc <UART_SetConfig+0x2d0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d138      	bne.n	8008160 <UART_SetConfig+0x154>
 80080ee:	4b7a      	ldr	r3, [pc, #488]	; (80082d8 <UART_SetConfig+0x2cc>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	f003 030c 	and.w	r3, r3, #12
 80080f8:	2b0c      	cmp	r3, #12
 80080fa:	d82d      	bhi.n	8008158 <UART_SetConfig+0x14c>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0xf8>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008139 	.word	0x08008139
 8008108:	08008159 	.word	0x08008159
 800810c:	08008159 	.word	0x08008159
 8008110:	08008159 	.word	0x08008159
 8008114:	08008149 	.word	0x08008149
 8008118:	08008159 	.word	0x08008159
 800811c:	08008159 	.word	0x08008159
 8008120:	08008159 	.word	0x08008159
 8008124:	08008141 	.word	0x08008141
 8008128:	08008159 	.word	0x08008159
 800812c:	08008159 	.word	0x08008159
 8008130:	08008159 	.word	0x08008159
 8008134:	08008151 	.word	0x08008151
 8008138:	2300      	movs	r3, #0
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e0d8      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008140:	2302      	movs	r3, #2
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008146:	e0d4      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800814e:	e0d0      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008156:	e0cc      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800815e:	e0c8      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a5e      	ldr	r2, [pc, #376]	; (80082e0 <UART_SetConfig+0x2d4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d125      	bne.n	80081b6 <UART_SetConfig+0x1aa>
 800816a:	4b5b      	ldr	r3, [pc, #364]	; (80082d8 <UART_SetConfig+0x2cc>)
 800816c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d016      	beq.n	80081a6 <UART_SetConfig+0x19a>
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	d818      	bhi.n	80081ae <UART_SetConfig+0x1a2>
 800817c:	2b20      	cmp	r3, #32
 800817e:	d00a      	beq.n	8008196 <UART_SetConfig+0x18a>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d814      	bhi.n	80081ae <UART_SetConfig+0x1a2>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <UART_SetConfig+0x182>
 8008188:	2b10      	cmp	r3, #16
 800818a:	d008      	beq.n	800819e <UART_SetConfig+0x192>
 800818c:	e00f      	b.n	80081ae <UART_SetConfig+0x1a2>
 800818e:	2300      	movs	r3, #0
 8008190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008194:	e0ad      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008196:	2302      	movs	r3, #2
 8008198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819c:	e0a9      	b.n	80082f2 <UART_SetConfig+0x2e6>
 800819e:	2304      	movs	r3, #4
 80081a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a4:	e0a5      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081a6:	2308      	movs	r3, #8
 80081a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ac:	e0a1      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081ae:	2310      	movs	r3, #16
 80081b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b4:	e09d      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a4a      	ldr	r2, [pc, #296]	; (80082e4 <UART_SetConfig+0x2d8>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d125      	bne.n	800820c <UART_SetConfig+0x200>
 80081c0:	4b45      	ldr	r3, [pc, #276]	; (80082d8 <UART_SetConfig+0x2cc>)
 80081c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081ca:	2bc0      	cmp	r3, #192	; 0xc0
 80081cc:	d016      	beq.n	80081fc <UART_SetConfig+0x1f0>
 80081ce:	2bc0      	cmp	r3, #192	; 0xc0
 80081d0:	d818      	bhi.n	8008204 <UART_SetConfig+0x1f8>
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d00a      	beq.n	80081ec <UART_SetConfig+0x1e0>
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d814      	bhi.n	8008204 <UART_SetConfig+0x1f8>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <UART_SetConfig+0x1d8>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d008      	beq.n	80081f4 <UART_SetConfig+0x1e8>
 80081e2:	e00f      	b.n	8008204 <UART_SetConfig+0x1f8>
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ea:	e082      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081ec:	2302      	movs	r3, #2
 80081ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f2:	e07e      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081f4:	2304      	movs	r3, #4
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fa:	e07a      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80081fc:	2308      	movs	r3, #8
 80081fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008202:	e076      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008204:	2310      	movs	r3, #16
 8008206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820a:	e072      	b.n	80082f2 <UART_SetConfig+0x2e6>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a35      	ldr	r2, [pc, #212]	; (80082e8 <UART_SetConfig+0x2dc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d12a      	bne.n	800826c <UART_SetConfig+0x260>
 8008216:	4b30      	ldr	r3, [pc, #192]	; (80082d8 <UART_SetConfig+0x2cc>)
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008224:	d01a      	beq.n	800825c <UART_SetConfig+0x250>
 8008226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822a:	d81b      	bhi.n	8008264 <UART_SetConfig+0x258>
 800822c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008230:	d00c      	beq.n	800824c <UART_SetConfig+0x240>
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	d815      	bhi.n	8008264 <UART_SetConfig+0x258>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <UART_SetConfig+0x238>
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d008      	beq.n	8008254 <UART_SetConfig+0x248>
 8008242:	e00f      	b.n	8008264 <UART_SetConfig+0x258>
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800824a:	e052      	b.n	80082f2 <UART_SetConfig+0x2e6>
 800824c:	2302      	movs	r3, #2
 800824e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008252:	e04e      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008254:	2304      	movs	r3, #4
 8008256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800825a:	e04a      	b.n	80082f2 <UART_SetConfig+0x2e6>
 800825c:	2308      	movs	r3, #8
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008262:	e046      	b.n	80082f2 <UART_SetConfig+0x2e6>
 8008264:	2310      	movs	r3, #16
 8008266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800826a:	e042      	b.n	80082f2 <UART_SetConfig+0x2e6>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <UART_SetConfig+0x2c4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d13a      	bne.n	80082ec <UART_SetConfig+0x2e0>
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <UART_SetConfig+0x2cc>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008284:	d01a      	beq.n	80082bc <UART_SetConfig+0x2b0>
 8008286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800828a:	d81b      	bhi.n	80082c4 <UART_SetConfig+0x2b8>
 800828c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008290:	d00c      	beq.n	80082ac <UART_SetConfig+0x2a0>
 8008292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008296:	d815      	bhi.n	80082c4 <UART_SetConfig+0x2b8>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <UART_SetConfig+0x298>
 800829c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a0:	d008      	beq.n	80082b4 <UART_SetConfig+0x2a8>
 80082a2:	e00f      	b.n	80082c4 <UART_SetConfig+0x2b8>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082aa:	e022      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082b2:	e01e      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80082b4:	2304      	movs	r3, #4
 80082b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ba:	e01a      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80082bc:	2308      	movs	r3, #8
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c2:	e016      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80082c4:	2310      	movs	r3, #16
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ca:	e012      	b.n	80082f2 <UART_SetConfig+0x2e6>
 80082cc:	efff69f3 	.word	0xefff69f3
 80082d0:	40008000 	.word	0x40008000
 80082d4:	40013800 	.word	0x40013800
 80082d8:	40021000 	.word	0x40021000
 80082dc:	40004400 	.word	0x40004400
 80082e0:	40004800 	.word	0x40004800
 80082e4:	40004c00 	.word	0x40004c00
 80082e8:	40005000 	.word	0x40005000
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a9f      	ldr	r2, [pc, #636]	; (8008574 <UART_SetConfig+0x568>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d17a      	bne.n	80083f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008300:	2b08      	cmp	r3, #8
 8008302:	d824      	bhi.n	800834e <UART_SetConfig+0x342>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <UART_SetConfig+0x300>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	08008331 	.word	0x08008331
 8008310:	0800834f 	.word	0x0800834f
 8008314:	08008339 	.word	0x08008339
 8008318:	0800834f 	.word	0x0800834f
 800831c:	0800833f 	.word	0x0800833f
 8008320:	0800834f 	.word	0x0800834f
 8008324:	0800834f 	.word	0x0800834f
 8008328:	0800834f 	.word	0x0800834f
 800832c:	08008347 	.word	0x08008347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008330:	f7fd fada 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8008334:	61f8      	str	r0, [r7, #28]
        break;
 8008336:	e010      	b.n	800835a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008338:	4b8f      	ldr	r3, [pc, #572]	; (8008578 <UART_SetConfig+0x56c>)
 800833a:	61fb      	str	r3, [r7, #28]
        break;
 800833c:	e00d      	b.n	800835a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833e:	f7fd fa3b 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8008342:	61f8      	str	r0, [r7, #28]
        break;
 8008344:	e009      	b.n	800835a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834a:	61fb      	str	r3, [r7, #28]
        break;
 800834c:	e005      	b.n	800835a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80fb 	beq.w	8008558 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	429a      	cmp	r2, r3
 8008370:	d305      	bcc.n	800837e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	429a      	cmp	r2, r3
 800837c:	d903      	bls.n	8008386 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008384:	e0e8      	b.n	8008558 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2200      	movs	r2, #0
 800838a:	461c      	mov	r4, r3
 800838c:	4615      	mov	r5, r2
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	022b      	lsls	r3, r5, #8
 8008398:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800839c:	0222      	lsls	r2, r4, #8
 800839e:	68f9      	ldr	r1, [r7, #12]
 80083a0:	6849      	ldr	r1, [r1, #4]
 80083a2:	0849      	lsrs	r1, r1, #1
 80083a4:	2000      	movs	r0, #0
 80083a6:	4688      	mov	r8, r1
 80083a8:	4681      	mov	r9, r0
 80083aa:	eb12 0a08 	adds.w	sl, r2, r8
 80083ae:	eb43 0b09 	adc.w	fp, r3, r9
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c0:	4650      	mov	r0, sl
 80083c2:	4659      	mov	r1, fp
 80083c4:	f7f8 fc60 	bl	8000c88 <__aeabi_uldivmod>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4613      	mov	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d308      	bcc.n	80083ea <UART_SetConfig+0x3de>
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083de:	d204      	bcs.n	80083ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	60da      	str	r2, [r3, #12]
 80083e8:	e0b6      	b.n	8008558 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083f0:	e0b2      	b.n	8008558 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083fa:	d15e      	bne.n	80084ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80083fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008400:	2b08      	cmp	r3, #8
 8008402:	d828      	bhi.n	8008456 <UART_SetConfig+0x44a>
 8008404:	a201      	add	r2, pc, #4	; (adr r2, 800840c <UART_SetConfig+0x400>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008431 	.word	0x08008431
 8008410:	08008439 	.word	0x08008439
 8008414:	08008441 	.word	0x08008441
 8008418:	08008457 	.word	0x08008457
 800841c:	08008447 	.word	0x08008447
 8008420:	08008457 	.word	0x08008457
 8008424:	08008457 	.word	0x08008457
 8008428:	08008457 	.word	0x08008457
 800842c:	0800844f 	.word	0x0800844f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008430:	f7fd fa5a 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8008434:	61f8      	str	r0, [r7, #28]
        break;
 8008436:	e014      	b.n	8008462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008438:	f7fd fa6c 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 800843c:	61f8      	str	r0, [r7, #28]
        break;
 800843e:	e010      	b.n	8008462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008440:	4b4d      	ldr	r3, [pc, #308]	; (8008578 <UART_SetConfig+0x56c>)
 8008442:	61fb      	str	r3, [r7, #28]
        break;
 8008444:	e00d      	b.n	8008462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008446:	f7fd f9b7 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 800844a:	61f8      	str	r0, [r7, #28]
        break;
 800844c:	e009      	b.n	8008462 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	61fb      	str	r3, [r7, #28]
        break;
 8008454:	e005      	b.n	8008462 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d077      	beq.n	8008558 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	005a      	lsls	r2, r3, #1
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	085b      	lsrs	r3, r3, #1
 8008472:	441a      	add	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	fbb2 f3f3 	udiv	r3, r2, r3
 800847c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b0f      	cmp	r3, #15
 8008482:	d916      	bls.n	80084b2 <UART_SetConfig+0x4a6>
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848a:	d212      	bcs.n	80084b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f023 030f 	bic.w	r3, r3, #15
 8008494:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	085b      	lsrs	r3, r3, #1
 800849a:	b29b      	uxth	r3, r3
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	8afa      	ldrh	r2, [r7, #22]
 80084ae:	60da      	str	r2, [r3, #12]
 80084b0:	e052      	b.n	8008558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084b8:	e04e      	b.n	8008558 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d827      	bhi.n	8008512 <UART_SetConfig+0x506>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x4bc>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	08008513 	.word	0x08008513
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008513 	.word	0x08008513
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008513 	.word	0x08008513
 80084e8:	0800850b 	.word	0x0800850b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fd f9fc 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 80084f0:	61f8      	str	r0, [r7, #28]
        break;
 80084f2:	e014      	b.n	800851e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fd fa0e 	bl	8005914 <HAL_RCC_GetPCLK2Freq>
 80084f8:	61f8      	str	r0, [r7, #28]
        break;
 80084fa:	e010      	b.n	800851e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fc:	4b1e      	ldr	r3, [pc, #120]	; (8008578 <UART_SetConfig+0x56c>)
 80084fe:	61fb      	str	r3, [r7, #28]
        break;
 8008500:	e00d      	b.n	800851e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008502:	f7fd f959 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8008506:	61f8      	str	r0, [r7, #28]
        break;
 8008508:	e009      	b.n	800851e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850e:	61fb      	str	r3, [r7, #28]
        break;
 8008510:	e005      	b.n	800851e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800851c:	bf00      	nop
    }

    if (pclk != 0U)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d019      	beq.n	8008558 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	085a      	lsrs	r2, r3, #1
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	441a      	add	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	fbb2 f3f3 	udiv	r3, r2, r3
 8008536:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d909      	bls.n	8008552 <UART_SetConfig+0x546>
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008544:	d205      	bcs.n	8008552 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60da      	str	r2, [r3, #12]
 8008550:	e002      	b.n	8008558 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008568:	4618      	mov	r0, r3
 800856a:	3728      	adds	r7, #40	; 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008572:	bf00      	nop
 8008574:	40008000 	.word	0x40008000
 8008578:	00f42400 	.word	0x00f42400

0800857c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01a      	beq.n	8008692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800867a:	d10a      	bne.n	8008692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  }
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b098      	sub	sp, #96	; 0x60
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086d0:	f7f9 fe18 	bl	8002304 <HAL_GetTick>
 80086d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d12e      	bne.n	8008742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f88c 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d021      	beq.n	8008742 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008712:	653b      	str	r3, [r7, #80]	; 0x50
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800871c:	647b      	str	r3, [r7, #68]	; 0x44
 800871e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e062      	b.n	8008808 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b04      	cmp	r3, #4
 800874e:	d149      	bne.n	80087e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008758:	2200      	movs	r2, #0
 800875a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f856 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d03c      	beq.n	80087e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	623b      	str	r3, [r7, #32]
   return(result);
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	633b      	str	r3, [r7, #48]	; 0x30
 800878a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800878e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e6      	bne.n	800876a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087bc:	61fa      	str	r2, [r7, #28]
 80087be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	69b9      	ldr	r1, [r7, #24]
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e5      	bne.n	800879c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e011      	b.n	8008808 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2220      	movs	r2, #32
 80087e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3758      	adds	r7, #88	; 0x58
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008820:	e049      	b.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008828:	d045      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7f9 fd6b 	bl	8002304 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <UART_WaitOnFlagUntilTimeout+0x30>
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e048      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d031      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b08      	cmp	r3, #8
 800885e:	d110      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2208      	movs	r2, #8
 8008866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f838 	bl	80088de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2208      	movs	r2, #8
 8008872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e029      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800888c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008890:	d111      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800889a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f81e 	bl	80088de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e00f      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d0a6      	beq.n	8008822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088de:	b480      	push	{r7}
 80088e0:	b095      	sub	sp, #84	; 0x54
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008904:	643b      	str	r3, [r7, #64]	; 0x40
 8008906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800890a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	61fb      	str	r3, [r7, #28]
   return(result);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f023 0301 	bic.w	r3, r3, #1
 800892e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800893e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e5      	bne.n	8008918 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008950:	2b01      	cmp	r3, #1
 8008952:	d118      	bne.n	8008986 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	60bb      	str	r3, [r7, #8]
   return(result);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f023 0310 	bic.w	r3, r3, #16
 8008968:	647b      	str	r3, [r7, #68]	; 0x44
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6979      	ldr	r1, [r7, #20]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	613b      	str	r3, [r7, #16]
   return(result);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e6      	bne.n	8008954 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	669a      	str	r2, [r3, #104]	; 0x68
}
 800899a:	bf00      	nop
 800899c:	3754      	adds	r7, #84	; 0x54
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fb0b 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b08f      	sub	sp, #60	; 0x3c
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089de:	2b21      	cmp	r3, #33	; 0x21
 80089e0:	d14d      	bne.n	8008a7e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d132      	bne.n	8008a54 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e6      	bne.n	80089ee <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	633b      	str	r3, [r7, #48]	; 0x30
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	61bb      	str	r3, [r7, #24]
 8008a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6979      	ldr	r1, [r7, #20]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e6      	bne.n	8008a20 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008a52:	e014      	b.n	8008a7e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a58:	781a      	ldrb	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008a7e:	bf00      	nop
 8008a80:	373c      	adds	r7, #60	; 0x3c
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b091      	sub	sp, #68	; 0x44
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a96:	2b21      	cmp	r3, #33	; 0x21
 8008a98:	d151      	bne.n	8008b3e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d132      	bne.n	8008b0c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aec:	637b      	str	r3, [r7, #52]	; 0x34
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	617b      	str	r3, [r7, #20]
   return(result);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e6      	bne.n	8008ad8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b0a:	e018      	b.n	8008b3e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b14:	881a      	ldrh	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b1e:	b292      	uxth	r2, r2
 8008b20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	1c9a      	adds	r2, r3, #2
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008b3e:	bf00      	nop
 8008b40:	3744      	adds	r7, #68	; 0x44
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b088      	sub	sp, #32
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7f8 fa65 	bl	8001060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b96:	bf00      	nop
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <__NVIC_SetPriority>:
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	db0a      	blt.n	8008bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	490c      	ldr	r1, [pc, #48]	; (8008c00 <__NVIC_SetPriority+0x4c>)
 8008bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bd2:	0112      	lsls	r2, r2, #4
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bdc:	e00a      	b.n	8008bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4908      	ldr	r1, [pc, #32]	; (8008c04 <__NVIC_SetPriority+0x50>)
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	3b04      	subs	r3, #4
 8008bec:	0112      	lsls	r2, r2, #4
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	761a      	strb	r2, [r3, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	e000e100 	.word	0xe000e100
 8008c04:	e000ed00 	.word	0xe000ed00

08008c08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <SysTick_Handler+0x1c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c10:	f001 ffa0 	bl	800ab54 <xTaskGetSchedulerState>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d001      	beq.n	8008c1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c1a:	f002 fe85 	bl	800b928 <xPortSysTickHandler>
  }
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	e000e010 	.word	0xe000e010

08008c28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f06f 0004 	mvn.w	r0, #4
 8008c32:	f7ff ffbf 	bl	8008bb4 <__NVIC_SetPriority>
#endif
}
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c42:	f3ef 8305 	mrs	r3, IPSR
 8008c46:	603b      	str	r3, [r7, #0]
  return(result);
 8008c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c4e:	f06f 0305 	mvn.w	r3, #5
 8008c52:	607b      	str	r3, [r7, #4]
 8008c54:	e00c      	b.n	8008c70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c56:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <osKernelInitialize+0x44>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d105      	bne.n	8008c6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c5e:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <osKernelInitialize+0x44>)
 8008c60:	2201      	movs	r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e002      	b.n	8008c70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c70:	687b      	ldr	r3, [r7, #4]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20000478 	.word	0x20000478

08008c84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c8a:	f3ef 8305 	mrs	r3, IPSR
 8008c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c96:	f06f 0305 	mvn.w	r3, #5
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	e010      	b.n	8008cc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <osKernelStart+0x48>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d109      	bne.n	8008cba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ca6:	f7ff ffbf 	bl	8008c28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008caa:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <osKernelStart+0x48>)
 8008cac:	2202      	movs	r2, #2
 8008cae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cb0:	f001 faf4 	bl	800a29c <vTaskStartScheduler>
      stat = osOK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	607b      	str	r3, [r7, #4]
 8008cb8:	e002      	b.n	8008cc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cc0:	687b      	ldr	r3, [r7, #4]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000478 	.word	0x20000478

08008cd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af04      	add	r7, sp, #16
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce0:	f3ef 8305 	mrs	r3, IPSR
 8008ce4:	617b      	str	r3, [r7, #20]
  return(result);
 8008ce6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d17e      	bne.n	8008dea <osThreadNew+0x11a>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d07b      	beq.n	8008dea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008cf2:	2380      	movs	r3, #128	; 0x80
 8008cf4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cf6:	2318      	movs	r3, #24
 8008cf8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d045      	beq.n	8008d96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <osThreadNew+0x48>
        name = attr->name;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d008      	beq.n	8008d3e <osThreadNew+0x6e>
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b38      	cmp	r3, #56	; 0x38
 8008d30:	d805      	bhi.n	8008d3e <osThreadNew+0x6e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <osThreadNew+0x72>
        return (NULL);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e054      	b.n	8008dec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	089b      	lsrs	r3, r3, #2
 8008d50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <osThreadNew+0xa8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	2ba7      	cmp	r3, #167	; 0xa7
 8008d60:	d90a      	bls.n	8008d78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d006      	beq.n	8008d78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <osThreadNew+0xa8>
        mem = 1;
 8008d72:	2301      	movs	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	e010      	b.n	8008d9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10c      	bne.n	8008d9a <osThreadNew+0xca>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d108      	bne.n	8008d9a <osThreadNew+0xca>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d104      	bne.n	8008d9a <osThreadNew+0xca>
          mem = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	e001      	b.n	8008d9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d110      	bne.n	8008dc2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 ff6a 	bl	8009c90 <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	e013      	b.n	8008dea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d110      	bne.n	8008dea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	f107 0310 	add.w	r3, r7, #16
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 ffb5 	bl	8009d4a <xTaskCreate>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d001      	beq.n	8008dea <osThreadNew+0x11a>
            hTask = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dea:	693b      	ldr	r3, [r7, #16]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3728      	adds	r7, #40	; 0x28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dfc:	f3ef 8305 	mrs	r3, IPSR
 8008e00:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <osDelay+0x1c>
    stat = osErrorISR;
 8008e08:	f06f 0305 	mvn.w	r3, #5
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	e007      	b.n	8008e20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 f8f0 	bl	800a000 <vTaskDelay>
    }
  }

  return (stat);
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4a07      	ldr	r2, [pc, #28]	; (8008e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a06      	ldr	r2, [pc, #24]	; (8008e5c <vApplicationGetIdleTaskMemory+0x30>)
 8008e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2280      	movs	r2, #128	; 0x80
 8008e48:	601a      	str	r2, [r3, #0]
}
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	2000047c 	.word	0x2000047c
 8008e5c:	20000524 	.word	0x20000524

08008e60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <vApplicationGetTimerTaskMemory+0x2c>)
 8008e70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <vApplicationGetTimerTaskMemory+0x30>)
 8008e76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e7e:	601a      	str	r2, [r3, #0]
}
 8008e80:	bf00      	nop
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	20000724 	.word	0x20000724
 8008e90:	200007cc 	.word	0x200007cc

08008e94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f103 0208 	add.w	r2, r3, #8
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f103 0208 	add.w	r2, r3, #8
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f103 0208 	add.w	r2, r3, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f4c:	d103      	bne.n	8008f56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e00c      	b.n	8008f70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e002      	b.n	8008f64 <vListInsert+0x2e>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d2f6      	bcs.n	8008f5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	601a      	str	r2, [r3, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6892      	ldr	r2, [r2, #8]
 8008fbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6852      	ldr	r2, [r2, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d103      	bne.n	8008fdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009026:	f002 fbed 	bl	800b804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	441a      	add	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009056:	3b01      	subs	r3, #1
 8009058:	68f9      	ldr	r1, [r7, #12]
 800905a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d114      	bne.n	80090a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01a      	beq.n	80090ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3310      	adds	r3, #16
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fba1 	bl	800a7d0 <xTaskRemoveFromEventList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d012      	beq.n	80090ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <xQueueGenericReset+0xcc>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	e009      	b.n	80090ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3310      	adds	r3, #16
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fef2 	bl	8008e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3324      	adds	r3, #36	; 0x24
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff feed 	bl	8008e94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ba:	f002 fbd3 	bl	800b864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090be:	2301      	movs	r3, #1
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08e      	sub	sp, #56	; 0x38
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <xQueueGenericCreateStatic+0x52>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <xQueueGenericCreateStatic+0x56>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <xQueueGenericCreateStatic+0x58>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	623b      	str	r3, [r7, #32]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d102      	bne.n	800914a <xQueueGenericCreateStatic+0x7e>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <xQueueGenericCreateStatic+0x82>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <xQueueGenericCreateStatic+0x84>
 800914e:	2300      	movs	r3, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	61fb      	str	r3, [r7, #28]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800916a:	2350      	movs	r3, #80	; 0x50
 800916c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b50      	cmp	r3, #80	; 0x50
 8009172:	d00a      	beq.n	800918a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	61bb      	str	r3, [r7, #24]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800918a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800919e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4613      	mov	r3, r2
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f83f 	bl	8009230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3730      	adds	r7, #48	; 0x30
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3350      	adds	r3, #80	; 0x50
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 fc27 	bl	800ba48 <pvPortMalloc>
 80091fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d011      	beq.n	8009226 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3350      	adds	r3, #80	; 0x50
 800920a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009214:	79fa      	ldrb	r2, [r7, #7]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	4613      	mov	r3, r2
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f805 	bl	8009230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009226:	69bb      	ldr	r3, [r7, #24]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d103      	bne.n	800924c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e002      	b.n	8009252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800925e:	2101      	movs	r1, #1
 8009260:	69b8      	ldr	r0, [r7, #24]
 8009262:	f7ff fecb 	bl	8008ffc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08e      	sub	sp, #56	; 0x38
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009286:	2300      	movs	r3, #0
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xQueueGenericSend+0x32>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <xQueueGenericSend+0x40>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <xQueueGenericSend+0x44>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <xQueueGenericSend+0x46>
 80092bc:	2300      	movs	r3, #0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <xQueueGenericSend+0x60>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d103      	bne.n	80092e6 <xQueueGenericSend+0x6e>
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <xQueueGenericSend+0x72>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <xQueueGenericSend+0x74>
 80092ea:	2300      	movs	r3, #0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <xQueueGenericSend+0x8e>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	623b      	str	r3, [r7, #32]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009306:	f001 fc25 	bl	800ab54 <xTaskGetSchedulerState>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <xQueueGenericSend+0x9e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <xQueueGenericSend+0xa2>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <xQueueGenericSend+0xa4>
 800931a:	2300      	movs	r3, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <xQueueGenericSend+0xbe>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	61fb      	str	r3, [r7, #28]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009336:	f002 fa65 	bl	800b804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <xQueueGenericSend+0xd4>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d129      	bne.n	80093a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009352:	f000 fb2f 	bl	80099b4 <prvCopyDataToQueue>
 8009356:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d010      	beq.n	8009382 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	3324      	adds	r3, #36	; 0x24
 8009364:	4618      	mov	r0, r3
 8009366:	f001 fa33 	bl	800a7d0 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d013      	beq.n	8009398 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009370:	4b3f      	ldr	r3, [pc, #252]	; (8009470 <xQueueGenericSend+0x1f8>)
 8009372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	e00a      	b.n	8009398 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009388:	4b39      	ldr	r3, [pc, #228]	; (8009470 <xQueueGenericSend+0x1f8>)
 800938a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009398:	f002 fa64 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 800939c:	2301      	movs	r3, #1
 800939e:	e063      	b.n	8009468 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d103      	bne.n	80093ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093a6:	f002 fa5d 	bl	800b864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e05c      	b.n	8009468 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b4:	f107 0314 	add.w	r3, r7, #20
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 fa6d 	bl	800a898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093be:	2301      	movs	r3, #1
 80093c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c2:	f002 fa4f 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093c6:	f000 ffd9 	bl	800a37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ca:	f002 fa1b 	bl	800b804 <vPortEnterCritical>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093da:	d103      	bne.n	80093e4 <xQueueGenericSend+0x16c>
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ea:	b25b      	sxtb	r3, r3
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f0:	d103      	bne.n	80093fa <xQueueGenericSend+0x182>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fa:	f002 fa33 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093fe:	1d3a      	adds	r2, r7, #4
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fa5c 	bl	800a8c4 <xTaskCheckForTimeOut>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d124      	bne.n	800945c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009414:	f000 fbc6 	bl	8009ba4 <prvIsQueueFull>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d018      	beq.n	8009450 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	3310      	adds	r3, #16
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f982 	bl	800a730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800942c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942e:	f000 fb51 	bl	8009ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009432:	f000 ffb1 	bl	800a398 <xTaskResumeAll>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	f47f af7c 	bne.w	8009336 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800943e:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <xQueueGenericSend+0x1f8>)
 8009440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	e772      	b.n	8009336 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009452:	f000 fb3f 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009456:	f000 ff9f 	bl	800a398 <xTaskResumeAll>
 800945a:	e76c      	b.n	8009336 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800945c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800945e:	f000 fb39 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009462:	f000 ff99 	bl	800a398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009468:	4618      	mov	r0, r3
 800946a:	3738      	adds	r7, #56	; 0x38
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b090      	sub	sp, #64	; 0x40
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <xQueueGenericSendFromISR+0x3c>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <xQueueGenericSendFromISR+0x40>
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <xQueueGenericSendFromISR+0x42>
 80094b4:	2300      	movs	r3, #0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d103      	bne.n	80094de <xQueueGenericSendFromISR+0x6a>
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <xQueueGenericSendFromISR+0x6e>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <xQueueGenericSendFromISR+0x70>
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	623b      	str	r3, [r7, #32]
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094fe:	f002 fa63 	bl	800b9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009502:	f3ef 8211 	mrs	r2, BASEPRI
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	61fa      	str	r2, [r7, #28]
 8009518:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800951a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <xQueueGenericSendFromISR+0xbc>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d12f      	bne.n	8009590 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009546:	f000 fa35 	bl	80099b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800954a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009552:	d112      	bne.n	800957a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	d016      	beq.n	800958a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	3324      	adds	r3, #36	; 0x24
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f935 	bl	800a7d0 <xTaskRemoveFromEventList>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00e      	beq.n	800958a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e007      	b.n	800958a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800957a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800957e:	3301      	adds	r3, #1
 8009580:	b2db      	uxtb	r3, r3
 8009582:	b25a      	sxtb	r2, r3
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800958a:	2301      	movs	r3, #1
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800958e:	e001      	b.n	8009594 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009590:	2300      	movs	r3, #0
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009596:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800959e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3740      	adds	r7, #64	; 0x40
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	; 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095b8:	2300      	movs	r3, #0
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xQueueReceive+0x30>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	623b      	str	r3, [r7, #32]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d103      	bne.n	80095ea <xQueueReceive+0x3e>
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <xQueueReceive+0x42>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <xQueueReceive+0x44>
 80095ee:	2300      	movs	r3, #0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xQueueReceive+0x5e>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	61fb      	str	r3, [r7, #28]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800960a:	f001 faa3 	bl	800ab54 <xTaskGetSchedulerState>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <xQueueReceive+0x6e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <xQueueReceive+0x72>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <xQueueReceive+0x74>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xQueueReceive+0x8e>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	61bb      	str	r3, [r7, #24]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800963a:	f002 f8e3 	bl	800b804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01f      	beq.n	800968a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964e:	f000 fa1b 	bl	8009a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	1e5a      	subs	r2, r3, #1
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00f      	beq.n	8009682 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	3310      	adds	r3, #16
 8009666:	4618      	mov	r0, r3
 8009668:	f001 f8b2 	bl	800a7d0 <xTaskRemoveFromEventList>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009672:	4b3d      	ldr	r3, [pc, #244]	; (8009768 <xQueueReceive+0x1bc>)
 8009674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009682:	f002 f8ef 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 8009686:	2301      	movs	r3, #1
 8009688:	e069      	b.n	800975e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009690:	f002 f8e8 	bl	800b864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009694:	2300      	movs	r3, #0
 8009696:	e062      	b.n	800975e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800969e:	f107 0310 	add.w	r3, r7, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 f8f8 	bl	800a898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096ac:	f002 f8da 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096b0:	f000 fe64 	bl	800a37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096b4:	f002 f8a6 	bl	800b804 <vPortEnterCritical>
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c4:	d103      	bne.n	80096ce <xQueueReceive+0x122>
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d103      	bne.n	80096e4 <xQueueReceive+0x138>
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e4:	f002 f8be 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096e8:	1d3a      	adds	r2, r7, #4
 80096ea:	f107 0310 	add.w	r3, r7, #16
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 f8e7 	bl	800a8c4 <xTaskCheckForTimeOut>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d123      	bne.n	8009744 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fe:	f000 fa3b 	bl	8009b78 <prvIsQueueEmpty>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d017      	beq.n	8009738 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	3324      	adds	r3, #36	; 0x24
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f001 f80d 	bl	800a730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009718:	f000 f9dc 	bl	8009ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800971c:	f000 fe3c 	bl	800a398 <xTaskResumeAll>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d189      	bne.n	800963a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009726:	4b10      	ldr	r3, [pc, #64]	; (8009768 <xQueueReceive+0x1bc>)
 8009728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	e780      	b.n	800963a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973a:	f000 f9cb 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800973e:	f000 fe2b 	bl	800a398 <xTaskResumeAll>
 8009742:	e77a      	b.n	800963a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009746:	f000 f9c5 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800974a:	f000 fe25 	bl	800a398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800974e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009750:	f000 fa12 	bl	8009b78 <prvIsQueueEmpty>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	f43f af6f 	beq.w	800963a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800975c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800975e:	4618      	mov	r0, r3
 8009760:	3730      	adds	r7, #48	; 0x30
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	; 0x38
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10a      	bne.n	800979e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	623b      	str	r3, [r7, #32]
}
 800979a:	bf00      	nop
 800979c:	e7fe      	b.n	800979c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	61fb      	str	r3, [r7, #28]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097bc:	f001 f9ca 	bl	800ab54 <xTaskGetSchedulerState>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <xQueueSemaphoreTake+0x60>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <xQueueSemaphoreTake+0x64>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e000      	b.n	80097d2 <xQueueSemaphoreTake+0x66>
 80097d0:	2300      	movs	r3, #0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	61bb      	str	r3, [r7, #24]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ec:	f002 f80a 	bl	800b804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d024      	beq.n	8009846 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	1e5a      	subs	r2, r3, #1
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800980c:	f001 fb18 	bl	800ae40 <pvTaskIncrementMutexHeldCount>
 8009810:	4602      	mov	r2, r0
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00f      	beq.n	800983e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	3310      	adds	r3, #16
 8009822:	4618      	mov	r0, r3
 8009824:	f000 ffd4 	bl	800a7d0 <xTaskRemoveFromEventList>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800982e:	4b54      	ldr	r3, [pc, #336]	; (8009980 <xQueueSemaphoreTake+0x214>)
 8009830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800983e:	f002 f811 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 8009842:	2301      	movs	r3, #1
 8009844:	e097      	b.n	8009976 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d111      	bne.n	8009870 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	617b      	str	r3, [r7, #20]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009868:	f001 fffc 	bl	800b864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800986c:	2300      	movs	r3, #0
 800986e:	e082      	b.n	8009976 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009876:	f107 030c 	add.w	r3, r7, #12
 800987a:	4618      	mov	r0, r3
 800987c:	f001 f80c 	bl	800a898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009884:	f001 ffee 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009888:	f000 fd78 	bl	800a37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988c:	f001 ffba 	bl	800b804 <vPortEnterCritical>
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009896:	b25b      	sxtb	r3, r3
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989c:	d103      	bne.n	80098a6 <xQueueSemaphoreTake+0x13a>
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ac:	b25b      	sxtb	r3, r3
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b2:	d103      	bne.n	80098bc <xQueueSemaphoreTake+0x150>
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098bc:	f001 ffd2 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c0:	463a      	mov	r2, r7
 80098c2:	f107 030c 	add.w	r3, r7, #12
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fffb 	bl	800a8c4 <xTaskCheckForTimeOut>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d132      	bne.n	800993a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098d6:	f000 f94f 	bl	8009b78 <prvIsQueueEmpty>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d026      	beq.n	800992e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80098e8:	f001 ff8c 	bl	800b804 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 f94d 	bl	800ab90 <xTaskPriorityInherit>
 80098f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80098f8:	f001 ffb4 	bl	800b864 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f000 ff13 	bl	800a730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800990a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800990c:	f000 f8e2 	bl	8009ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009910:	f000 fd42 	bl	800a398 <xTaskResumeAll>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	f47f af68 	bne.w	80097ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800991c:	4b18      	ldr	r3, [pc, #96]	; (8009980 <xQueueSemaphoreTake+0x214>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	e75e      	b.n	80097ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800992e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009930:	f000 f8d0 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009934:	f000 fd30 	bl	800a398 <xTaskResumeAll>
 8009938:	e758      	b.n	80097ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800993a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800993c:	f000 f8ca 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009940:	f000 fd2a 	bl	800a398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009946:	f000 f917 	bl	8009b78 <prvIsQueueEmpty>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	f43f af4d 	beq.w	80097ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009958:	f001 ff54 	bl	800b804 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800995c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800995e:	f000 f811 	bl	8009984 <prvGetDisinheritPriorityAfterTimeout>
 8009962:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800996a:	4618      	mov	r0, r3
 800996c:	f001 f9e6 	bl	800ad3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009970:	f001 ff78 	bl	800b864 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009976:	4618      	mov	r0, r3
 8009978:	3738      	adds	r7, #56	; 0x38
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e001      	b.n	80099a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099a6:	68fb      	ldr	r3, [r7, #12]
	}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14d      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f93e 	bl	800ac60 <xTaskPriorityDisinherit>
 80099e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
 80099ec:	e043      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d119      	bne.n	8009a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6858      	ldr	r0, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	461a      	mov	r2, r3
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	f003 fab1 	bl	800cf66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d32b      	bcc.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	e026      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68d8      	ldr	r0, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	461a      	mov	r2, r3
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	f003 fa97 	bl	800cf66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a40:	425b      	negs	r3, r3
 8009a42:	441a      	add	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d207      	bcs.n	8009a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5c:	425b      	negs	r3, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d105      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a7e:	697b      	ldr	r3, [r7, #20]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d018      	beq.n	8009acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d303      	bcc.n	8009abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68d9      	ldr	r1, [r3, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	f003 fa4d 	bl	800cf66 <memcpy>
	}
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009adc:	f001 fe92 	bl	800b804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae8:	e011      	b.n	8009b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d012      	beq.n	8009b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	; 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fe6a 	bl	800a7d0 <xTaskRemoveFromEventList>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b02:	f000 ff41 	bl	800a988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dce9      	bgt.n	8009aea <prvUnlockQueue+0x16>
 8009b16:	e000      	b.n	8009b1a <prvUnlockQueue+0x46>
					break;
 8009b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	22ff      	movs	r2, #255	; 0xff
 8009b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b22:	f001 fe9f 	bl	800b864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b26:	f001 fe6d 	bl	800b804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b32:	e011      	b.n	8009b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d012      	beq.n	8009b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3310      	adds	r3, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fe45 	bl	800a7d0 <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b4c:	f000 ff1c 	bl	800a988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dce9      	bgt.n	8009b34 <prvUnlockQueue+0x60>
 8009b60:	e000      	b.n	8009b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	22ff      	movs	r2, #255	; 0xff
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b6c:	f001 fe7a 	bl	800b864 <vPortExitCritical>
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b80:	f001 fe40 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e001      	b.n	8009b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b96:	f001 fe65 	bl	800b864 <vPortExitCritical>

	return xReturn;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bac:	f001 fe2a 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d102      	bne.n	8009bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e001      	b.n	8009bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc6:	f001 fe4d 	bl	800b864 <vPortExitCritical>

	return xReturn;
 8009bca:	68fb      	ldr	r3, [r7, #12]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e014      	b.n	8009c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009be4:	4a0f      	ldr	r2, [pc, #60]	; (8009c24 <vQueueAddToRegistry+0x50>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bf0:	490c      	ldr	r1, [pc, #48]	; (8009c24 <vQueueAddToRegistry+0x50>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bfa:	4a0a      	ldr	r2, [pc, #40]	; (8009c24 <vQueueAddToRegistry+0x50>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c06:	e006      	b.n	8009c16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	d9e7      	bls.n	8009be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000bcc 	.word	0x20000bcc

08009c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c38:	f001 fde4 	bl	800b804 <vPortEnterCritical>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c42:	b25b      	sxtb	r3, r3
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c48:	d103      	bne.n	8009c52 <vQueueWaitForMessageRestricted+0x2a>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c58:	b25b      	sxtb	r3, r3
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5e:	d103      	bne.n	8009c68 <vQueueWaitForMessageRestricted+0x40>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c68:	f001 fdfc 	bl	800b864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	3324      	adds	r3, #36	; 0x24
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fd7b 	bl	800a778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c82:	6978      	ldr	r0, [r7, #20]
 8009c84:	f7ff ff26 	bl	8009ad4 <prvUnlockQueue>
	}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08e      	sub	sp, #56	; 0x38
 8009c94:	af04      	add	r7, sp, #16
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	623b      	str	r3, [r7, #32]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	61fb      	str	r3, [r7, #28]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cd6:	23a8      	movs	r3, #168	; 0xa8
 8009cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2ba8      	cmp	r3, #168	; 0xa8
 8009cde:	d00a      	beq.n	8009cf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	61bb      	str	r3, [r7, #24]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01e      	beq.n	8009d3c <xTaskCreateStatic+0xac>
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01b      	beq.n	8009d3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	2202      	movs	r2, #2
 8009d12:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d16:	2300      	movs	r3, #0
 8009d18:	9303      	str	r3, [sp, #12]
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	f107 0314 	add.w	r3, r7, #20
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f850 	bl	8009dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d36:	f000 f8f3 	bl	8009f20 <prvAddNewTaskToReadyList>
 8009d3a:	e001      	b.n	8009d40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d40:	697b      	ldr	r3, [r7, #20]
	}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3728      	adds	r7, #40	; 0x28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b08c      	sub	sp, #48	; 0x30
 8009d4e:	af04      	add	r7, sp, #16
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 fe72 	bl	800ba48 <pvPortMalloc>
 8009d64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00e      	beq.n	8009d8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d6c:	20a8      	movs	r0, #168	; 0xa8
 8009d6e:	f001 fe6b 	bl	800ba48 <pvPortMalloc>
 8009d72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8009d80:	e005      	b.n	8009d8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d82:	6978      	ldr	r0, [r7, #20]
 8009d84:	f001 ff2c 	bl	800bbe0 <vPortFree>
 8009d88:	e001      	b.n	8009d8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d017      	beq.n	8009dc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d9c:	88fa      	ldrh	r2, [r7, #6]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9303      	str	r3, [sp, #12]
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	9302      	str	r3, [sp, #8]
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f80e 	bl	8009dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009db8:	69f8      	ldr	r0, [r7, #28]
 8009dba:	f000 f8b1 	bl	8009f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	61bb      	str	r3, [r7, #24]
 8009dc2:	e002      	b.n	8009dca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dca:	69bb      	ldr	r3, [r7, #24]
	}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3720      	adds	r7, #32
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	461a      	mov	r2, r3
 8009dec:	21a5      	movs	r1, #165	; 0xa5
 8009dee:	f002 ffe4 	bl	800cdba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	617b      	str	r3, [r7, #20]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01f      	beq.n	8009e72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	e012      	b.n	8009e5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	7819      	ldrb	r1, [r3, #0]
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	3334      	adds	r3, #52	; 0x34
 8009e48:	460a      	mov	r2, r1
 8009e4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d006      	beq.n	8009e66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b0f      	cmp	r3, #15
 8009e62:	d9e9      	bls.n	8009e38 <prvInitialiseNewTask+0x64>
 8009e64:	e000      	b.n	8009e68 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e70:	e003      	b.n	8009e7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	2b37      	cmp	r3, #55	; 0x37
 8009e7e:	d901      	bls.n	8009e84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e80:	2337      	movs	r3, #55	; 0x37
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	2200      	movs	r2, #0
 8009e94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff f81a 	bl	8008ed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff f815 	bl	8008ed4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ebe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3354      	adds	r3, #84	; 0x54
 8009ed4:	224c      	movs	r2, #76	; 0x4c
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 ff6e 	bl	800cdba <memset>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	4a0c      	ldr	r2, [pc, #48]	; (8009f14 <prvInitialiseNewTask+0x140>)
 8009ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <prvInitialiseNewTask+0x144>)
 8009ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <prvInitialiseNewTask+0x148>)
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	69b8      	ldr	r0, [r7, #24]
 8009ef6:	f001 fb59 	bl	800b5ac <pxPortInitialiseStack>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f0c:	bf00      	nop
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000d5b0 	.word	0x2000d5b0
 8009f18:	2000d618 	.word	0x2000d618
 8009f1c:	2000d680 	.word	0x2000d680

08009f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f28:	f001 fc6c 	bl	800b804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f2c:	4b2d      	ldr	r3, [pc, #180]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a2c      	ldr	r2, [pc, #176]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f36:	4b2c      	ldr	r3, [pc, #176]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f3e:	4a2a      	ldr	r2, [pc, #168]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f44:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d110      	bne.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f4c:	f000 fd40 	bl	800a9d0 <prvInitialiseTaskLists>
 8009f50:	e00d      	b.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f52:	4b26      	ldr	r3, [pc, #152]	; (8009fec <prvAddNewTaskToReadyList+0xcc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f5a:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d802      	bhi.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f68:	4a1f      	ldr	r2, [pc, #124]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f6e:	4b20      	ldr	r3, [pc, #128]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f78:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <prvAddNewTaskToReadyList+0xd4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d903      	bls.n	8009f94 <prvAddNewTaskToReadyList+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	4a18      	ldr	r2, [pc, #96]	; (8009ff4 <prvAddNewTaskToReadyList+0xd4>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <prvAddNewTaskToReadyList+0xd8>)
 8009fa2:	441a      	add	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7fe ff9f 	bl	8008eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fb0:	f001 fc58 	bl	800b864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <prvAddNewTaskToReadyList+0xcc>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00e      	beq.n	8009fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d207      	bcs.n	8009fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <prvAddNewTaskToReadyList+0xdc>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200010e0 	.word	0x200010e0
 8009fe8:	20000c0c 	.word	0x20000c0c
 8009fec:	200010ec 	.word	0x200010ec
 8009ff0:	200010fc 	.word	0x200010fc
 8009ff4:	200010e8 	.word	0x200010e8
 8009ff8:	20000c10 	.word	0x20000c10
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d017      	beq.n	800a042 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a012:	4b13      	ldr	r3, [pc, #76]	; (800a060 <vTaskDelay+0x60>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <vTaskDelay+0x30>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	60bb      	str	r3, [r7, #8]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a030:	f000 f9a4 	bl	800a37c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a034:	2100      	movs	r1, #0
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 ff16 	bl	800ae68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a03c:	f000 f9ac 	bl	800a398 <xTaskResumeAll>
 800a040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a048:	4b06      	ldr	r3, [pc, #24]	; (800a064 <vTaskDelay+0x64>)
 800a04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20001108 	.word	0x20001108
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a070:	f001 fbc8 	bl	800b804 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <vTaskSuspend+0x18>
 800a07a:	4b30      	ldr	r3, [pc, #192]	; (800a13c <vTaskSuspend+0xd4>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	e000      	b.n	800a082 <vTaskSuspend+0x1a>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3304      	adds	r3, #4
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe ff8d 	bl	8008fa8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3318      	adds	r3, #24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe ff84 	bl	8008fa8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4826      	ldr	r0, [pc, #152]	; (800a140 <vTaskSuspend+0xd8>)
 800a0a8:	f7fe ff21 	bl	8008eee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d103      	bne.n	800a0c0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a0c0:	f001 fbd0 	bl	800b864 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a0c4:	4b1f      	ldr	r3, [pc, #124]	; (800a144 <vTaskSuspend+0xdc>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a0cc:	f001 fb9a 	bl	800b804 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a0d0:	f000 fd20 	bl	800ab14 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a0d4:	f001 fbc6 	bl	800b864 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a0d8:	4b18      	ldr	r3, [pc, #96]	; (800a13c <vTaskSuspend+0xd4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d127      	bne.n	800a132 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <vTaskSuspend+0xdc>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d017      	beq.n	800a11a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a0ea:	4b17      	ldr	r3, [pc, #92]	; (800a148 <vTaskSuspend+0xe0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <vTaskSuspend+0xa0>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60bb      	str	r3, [r7, #8]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <vTaskSuspend+0xe4>)
 800a10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a118:	e00b      	b.n	800a132 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a11a:	4b09      	ldr	r3, [pc, #36]	; (800a140 <vTaskSuspend+0xd8>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <vTaskSuspend+0xe8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	429a      	cmp	r2, r3
 800a124:	d103      	bne.n	800a12e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <vTaskSuspend+0xd4>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
	}
 800a12c:	e001      	b.n	800a132 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a12e:	f000 fa9b 	bl	800a668 <vTaskSwitchContext>
	}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000c0c 	.word	0x20000c0c
 800a140:	200010cc 	.word	0x200010cc
 800a144:	200010ec 	.word	0x200010ec
 800a148:	20001108 	.word	0x20001108
 800a14c:	e000ed04 	.word	0xe000ed04
 800a150:	200010e0 	.word	0x200010e0

0800a154 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <prvTaskIsTaskSuspended+0x5c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d10a      	bne.n	800a1a0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	4a09      	ldr	r2, [pc, #36]	; (800a1b4 <prvTaskIsTaskSuspended+0x60>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d005      	beq.n	800a1a0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a19c:	2301      	movs	r3, #1
 800a19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1a0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	200010cc 	.word	0x200010cc
 800a1b4:	200010a0 	.word	0x200010a0

0800a1b8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	61bb      	str	r3, [r7, #24]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1e4:	f001 fbf0 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a1e8:	f3ef 8211 	mrs	r2, BASEPRI
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	617a      	str	r2, [r7, #20]
 800a1fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a200:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a202:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a204:	6a38      	ldr	r0, [r7, #32]
 800a206:	f7ff ffa5 	bl	800a154 <prvTaskIsTaskSuspended>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d030      	beq.n	800a272 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a210:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <xTaskResumeFromISR+0xd0>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d126      	bne.n	800a266 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <xTaskResumeFromISR+0xd4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	429a      	cmp	r2, r3
 800a224:	d301      	bcc.n	800a22a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800a226:	2301      	movs	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	3304      	adds	r3, #4
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe feba 	bl	8008fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <xTaskResumeFromISR+0xd8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d903      	bls.n	800a248 <xTaskResumeFromISR+0x90>
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	4a12      	ldr	r2, [pc, #72]	; (800a290 <xTaskResumeFromISR+0xd8>)
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4a0f      	ldr	r2, [pc, #60]	; (800a294 <xTaskResumeFromISR+0xdc>)
 800a256:	441a      	add	r2, r3
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fe45 	bl	8008eee <vListInsertEnd>
 800a264:	e005      	b.n	800a272 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	3318      	adds	r3, #24
 800a26a:	4619      	mov	r1, r3
 800a26c:	480a      	ldr	r0, [pc, #40]	; (800a298 <xTaskResumeFromISR+0xe0>)
 800a26e:	f7fe fe3e 	bl	8008eee <vListInsertEnd>
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f383 8811 	msr	BASEPRI, r3
}
 800a27c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a280:	4618      	mov	r0, r3
 800a282:	3728      	adds	r7, #40	; 0x28
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20001108 	.word	0x20001108
 800a28c:	20000c0c 	.word	0x20000c0c
 800a290:	200010e8 	.word	0x200010e8
 800a294:	20000c10 	.word	0x20000c10
 800a298:	200010a0 	.word	0x200010a0

0800a29c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	; 0x28
 800a2a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2aa:	463a      	mov	r2, r7
 800a2ac:	1d39      	adds	r1, r7, #4
 800a2ae:	f107 0308 	add.w	r3, r7, #8
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fdba 	bl	8008e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	9202      	str	r2, [sp, #8]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	4924      	ldr	r1, [pc, #144]	; (800a35c <vTaskStartScheduler+0xc0>)
 800a2cc:	4824      	ldr	r0, [pc, #144]	; (800a360 <vTaskStartScheduler+0xc4>)
 800a2ce:	f7ff fcdf 	bl	8009c90 <xTaskCreateStatic>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4a23      	ldr	r2, [pc, #140]	; (800a364 <vTaskStartScheduler+0xc8>)
 800a2d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2d8:	4b22      	ldr	r3, [pc, #136]	; (800a364 <vTaskStartScheduler+0xc8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	e001      	b.n	800a2ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d102      	bne.n	800a2f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2f0:	f000 fe0e 	bl	800af10 <xTimerCreateTimerTask>
 800a2f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d11b      	bne.n	800a334 <vTaskStartScheduler+0x98>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	613b      	str	r3, [r7, #16]
}
 800a30e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a310:	4b15      	ldr	r3, [pc, #84]	; (800a368 <vTaskStartScheduler+0xcc>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3354      	adds	r3, #84	; 0x54
 800a316:	4a15      	ldr	r2, [pc, #84]	; (800a36c <vTaskStartScheduler+0xd0>)
 800a318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a31a:	4b15      	ldr	r3, [pc, #84]	; (800a370 <vTaskStartScheduler+0xd4>)
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a322:	4b14      	ldr	r3, [pc, #80]	; (800a374 <vTaskStartScheduler+0xd8>)
 800a324:	2201      	movs	r2, #1
 800a326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a328:	4b13      	ldr	r3, [pc, #76]	; (800a378 <vTaskStartScheduler+0xdc>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a32e:	f001 f9c7 	bl	800b6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a332:	e00e      	b.n	800a352 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a33a:	d10a      	bne.n	800a352 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60fb      	str	r3, [r7, #12]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <vTaskStartScheduler+0xb4>
}
 800a352:	bf00      	nop
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	080107c8 	.word	0x080107c8
 800a360:	0800a9a1 	.word	0x0800a9a1
 800a364:	20001104 	.word	0x20001104
 800a368:	20000c0c 	.word	0x20000c0c
 800a36c:	20000068 	.word	0x20000068
 800a370:	20001100 	.word	0x20001100
 800a374:	200010ec 	.word	0x200010ec
 800a378:	200010e4 	.word	0x200010e4

0800a37c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a380:	4b04      	ldr	r3, [pc, #16]	; (800a394 <vTaskSuspendAll+0x18>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	4a03      	ldr	r2, [pc, #12]	; (800a394 <vTaskSuspendAll+0x18>)
 800a388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a38a:	bf00      	nop
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	20001108 	.word	0x20001108

0800a398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3a6:	4b42      	ldr	r3, [pc, #264]	; (800a4b0 <xTaskResumeAll+0x118>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	603b      	str	r3, [r7, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3c4:	f001 fa1e 	bl	800b804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3c8:	4b39      	ldr	r3, [pc, #228]	; (800a4b0 <xTaskResumeAll+0x118>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	4a38      	ldr	r2, [pc, #224]	; (800a4b0 <xTaskResumeAll+0x118>)
 800a3d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d2:	4b37      	ldr	r3, [pc, #220]	; (800a4b0 <xTaskResumeAll+0x118>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d162      	bne.n	800a4a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3da:	4b36      	ldr	r3, [pc, #216]	; (800a4b4 <xTaskResumeAll+0x11c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d05e      	beq.n	800a4a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3e2:	e02f      	b.n	800a444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e4:	4b34      	ldr	r3, [pc, #208]	; (800a4b8 <xTaskResumeAll+0x120>)
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3318      	adds	r3, #24
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fdd9 	bl	8008fa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe fdd4 	bl	8008fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	4b2d      	ldr	r3, [pc, #180]	; (800a4bc <xTaskResumeAll+0x124>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d903      	bls.n	800a414 <xTaskResumeAll+0x7c>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	4a2a      	ldr	r2, [pc, #168]	; (800a4bc <xTaskResumeAll+0x124>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4a27      	ldr	r2, [pc, #156]	; (800a4c0 <xTaskResumeAll+0x128>)
 800a422:	441a      	add	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3304      	adds	r3, #4
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7fe fd5f 	bl	8008eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	4b23      	ldr	r3, [pc, #140]	; (800a4c4 <xTaskResumeAll+0x12c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d302      	bcc.n	800a444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a43e:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <xTaskResumeAll+0x130>)
 800a440:	2201      	movs	r2, #1
 800a442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a444:	4b1c      	ldr	r3, [pc, #112]	; (800a4b8 <xTaskResumeAll+0x120>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1cb      	bne.n	800a3e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a452:	f000 fb5f 	bl	800ab14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a456:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <xTaskResumeAll+0x134>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d010      	beq.n	800a484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a462:	f000 f847 	bl	800a4f4 <xTaskIncrementTick>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a46c:	4b16      	ldr	r3, [pc, #88]	; (800a4c8 <xTaskResumeAll+0x130>)
 800a46e:	2201      	movs	r2, #1
 800a470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3b01      	subs	r3, #1
 800a476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f1      	bne.n	800a462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a47e:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <xTaskResumeAll+0x134>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a484:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <xTaskResumeAll+0x130>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d009      	beq.n	800a4a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a490:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <xTaskResumeAll+0x138>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4a0:	f001 f9e0 	bl	800b864 <vPortExitCritical>

	return xAlreadyYielded;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20001108 	.word	0x20001108
 800a4b4:	200010e0 	.word	0x200010e0
 800a4b8:	200010a0 	.word	0x200010a0
 800a4bc:	200010e8 	.word	0x200010e8
 800a4c0:	20000c10 	.word	0x20000c10
 800a4c4:	20000c0c 	.word	0x20000c0c
 800a4c8:	200010f4 	.word	0x200010f4
 800a4cc:	200010f0 	.word	0x200010f0
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <xTaskGetTickCount+0x1c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4e0:	687b      	ldr	r3, [r7, #4]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	200010e4 	.word	0x200010e4

0800a4f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4fe:	4b4f      	ldr	r3, [pc, #316]	; (800a63c <xTaskIncrementTick+0x148>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	f040 808f 	bne.w	800a626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a508:	4b4d      	ldr	r3, [pc, #308]	; (800a640 <xTaskIncrementTick+0x14c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3301      	adds	r3, #1
 800a50e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a510:	4a4b      	ldr	r2, [pc, #300]	; (800a640 <xTaskIncrementTick+0x14c>)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d120      	bne.n	800a55e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a51c:	4b49      	ldr	r3, [pc, #292]	; (800a644 <xTaskIncrementTick+0x150>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <xTaskIncrementTick+0x48>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	603b      	str	r3, [r7, #0]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <xTaskIncrementTick+0x46>
 800a53c:	4b41      	ldr	r3, [pc, #260]	; (800a644 <xTaskIncrementTick+0x150>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	4b41      	ldr	r3, [pc, #260]	; (800a648 <xTaskIncrementTick+0x154>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a3f      	ldr	r2, [pc, #252]	; (800a644 <xTaskIncrementTick+0x150>)
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	4a3f      	ldr	r2, [pc, #252]	; (800a648 <xTaskIncrementTick+0x154>)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	4b3e      	ldr	r3, [pc, #248]	; (800a64c <xTaskIncrementTick+0x158>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	4a3d      	ldr	r2, [pc, #244]	; (800a64c <xTaskIncrementTick+0x158>)
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	f000 fadb 	bl	800ab14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a55e:	4b3c      	ldr	r3, [pc, #240]	; (800a650 <xTaskIncrementTick+0x15c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	d349      	bcc.n	800a5fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a568:	4b36      	ldr	r3, [pc, #216]	; (800a644 <xTaskIncrementTick+0x150>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a572:	4b37      	ldr	r3, [pc, #220]	; (800a650 <xTaskIncrementTick+0x15c>)
 800a574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a578:	601a      	str	r2, [r3, #0]
					break;
 800a57a:	e03f      	b.n	800a5fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a57c:	4b31      	ldr	r3, [pc, #196]	; (800a644 <xTaskIncrementTick+0x150>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d203      	bcs.n	800a59c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a594:	4a2e      	ldr	r2, [pc, #184]	; (800a650 <xTaskIncrementTick+0x15c>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a59a:	e02f      	b.n	800a5fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe fd01 	bl	8008fa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3318      	adds	r3, #24
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fcf8 	bl	8008fa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5bc:	4b25      	ldr	r3, [pc, #148]	; (800a654 <xTaskIncrementTick+0x160>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d903      	bls.n	800a5cc <xTaskIncrementTick+0xd8>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	4a22      	ldr	r2, [pc, #136]	; (800a654 <xTaskIncrementTick+0x160>)
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4a1f      	ldr	r2, [pc, #124]	; (800a658 <xTaskIncrementTick+0x164>)
 800a5da:	441a      	add	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	f7fe fc83 	bl	8008eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ec:	4b1b      	ldr	r3, [pc, #108]	; (800a65c <xTaskIncrementTick+0x168>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3b8      	bcc.n	800a568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5fa:	e7b5      	b.n	800a568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5fc:	4b17      	ldr	r3, [pc, #92]	; (800a65c <xTaskIncrementTick+0x168>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a602:	4915      	ldr	r1, [pc, #84]	; (800a658 <xTaskIncrementTick+0x164>)
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	440b      	add	r3, r1
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d901      	bls.n	800a618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a618:	4b11      	ldr	r3, [pc, #68]	; (800a660 <xTaskIncrementTick+0x16c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d007      	beq.n	800a630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e004      	b.n	800a630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a626:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <xTaskIncrementTick+0x170>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3301      	adds	r3, #1
 800a62c:	4a0d      	ldr	r2, [pc, #52]	; (800a664 <xTaskIncrementTick+0x170>)
 800a62e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a630:	697b      	ldr	r3, [r7, #20]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20001108 	.word	0x20001108
 800a640:	200010e4 	.word	0x200010e4
 800a644:	20001098 	.word	0x20001098
 800a648:	2000109c 	.word	0x2000109c
 800a64c:	200010f8 	.word	0x200010f8
 800a650:	20001100 	.word	0x20001100
 800a654:	200010e8 	.word	0x200010e8
 800a658:	20000c10 	.word	0x20000c10
 800a65c:	20000c0c 	.word	0x20000c0c
 800a660:	200010f4 	.word	0x200010f4
 800a664:	200010f0 	.word	0x200010f0

0800a668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a66e:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <vTaskSwitchContext+0xb0>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a676:	4b29      	ldr	r3, [pc, #164]	; (800a71c <vTaskSwitchContext+0xb4>)
 800a678:	2201      	movs	r2, #1
 800a67a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a67c:	e046      	b.n	800a70c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a67e:	4b27      	ldr	r3, [pc, #156]	; (800a71c <vTaskSwitchContext+0xb4>)
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a684:	4b26      	ldr	r3, [pc, #152]	; (800a720 <vTaskSwitchContext+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e010      	b.n	800a6ae <vTaskSwitchContext+0x46>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	607b      	str	r3, [r7, #4]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <vTaskSwitchContext+0x3e>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	491d      	ldr	r1, [pc, #116]	; (800a724 <vTaskSwitchContext+0xbc>)
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0e4      	beq.n	800a68c <vTaskSwitchContext+0x24>
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4a15      	ldr	r2, [pc, #84]	; (800a724 <vTaskSwitchContext+0xbc>)
 800a6ce:	4413      	add	r3, r2
 800a6d0:	60bb      	str	r3, [r7, #8]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d104      	bne.n	800a6f2 <vTaskSwitchContext+0x8a>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	4a0b      	ldr	r2, [pc, #44]	; (800a728 <vTaskSwitchContext+0xc0>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	4a08      	ldr	r2, [pc, #32]	; (800a720 <vTaskSwitchContext+0xb8>)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a702:	4b09      	ldr	r3, [pc, #36]	; (800a728 <vTaskSwitchContext+0xc0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3354      	adds	r3, #84	; 0x54
 800a708:	4a08      	ldr	r2, [pc, #32]	; (800a72c <vTaskSwitchContext+0xc4>)
 800a70a:	6013      	str	r3, [r2, #0]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	20001108 	.word	0x20001108
 800a71c:	200010f4 	.word	0x200010f4
 800a720:	200010e8 	.word	0x200010e8
 800a724:	20000c10 	.word	0x20000c10
 800a728:	20000c0c 	.word	0x20000c0c
 800a72c:	20000068 	.word	0x20000068

0800a730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	60fb      	str	r3, [r7, #12]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a756:	4b07      	ldr	r3, [pc, #28]	; (800a774 <vTaskPlaceOnEventList+0x44>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3318      	adds	r3, #24
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7fe fbe9 	bl	8008f36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a764:	2101      	movs	r1, #1
 800a766:	6838      	ldr	r0, [r7, #0]
 800a768:	f000 fb7e 	bl	800ae68 <prvAddCurrentTaskToDelayedList>
}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000c0c 	.word	0x20000c0c

0800a778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	617b      	str	r3, [r7, #20]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <vTaskPlaceOnEventListRestricted+0x54>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3318      	adds	r3, #24
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7fe fba0 	bl	8008eee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	68b8      	ldr	r0, [r7, #8]
 800a7be:	f000 fb53 	bl	800ae68 <prvAddCurrentTaskToDelayedList>
	}
 800a7c2:	bf00      	nop
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000c0c 	.word	0x20000c0c

0800a7d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60fb      	str	r3, [r7, #12]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	3318      	adds	r3, #24
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe fbd1 	bl	8008fa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a806:	4b1e      	ldr	r3, [pc, #120]	; (800a880 <xTaskRemoveFromEventList+0xb0>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d11d      	bne.n	800a84a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fbc8 	bl	8008fa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4b19      	ldr	r3, [pc, #100]	; (800a884 <xTaskRemoveFromEventList+0xb4>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d903      	bls.n	800a82c <xTaskRemoveFromEventList+0x5c>
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	4a16      	ldr	r2, [pc, #88]	; (800a884 <xTaskRemoveFromEventList+0xb4>)
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4a13      	ldr	r2, [pc, #76]	; (800a888 <xTaskRemoveFromEventList+0xb8>)
 800a83a:	441a      	add	r2, r3
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	3304      	adds	r3, #4
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f7fe fb53 	bl	8008eee <vListInsertEnd>
 800a848:	e005      	b.n	800a856 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3318      	adds	r3, #24
 800a84e:	4619      	mov	r1, r3
 800a850:	480e      	ldr	r0, [pc, #56]	; (800a88c <xTaskRemoveFromEventList+0xbc>)
 800a852:	f7fe fb4c 	bl	8008eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85a:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <xTaskRemoveFromEventList+0xc0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	429a      	cmp	r2, r3
 800a862:	d905      	bls.n	800a870 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <xTaskRemoveFromEventList+0xc4>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e001      	b.n	800a874 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a874:	697b      	ldr	r3, [r7, #20]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20001108 	.word	0x20001108
 800a884:	200010e8 	.word	0x200010e8
 800a888:	20000c10 	.word	0x20000c10
 800a88c:	200010a0 	.word	0x200010a0
 800a890:	20000c0c 	.word	0x20000c0c
 800a894:	200010f4 	.word	0x200010f4

0800a898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <vTaskInternalSetTimeOutState+0x24>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <vTaskInternalSetTimeOutState+0x28>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	605a      	str	r2, [r3, #4]
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	200010f8 	.word	0x200010f8
 800a8c0:	200010e4 	.word	0x200010e4

0800a8c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10a      	bne.n	800a8ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	613b      	str	r3, [r7, #16]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	60fb      	str	r3, [r7, #12]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a906:	f000 ff7d 	bl	800b804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a90a:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <xTaskCheckForTimeOut+0xbc>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a922:	d102      	bne.n	800a92a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	e023      	b.n	800a972 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	4b15      	ldr	r3, [pc, #84]	; (800a984 <xTaskCheckForTimeOut+0xc0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d007      	beq.n	800a946 <xTaskCheckForTimeOut+0x82>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d302      	bcc.n	800a946 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	61fb      	str	r3, [r7, #28]
 800a944:	e015      	b.n	800a972 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d20b      	bcs.n	800a968 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	1ad2      	subs	r2, r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff ff9b 	bl	800a898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	e004      	b.n	800a972 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a96e:	2301      	movs	r3, #1
 800a970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a972:	f000 ff77 	bl	800b864 <vPortExitCritical>

	return xReturn;
 800a976:	69fb      	ldr	r3, [r7, #28]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	200010e4 	.word	0x200010e4
 800a984:	200010f8 	.word	0x200010f8

0800a988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a98c:	4b03      	ldr	r3, [pc, #12]	; (800a99c <vTaskMissedYield+0x14>)
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	200010f4 	.word	0x200010f4

0800a9a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9a8:	f000 f852 	bl	800aa50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <prvIdleTask+0x28>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d9f9      	bls.n	800a9a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <prvIdleTask+0x2c>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9c4:	e7f0      	b.n	800a9a8 <prvIdleTask+0x8>
 800a9c6:	bf00      	nop
 800a9c8:	20000c10 	.word	0x20000c10
 800a9cc:	e000ed04 	.word	0xe000ed04

0800a9d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	607b      	str	r3, [r7, #4]
 800a9da:	e00c      	b.n	800a9f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4a12      	ldr	r2, [pc, #72]	; (800aa30 <prvInitialiseTaskLists+0x60>)
 800a9e8:	4413      	add	r3, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fa52 	bl	8008e94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b37      	cmp	r3, #55	; 0x37
 800a9fa:	d9ef      	bls.n	800a9dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9fc:	480d      	ldr	r0, [pc, #52]	; (800aa34 <prvInitialiseTaskLists+0x64>)
 800a9fe:	f7fe fa49 	bl	8008e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa02:	480d      	ldr	r0, [pc, #52]	; (800aa38 <prvInitialiseTaskLists+0x68>)
 800aa04:	f7fe fa46 	bl	8008e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa08:	480c      	ldr	r0, [pc, #48]	; (800aa3c <prvInitialiseTaskLists+0x6c>)
 800aa0a:	f7fe fa43 	bl	8008e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa0e:	480c      	ldr	r0, [pc, #48]	; (800aa40 <prvInitialiseTaskLists+0x70>)
 800aa10:	f7fe fa40 	bl	8008e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa14:	480b      	ldr	r0, [pc, #44]	; (800aa44 <prvInitialiseTaskLists+0x74>)
 800aa16:	f7fe fa3d 	bl	8008e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <prvInitialiseTaskLists+0x78>)
 800aa1c:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <prvInitialiseTaskLists+0x64>)
 800aa1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <prvInitialiseTaskLists+0x7c>)
 800aa22:	4a05      	ldr	r2, [pc, #20]	; (800aa38 <prvInitialiseTaskLists+0x68>)
 800aa24:	601a      	str	r2, [r3, #0]
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000c10 	.word	0x20000c10
 800aa34:	20001070 	.word	0x20001070
 800aa38:	20001084 	.word	0x20001084
 800aa3c:	200010a0 	.word	0x200010a0
 800aa40:	200010b4 	.word	0x200010b4
 800aa44:	200010cc 	.word	0x200010cc
 800aa48:	20001098 	.word	0x20001098
 800aa4c:	2000109c 	.word	0x2000109c

0800aa50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa56:	e019      	b.n	800aa8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa58:	f000 fed4 	bl	800b804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <prvCheckTasksWaitingTermination+0x50>)
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe fa9d 	bl	8008fa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <prvCheckTasksWaitingTermination+0x54>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	4a0b      	ldr	r2, [pc, #44]	; (800aaa4 <prvCheckTasksWaitingTermination+0x54>)
 800aa76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa78:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <prvCheckTasksWaitingTermination+0x58>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	4a0a      	ldr	r2, [pc, #40]	; (800aaa8 <prvCheckTasksWaitingTermination+0x58>)
 800aa80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa82:	f000 feef 	bl	800b864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f810 	bl	800aaac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <prvCheckTasksWaitingTermination+0x58>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e1      	bne.n	800aa58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	200010b4 	.word	0x200010b4
 800aaa4:	200010e0 	.word	0x200010e0
 800aaa8:	200010c8 	.word	0x200010c8

0800aaac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3354      	adds	r3, #84	; 0x54
 800aab8:	4618      	mov	r0, r3
 800aaba:	f002 f99b 	bl	800cdf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 f887 	bl	800bbe0 <vPortFree>
				vPortFree( pxTCB );
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 f884 	bl	800bbe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aad8:	e018      	b.n	800ab0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d103      	bne.n	800aaec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f87b 	bl	800bbe0 <vPortFree>
	}
 800aaea:	e00f      	b.n	800ab0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d00a      	beq.n	800ab0c <prvDeleteTCB+0x60>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	e7fe      	b.n	800ab0a <prvDeleteTCB+0x5e>
	}
 800ab0c:	bf00      	nop
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	; (800ab4c <prvResetNextTaskUnblockTime+0x38>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <prvResetNextTaskUnblockTime+0x3c>)
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab2c:	e008      	b.n	800ab40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab2e:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <prvResetNextTaskUnblockTime+0x38>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	4a04      	ldr	r2, [pc, #16]	; (800ab50 <prvResetNextTaskUnblockTime+0x3c>)
 800ab3e:	6013      	str	r3, [r2, #0]
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	20001098 	.word	0x20001098
 800ab50:	20001100 	.word	0x20001100

0800ab54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <xTaskGetSchedulerState+0x34>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab62:	2301      	movs	r3, #1
 800ab64:	607b      	str	r3, [r7, #4]
 800ab66:	e008      	b.n	800ab7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab68:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <xTaskGetSchedulerState+0x38>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab70:	2302      	movs	r3, #2
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	e001      	b.n	800ab7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab76:	2300      	movs	r3, #0
 800ab78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab7a:	687b      	ldr	r3, [r7, #4]
	}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	200010ec 	.word	0x200010ec
 800ab8c:	20001108 	.word	0x20001108

0800ab90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d051      	beq.n	800ac4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <xTaskPriorityInherit+0xc4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d241      	bcs.n	800ac38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	db06      	blt.n	800abca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbc:	4b25      	ldr	r3, [pc, #148]	; (800ac54 <xTaskPriorityInherit+0xc4>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6959      	ldr	r1, [r3, #20]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4a1f      	ldr	r2, [pc, #124]	; (800ac58 <xTaskPriorityInherit+0xc8>)
 800abdc:	4413      	add	r3, r2
 800abde:	4299      	cmp	r1, r3
 800abe0:	d122      	bne.n	800ac28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe f9de 	bl	8008fa8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abec:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <xTaskPriorityInherit+0xc4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <xTaskPriorityInherit+0xcc>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d903      	bls.n	800ac0a <xTaskPriorityInherit+0x7a>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a15      	ldr	r2, [pc, #84]	; (800ac5c <xTaskPriorityInherit+0xcc>)
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4a10      	ldr	r2, [pc, #64]	; (800ac58 <xTaskPriorityInherit+0xc8>)
 800ac18:	441a      	add	r2, r3
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7fe f964 	bl	8008eee <vListInsertEnd>
 800ac26:	e004      	b.n	800ac32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <xTaskPriorityInherit+0xc4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac32:	2301      	movs	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	e008      	b.n	800ac4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <xTaskPriorityInherit+0xc4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d201      	bcs.n	800ac4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac46:	2301      	movs	r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000c0c 	.word	0x20000c0c
 800ac58:	20000c10 	.word	0x20000c10
 800ac5c:	200010e8 	.word	0x200010e8

0800ac60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d056      	beq.n	800ad24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac76:	4b2e      	ldr	r3, [pc, #184]	; (800ad30 <xTaskPriorityDisinherit+0xd0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d00a      	beq.n	800ac96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	60fb      	str	r3, [r7, #12]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	60bb      	str	r3, [r7, #8]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb8:	1e5a      	subs	r2, r3, #1
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d02c      	beq.n	800ad24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d128      	bne.n	800ad24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	3304      	adds	r3, #4
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe f966 	bl	8008fa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <xTaskPriorityDisinherit+0xd4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d903      	bls.n	800ad04 <xTaskPriorityDisinherit+0xa4>
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	4a0c      	ldr	r2, [pc, #48]	; (800ad34 <xTaskPriorityDisinherit+0xd4>)
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4a09      	ldr	r2, [pc, #36]	; (800ad38 <xTaskPriorityDisinherit+0xd8>)
 800ad12:	441a      	add	r2, r3
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fe f8e7 	bl	8008eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad20:	2301      	movs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad24:	697b      	ldr	r3, [r7, #20]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000c0c 	.word	0x20000c0c
 800ad34:	200010e8 	.word	0x200010e8
 800ad38:	20000c10 	.word	0x20000c10

0800ad3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d06a      	beq.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60fb      	str	r3, [r7, #12]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d902      	bls.n	800ad82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e002      	b.n	800ad88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d04b      	beq.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d146      	bne.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad9c:	4b25      	ldr	r3, [pc, #148]	; (800ae34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d10a      	bne.n	800adbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60bb      	str	r3, [r7, #8]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	db04      	blt.n	800adda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	6959      	ldr	r1, [r3, #20]
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4a13      	ldr	r2, [pc, #76]	; (800ae38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800adea:	4413      	add	r3, r2
 800adec:	4299      	cmp	r1, r3
 800adee:	d11c      	bne.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe f8d7 	bl	8008fa8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d903      	bls.n	800ae0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4a07      	ldr	r2, [pc, #28]	; (800ae38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ae1c:	441a      	add	r2, r3
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	3304      	adds	r3, #4
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f7fe f862 	bl	8008eee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae2a:	bf00      	nop
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20000c0c 	.word	0x20000c0c
 800ae38:	20000c10 	.word	0x20000c10
 800ae3c:	200010e8 	.word	0x200010e8

0800ae40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae52:	3201      	adds	r2, #1
 800ae54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ae56:	4b03      	ldr	r3, [pc, #12]	; (800ae64 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae58:	681b      	ldr	r3, [r3, #0]
	}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	20000c0c 	.word	0x20000c0c

0800ae68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae72:	4b21      	ldr	r3, [pc, #132]	; (800aef8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae78:	4b20      	ldr	r3, [pc, #128]	; (800aefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe f892 	bl	8008fa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8a:	d10a      	bne.n	800aea2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3304      	adds	r3, #4
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4819      	ldr	r0, [pc, #100]	; (800af00 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae9c:	f7fe f827 	bl	8008eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aea0:	e026      	b.n	800aef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4413      	add	r3, r2
 800aea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <prvAddCurrentTaskToDelayedList+0x94>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d209      	bcs.n	800aece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <prvAddCurrentTaskToDelayedList+0x94>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3304      	adds	r3, #4
 800aec4:	4619      	mov	r1, r3
 800aec6:	4610      	mov	r0, r2
 800aec8:	f7fe f835 	bl	8008f36 <vListInsert>
}
 800aecc:	e010      	b.n	800aef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aece:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <prvAddCurrentTaskToDelayedList+0x94>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3304      	adds	r3, #4
 800aed8:	4619      	mov	r1, r3
 800aeda:	4610      	mov	r0, r2
 800aedc:	f7fe f82b 	bl	8008f36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d202      	bcs.n	800aef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aeea:	4a08      	ldr	r2, [pc, #32]	; (800af0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6013      	str	r3, [r2, #0]
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	200010e4 	.word	0x200010e4
 800aefc:	20000c0c 	.word	0x20000c0c
 800af00:	200010cc 	.word	0x200010cc
 800af04:	2000109c 	.word	0x2000109c
 800af08:	20001098 	.word	0x20001098
 800af0c:	20001100 	.word	0x20001100

0800af10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af1a:	f000 fb07 	bl	800b52c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af1e:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <xTimerCreateTimerTask+0x80>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d021      	beq.n	800af6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af2e:	1d3a      	adds	r2, r7, #4
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	f107 030c 	add.w	r3, r7, #12
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd ff91 	bl	8008e60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	9202      	str	r2, [sp, #8]
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	2302      	movs	r3, #2
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	460a      	mov	r2, r1
 800af50:	4910      	ldr	r1, [pc, #64]	; (800af94 <xTimerCreateTimerTask+0x84>)
 800af52:	4811      	ldr	r0, [pc, #68]	; (800af98 <xTimerCreateTimerTask+0x88>)
 800af54:	f7fe fe9c 	bl	8009c90 <xTaskCreateStatic>
 800af58:	4603      	mov	r3, r0
 800af5a:	4a10      	ldr	r2, [pc, #64]	; (800af9c <xTimerCreateTimerTask+0x8c>)
 800af5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af5e:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <xTimerCreateTimerTask+0x8c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af66:	2301      	movs	r3, #1
 800af68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af86:	697b      	ldr	r3, [r7, #20]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	2000113c 	.word	0x2000113c
 800af94:	080107d0 	.word	0x080107d0
 800af98:	0800b0d5 	.word	0x0800b0d5
 800af9c:	20001140 	.word	0x20001140

0800afa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08a      	sub	sp, #40	; 0x28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afae:	2300      	movs	r3, #0
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <xTimerGenericCommand+0x2e>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	623b      	str	r3, [r7, #32]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afce:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <xTimerGenericCommand+0x98>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d02a      	beq.n	800b02c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b05      	cmp	r3, #5
 800afe6:	dc18      	bgt.n	800b01a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afe8:	f7ff fdb4 	bl	800ab54 <xTaskGetSchedulerState>
 800afec:	4603      	mov	r3, r0
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d109      	bne.n	800b006 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <xTimerGenericCommand+0x98>)
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	f107 0110 	add.w	r1, r7, #16
 800affa:	2300      	movs	r3, #0
 800affc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800affe:	f7fe f93b 	bl	8009278 <xQueueGenericSend>
 800b002:	6278      	str	r0, [r7, #36]	; 0x24
 800b004:	e012      	b.n	800b02c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b006:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <xTimerGenericCommand+0x98>)
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f107 0110 	add.w	r1, r7, #16
 800b00e:	2300      	movs	r3, #0
 800b010:	2200      	movs	r2, #0
 800b012:	f7fe f931 	bl	8009278 <xQueueGenericSend>
 800b016:	6278      	str	r0, [r7, #36]	; 0x24
 800b018:	e008      	b.n	800b02c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b01a:	4b07      	ldr	r3, [pc, #28]	; (800b038 <xTimerGenericCommand+0x98>)
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f107 0110 	add.w	r1, r7, #16
 800b022:	2300      	movs	r3, #0
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	f7fe fa25 	bl	8009474 <xQueueGenericSendFromISR>
 800b02a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3728      	adds	r7, #40	; 0x28
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	2000113c 	.word	0x2000113c

0800b03c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af02      	add	r7, sp, #8
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b046:	4b22      	ldr	r3, [pc, #136]	; (800b0d0 <prvProcessExpiredTimer+0x94>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd ffa7 	bl	8008fa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d022      	beq.n	800b0ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	699a      	ldr	r2, [r3, #24]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	18d1      	adds	r1, r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	6978      	ldr	r0, [r7, #20]
 800b076:	f000 f8d1 	bl	800b21c <prvInsertTimerInActiveList>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01f      	beq.n	800b0c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b080:	2300      	movs	r3, #0
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2300      	movs	r3, #0
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	2100      	movs	r1, #0
 800b08a:	6978      	ldr	r0, [r7, #20]
 800b08c:	f7ff ff88 	bl	800afa0 <xTimerGenericCommand>
 800b090:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d113      	bne.n	800b0c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b4:	f023 0301 	bic.w	r3, r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	6978      	ldr	r0, [r7, #20]
 800b0c6:	4798      	blx	r3
}
 800b0c8:	bf00      	nop
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20001134 	.word	0x20001134

0800b0d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 f857 	bl	800b194 <prvGetNextExpireTime>
 800b0e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f803 	bl	800b0f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0f2:	f000 f8d5 	bl	800b2a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0f6:	e7f1      	b.n	800b0dc <prvTimerTask+0x8>

0800b0f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b102:	f7ff f93b 	bl	800a37c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b106:	f107 0308 	add.w	r3, r7, #8
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f866 	bl	800b1dc <prvSampleTimeNow>
 800b110:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d130      	bne.n	800b17a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10a      	bne.n	800b134 <prvProcessTimerOrBlockTask+0x3c>
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	429a      	cmp	r2, r3
 800b124:	d806      	bhi.n	800b134 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b126:	f7ff f937 	bl	800a398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff ff85 	bl	800b03c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b132:	e024      	b.n	800b17e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d008      	beq.n	800b14c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <prvProcessTimerOrBlockTask+0x90>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <prvProcessTimerOrBlockTask+0x50>
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <prvProcessTimerOrBlockTask+0x52>
 800b148:	2300      	movs	r3, #0
 800b14a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b14c:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <prvProcessTimerOrBlockTask+0x94>)
 800b14e:	6818      	ldr	r0, [r3, #0]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	4619      	mov	r1, r3
 800b15a:	f7fe fd65 	bl	8009c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b15e:	f7ff f91b 	bl	800a398 <xTaskResumeAll>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10a      	bne.n	800b17e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b168:	4b09      	ldr	r3, [pc, #36]	; (800b190 <prvProcessTimerOrBlockTask+0x98>)
 800b16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	f3bf 8f6f 	isb	sy
}
 800b178:	e001      	b.n	800b17e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b17a:	f7ff f90d 	bl	800a398 <xTaskResumeAll>
}
 800b17e:	bf00      	nop
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20001138 	.word	0x20001138
 800b18c:	2000113c 	.word	0x2000113c
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b19c:	4b0e      	ldr	r3, [pc, #56]	; (800b1d8 <prvGetNextExpireTime+0x44>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <prvGetNextExpireTime+0x16>
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	e000      	b.n	800b1ac <prvGetNextExpireTime+0x18>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1b8:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <prvGetNextExpireTime+0x44>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	e001      	b.n	800b1c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	20001134 	.word	0x20001134

0800b1dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1e4:	f7ff f976 	bl	800a4d4 <xTaskGetTickCount>
 800b1e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1ea:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <prvSampleTimeNow+0x3c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d205      	bcs.n	800b200 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1f4:	f000 f936 	bl	800b464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	e002      	b.n	800b206 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b206:	4a04      	ldr	r2, [pc, #16]	; (800b218 <prvSampleTimeNow+0x3c>)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b20c:	68fb      	ldr	r3, [r7, #12]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20001144 	.word	0x20001144

0800b21c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d812      	bhi.n	800b268 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d302      	bcc.n	800b256 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	e01b      	b.n	800b28e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b256:	4b10      	ldr	r3, [pc, #64]	; (800b298 <prvInsertTimerInActiveList+0x7c>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3304      	adds	r3, #4
 800b25e:	4619      	mov	r1, r3
 800b260:	4610      	mov	r0, r2
 800b262:	f7fd fe68 	bl	8008f36 <vListInsert>
 800b266:	e012      	b.n	800b28e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d206      	bcs.n	800b27e <prvInsertTimerInActiveList+0x62>
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d302      	bcc.n	800b27e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b278:	2301      	movs	r3, #1
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	e007      	b.n	800b28e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b27e:	4b07      	ldr	r3, [pc, #28]	; (800b29c <prvInsertTimerInActiveList+0x80>)
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3304      	adds	r3, #4
 800b286:	4619      	mov	r1, r3
 800b288:	4610      	mov	r0, r2
 800b28a:	f7fd fe54 	bl	8008f36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b28e:	697b      	ldr	r3, [r7, #20]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20001138 	.word	0x20001138
 800b29c:	20001134 	.word	0x20001134

0800b2a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08e      	sub	sp, #56	; 0x38
 800b2a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2a6:	e0ca      	b.n	800b43e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da18      	bge.n	800b2e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2ae:	1d3b      	adds	r3, r7, #4
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	61fb      	str	r3, [r7, #28]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2d6:	6850      	ldr	r0, [r2, #4]
 800b2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2da:	6892      	ldr	r2, [r2, #8]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f2c0 80ab 	blt.w	800b43e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d004      	beq.n	800b2fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fd fe55 	bl	8008fa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2fe:	463b      	mov	r3, r7
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff ff6b 	bl	800b1dc <prvSampleTimeNow>
 800b306:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b09      	cmp	r3, #9
 800b30c:	f200 8096 	bhi.w	800b43c <prvProcessReceivedCommands+0x19c>
 800b310:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <prvProcessReceivedCommands+0x78>)
 800b312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b316:	bf00      	nop
 800b318:	0800b341 	.word	0x0800b341
 800b31c:	0800b341 	.word	0x0800b341
 800b320:	0800b341 	.word	0x0800b341
 800b324:	0800b3b5 	.word	0x0800b3b5
 800b328:	0800b3c9 	.word	0x0800b3c9
 800b32c:	0800b413 	.word	0x0800b413
 800b330:	0800b341 	.word	0x0800b341
 800b334:	0800b341 	.word	0x0800b341
 800b338:	0800b3b5 	.word	0x0800b3b5
 800b33c:	0800b3c9 	.word	0x0800b3c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	18d1      	adds	r1, r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b360:	f7ff ff5c 	bl	800b21c <prvInsertTimerInActiveList>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d069      	beq.n	800b43e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b370:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d05e      	beq.n	800b43e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	441a      	add	r2, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2300      	movs	r3, #0
 800b38e:	2100      	movs	r1, #0
 800b390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b392:	f7ff fe05 	bl	800afa0 <xTimerGenericCommand>
 800b396:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d14f      	bne.n	800b43e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	61bb      	str	r3, [r7, #24]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ba:	f023 0301 	bic.w	r3, r3, #1
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b3c6:	e03a      	b.n	800b43e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ce:	f043 0301 	orr.w	r3, r3, #1
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10a      	bne.n	800b3fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	617b      	str	r3, [r7, #20]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	18d1      	adds	r1, r2, r3
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40c:	f7ff ff06 	bl	800b21c <prvInsertTimerInActiveList>
					break;
 800b410:	e015      	b.n	800b43e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b422:	f000 fbdd 	bl	800bbe0 <vPortFree>
 800b426:	e00a      	b.n	800b43e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b42e:	f023 0301 	bic.w	r3, r3, #1
 800b432:	b2da      	uxtb	r2, r3
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b43a:	e000      	b.n	800b43e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b43c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b43e:	4b08      	ldr	r3, [pc, #32]	; (800b460 <prvProcessReceivedCommands+0x1c0>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1d39      	adds	r1, r7, #4
 800b444:	2200      	movs	r2, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f7fe f8b0 	bl	80095ac <xQueueReceive>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f47f af2a 	bne.w	800b2a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	3730      	adds	r7, #48	; 0x30
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	2000113c 	.word	0x2000113c

0800b464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b088      	sub	sp, #32
 800b468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b46a:	e048      	b.n	800b4fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b46c:	4b2d      	ldr	r3, [pc, #180]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b476:	4b2b      	ldr	r3, [pc, #172]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3304      	adds	r3, #4
 800b484:	4618      	mov	r0, r3
 800b486:	f7fd fd8f 	bl	8008fa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d02e      	beq.n	800b4fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d90e      	bls.n	800b4d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4be:	4b19      	ldr	r3, [pc, #100]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	f7fd fd34 	bl	8008f36 <vListInsert>
 800b4ce:	e016      	b.n	800b4fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff fd60 	bl	800afa0 <xTimerGenericCommand>
 800b4e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	603b      	str	r3, [r7, #0]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1b1      	bne.n	800b46c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <prvSwitchTimerLists+0xc4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a04      	ldr	r2, [pc, #16]	; (800b524 <prvSwitchTimerLists+0xc0>)
 800b514:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b516:	4a04      	ldr	r2, [pc, #16]	; (800b528 <prvSwitchTimerLists+0xc4>)
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	6013      	str	r3, [r2, #0]
}
 800b51c:	bf00      	nop
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20001134 	.word	0x20001134
 800b528:	20001138 	.word	0x20001138

0800b52c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b532:	f000 f967 	bl	800b804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b536:	4b15      	ldr	r3, [pc, #84]	; (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d120      	bne.n	800b580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b53e:	4814      	ldr	r0, [pc, #80]	; (800b590 <prvCheckForValidListAndQueue+0x64>)
 800b540:	f7fd fca8 	bl	8008e94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b544:	4813      	ldr	r0, [pc, #76]	; (800b594 <prvCheckForValidListAndQueue+0x68>)
 800b546:	f7fd fca5 	bl	8008e94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <prvCheckForValidListAndQueue+0x6c>)
 800b54c:	4a10      	ldr	r2, [pc, #64]	; (800b590 <prvCheckForValidListAndQueue+0x64>)
 800b54e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b550:	4b12      	ldr	r3, [pc, #72]	; (800b59c <prvCheckForValidListAndQueue+0x70>)
 800b552:	4a10      	ldr	r2, [pc, #64]	; (800b594 <prvCheckForValidListAndQueue+0x68>)
 800b554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b556:	2300      	movs	r3, #0
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <prvCheckForValidListAndQueue+0x74>)
 800b55c:	4a11      	ldr	r2, [pc, #68]	; (800b5a4 <prvCheckForValidListAndQueue+0x78>)
 800b55e:	2110      	movs	r1, #16
 800b560:	200a      	movs	r0, #10
 800b562:	f7fd fdb3 	bl	80090cc <xQueueGenericCreateStatic>
 800b566:	4603      	mov	r3, r0
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b56a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b56c:	4b07      	ldr	r3, [pc, #28]	; (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b574:	4b05      	ldr	r3, [pc, #20]	; (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	490b      	ldr	r1, [pc, #44]	; (800b5a8 <prvCheckForValidListAndQueue+0x7c>)
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fb2a 	bl	8009bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b580:	f000 f970 	bl	800b864 <vPortExitCritical>
}
 800b584:	bf00      	nop
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	2000113c 	.word	0x2000113c
 800b590:	2000110c 	.word	0x2000110c
 800b594:	20001120 	.word	0x20001120
 800b598:	20001134 	.word	0x20001134
 800b59c:	20001138 	.word	0x20001138
 800b5a0:	200011e8 	.word	0x200011e8
 800b5a4:	20001148 	.word	0x20001148
 800b5a8:	080107d8 	.word	0x080107d8

0800b5ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3b04      	subs	r3, #4
 800b5bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3b04      	subs	r3, #4
 800b5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f023 0201 	bic.w	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5dc:	4a0c      	ldr	r2, [pc, #48]	; (800b610 <pxPortInitialiseStack+0x64>)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3b14      	subs	r3, #20
 800b5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3b04      	subs	r3, #4
 800b5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f06f 0202 	mvn.w	r2, #2
 800b5fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3b20      	subs	r3, #32
 800b600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	0800b615 	.word	0x0800b615

0800b614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b61e:	4b12      	ldr	r3, [pc, #72]	; (800b668 <prvTaskExitError+0x54>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b626:	d00a      	beq.n	800b63e <prvTaskExitError+0x2a>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	60fb      	str	r3, [r7, #12]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <prvTaskExitError+0x28>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	60bb      	str	r3, [r7, #8]
}
 800b650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b652:	bf00      	nop
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0fc      	beq.n	800b654 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b65a:	bf00      	nop
 800b65c:	bf00      	nop
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	2000000c 	.word	0x2000000c
 800b66c:	00000000 	.word	0x00000000

0800b670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b670:	4b07      	ldr	r3, [pc, #28]	; (800b690 <pxCurrentTCBConst2>)
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	6808      	ldr	r0, [r1, #0]
 800b676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	f380 8809 	msr	PSP, r0
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f04f 0000 	mov.w	r0, #0
 800b686:	f380 8811 	msr	BASEPRI, r0
 800b68a:	4770      	bx	lr
 800b68c:	f3af 8000 	nop.w

0800b690 <pxCurrentTCBConst2>:
 800b690:	20000c0c 	.word	0x20000c0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop

0800b698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b698:	4808      	ldr	r0, [pc, #32]	; (800b6bc <prvPortStartFirstTask+0x24>)
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	6800      	ldr	r0, [r0, #0]
 800b69e:	f380 8808 	msr	MSP, r0
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8814 	msr	CONTROL, r0
 800b6aa:	b662      	cpsie	i
 800b6ac:	b661      	cpsie	f
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	df00      	svc	0
 800b6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ba:	bf00      	nop
 800b6bc:	e000ed08 	.word	0xe000ed08

0800b6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6c6:	4b46      	ldr	r3, [pc, #280]	; (800b7e0 <xPortStartScheduler+0x120>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a46      	ldr	r2, [pc, #280]	; (800b7e4 <xPortStartScheduler+0x124>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10a      	bne.n	800b6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	613b      	str	r3, [r7, #16]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6e6:	4b3e      	ldr	r3, [pc, #248]	; (800b7e0 <xPortStartScheduler+0x120>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a3f      	ldr	r2, [pc, #252]	; (800b7e8 <xPortStartScheduler+0x128>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d10a      	bne.n	800b706 <xPortStartScheduler+0x46>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	60fb      	str	r3, [r7, #12]
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <xPortStartScheduler+0x12c>)
 800b708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	22ff      	movs	r2, #255	; 0xff
 800b716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	4b31      	ldr	r3, [pc, #196]	; (800b7f0 <xPortStartScheduler+0x130>)
 800b72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b72e:	4b31      	ldr	r3, [pc, #196]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b730:	2207      	movs	r2, #7
 800b732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b734:	e009      	b.n	800b74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b736:	4b2f      	ldr	r3, [pc, #188]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4a2d      	ldr	r2, [pc, #180]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	b2db      	uxtb	r3, r3
 800b748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b752:	2b80      	cmp	r3, #128	; 0x80
 800b754:	d0ef      	beq.n	800b736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b756:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1c3 0307 	rsb	r3, r3, #7
 800b75e:	2b04      	cmp	r3, #4
 800b760:	d00a      	beq.n	800b778 <xPortStartScheduler+0xb8>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	60bb      	str	r3, [r7, #8]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b778:	4b1e      	ldr	r3, [pc, #120]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	4a1d      	ldr	r2, [pc, #116]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b782:	4b1c      	ldr	r3, [pc, #112]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b78a:	4a1a      	ldr	r2, [pc, #104]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	b2da      	uxtb	r2, r3
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7a2:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a14      	ldr	r2, [pc, #80]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7ae:	f000 f8dd 	bl	800b96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7b2:	4b12      	ldr	r3, [pc, #72]	; (800b7fc <xPortStartScheduler+0x13c>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7b8:	f000 f8fc 	bl	800b9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7bc:	4b10      	ldr	r3, [pc, #64]	; (800b800 <xPortStartScheduler+0x140>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a0f      	ldr	r2, [pc, #60]	; (800b800 <xPortStartScheduler+0x140>)
 800b7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7c8:	f7ff ff66 	bl	800b698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7cc:	f7fe ff4c 	bl	800a668 <vTaskSwitchContext>
	prvTaskExitError();
 800b7d0:	f7ff ff20 	bl	800b614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	e000ed00 	.word	0xe000ed00
 800b7e4:	410fc271 	.word	0x410fc271
 800b7e8:	410fc270 	.word	0x410fc270
 800b7ec:	e000e400 	.word	0xe000e400
 800b7f0:	20001238 	.word	0x20001238
 800b7f4:	2000123c 	.word	0x2000123c
 800b7f8:	e000ed20 	.word	0xe000ed20
 800b7fc:	2000000c 	.word	0x2000000c
 800b800:	e000ef34 	.word	0xe000ef34

0800b804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	607b      	str	r3, [r7, #4]
}
 800b81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <vPortEnterCritical+0x58>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	4a0d      	ldr	r2, [pc, #52]	; (800b85c <vPortEnterCritical+0x58>)
 800b826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <vPortEnterCritical+0x58>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d10f      	bne.n	800b850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <vPortEnterCritical+0x5c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <vPortEnterCritical+0x4c>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	603b      	str	r3, [r7, #0]
}
 800b84c:	bf00      	nop
 800b84e:	e7fe      	b.n	800b84e <vPortEnterCritical+0x4a>
	}
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	2000000c 	.word	0x2000000c
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b86a:	4b12      	ldr	r3, [pc, #72]	; (800b8b4 <vPortExitCritical+0x50>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <vPortExitCritical+0x24>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	607b      	str	r3, [r7, #4]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <vPortExitCritical+0x50>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	4a09      	ldr	r2, [pc, #36]	; (800b8b4 <vPortExitCritical+0x50>)
 800b890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b892:	4b08      	ldr	r3, [pc, #32]	; (800b8b4 <vPortExitCritical+0x50>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d105      	bne.n	800b8a6 <vPortExitCritical+0x42>
 800b89a:	2300      	movs	r3, #0
 800b89c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	f383 8811 	msr	BASEPRI, r3
}
 800b8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	2000000c 	.word	0x2000000c
	...

0800b8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8c0:	f3ef 8009 	mrs	r0, PSP
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4b15      	ldr	r3, [pc, #84]	; (800b920 <pxCurrentTCBConst>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	f01e 0f10 	tst.w	lr, #16
 800b8d0:	bf08      	it	eq
 800b8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8e4:	f380 8811 	msr	BASEPRI, r0
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f7fe feba 	bl	800a668 <vTaskSwitchContext>
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	f380 8811 	msr	BASEPRI, r0
 800b8fc:	bc09      	pop	{r0, r3}
 800b8fe:	6819      	ldr	r1, [r3, #0]
 800b900:	6808      	ldr	r0, [r1, #0]
 800b902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b906:	f01e 0f10 	tst.w	lr, #16
 800b90a:	bf08      	it	eq
 800b90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b910:	f380 8809 	msr	PSP, r0
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst>:
 800b920:	20000c0c 	.word	0x20000c0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b942:	f7fe fdd7 	bl	800a4f4 <xTaskIncrementTick>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <xPortSysTickHandler+0x40>)
 800b94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	2300      	movs	r3, #0
 800b956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f383 8811 	msr	BASEPRI, r3
}
 800b95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b970:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b976:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <vPortSetupTimerInterrupt+0x38>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b97c:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <vPortSetupTimerInterrupt+0x3c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <vPortSetupTimerInterrupt+0x40>)
 800b982:	fba2 2303 	umull	r2, r3, r2, r3
 800b986:	099b      	lsrs	r3, r3, #6
 800b988:	4a09      	ldr	r2, [pc, #36]	; (800b9b0 <vPortSetupTimerInterrupt+0x44>)
 800b98a:	3b01      	subs	r3, #1
 800b98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b98e:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b990:	2207      	movs	r2, #7
 800b992:	601a      	str	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	e000e010 	.word	0xe000e010
 800b9a4:	e000e018 	.word	0xe000e018
 800b9a8:	20000000 	.word	0x20000000
 800b9ac:	10624dd3 	.word	0x10624dd3
 800b9b0:	e000e014 	.word	0xe000e014

0800b9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9c4 <vPortEnableVFP+0x10>
 800b9b8:	6801      	ldr	r1, [r0, #0]
 800b9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9be:	6001      	str	r1, [r0, #0]
 800b9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9c2:	bf00      	nop
 800b9c4:	e000ed88 	.word	0xe000ed88

0800b9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9ce:	f3ef 8305 	mrs	r3, IPSR
 800b9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d914      	bls.n	800ba04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9da:	4a17      	ldr	r2, [pc, #92]	; (800ba38 <vPortValidateInterruptPriority+0x70>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9e4:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <vPortValidateInterruptPriority+0x74>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	7afa      	ldrb	r2, [r7, #11]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d20a      	bcs.n	800ba04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <vPortValidateInterruptPriority+0x78>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba0c:	4b0d      	ldr	r3, [pc, #52]	; (800ba44 <vPortValidateInterruptPriority+0x7c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d90a      	bls.n	800ba2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	603b      	str	r3, [r7, #0]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <vPortValidateInterruptPriority+0x60>
	}
 800ba2a:	bf00      	nop
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	e000e3f0 	.word	0xe000e3f0
 800ba3c:	20001238 	.word	0x20001238
 800ba40:	e000ed0c 	.word	0xe000ed0c
 800ba44:	2000123c 	.word	0x2000123c

0800ba48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba54:	f7fe fc92 	bl	800a37c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba58:	4b5b      	ldr	r3, [pc, #364]	; (800bbc8 <pvPortMalloc+0x180>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba60:	f000 f920 	bl	800bca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba64:	4b59      	ldr	r3, [pc, #356]	; (800bbcc <pvPortMalloc+0x184>)
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 8093 	bne.w	800bb98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01d      	beq.n	800bab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba78:	2208      	movs	r2, #8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d014      	beq.n	800bab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	3308      	adds	r3, #8
 800ba92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <pvPortMalloc+0x6c>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	617b      	str	r3, [r7, #20]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d06e      	beq.n	800bb98 <pvPortMalloc+0x150>
 800baba:	4b45      	ldr	r3, [pc, #276]	; (800bbd0 <pvPortMalloc+0x188>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d869      	bhi.n	800bb98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bac4:	4b43      	ldr	r3, [pc, #268]	; (800bbd4 <pvPortMalloc+0x18c>)
 800bac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bac8:	4b42      	ldr	r3, [pc, #264]	; (800bbd4 <pvPortMalloc+0x18c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bace:	e004      	b.n	800bada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d903      	bls.n	800baec <pvPortMalloc+0xa4>
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1f1      	bne.n	800bad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800baec:	4b36      	ldr	r3, [pc, #216]	; (800bbc8 <pvPortMalloc+0x180>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d050      	beq.n	800bb98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2208      	movs	r2, #8
 800bafc:	4413      	add	r3, r2
 800bafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	2308      	movs	r3, #8
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d91f      	bls.n	800bb58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <pvPortMalloc+0xf8>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	613b      	str	r3, [r7, #16]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	1ad2      	subs	r2, r2, r3
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb52:	69b8      	ldr	r0, [r7, #24]
 800bb54:	f000 f908 	bl	800bd68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb58:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <pvPortMalloc+0x188>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	4a1b      	ldr	r2, [pc, #108]	; (800bbd0 <pvPortMalloc+0x188>)
 800bb64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb66:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <pvPortMalloc+0x188>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4b1b      	ldr	r3, [pc, #108]	; (800bbd8 <pvPortMalloc+0x190>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d203      	bcs.n	800bb7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb72:	4b17      	ldr	r3, [pc, #92]	; (800bbd0 <pvPortMalloc+0x188>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a18      	ldr	r2, [pc, #96]	; (800bbd8 <pvPortMalloc+0x190>)
 800bb78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	4b13      	ldr	r3, [pc, #76]	; (800bbcc <pvPortMalloc+0x184>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb8e:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <pvPortMalloc+0x194>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	4a11      	ldr	r2, [pc, #68]	; (800bbdc <pvPortMalloc+0x194>)
 800bb96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb98:	f7fe fbfe 	bl	800a398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	f003 0307 	and.w	r3, r3, #7
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <pvPortMalloc+0x174>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60fb      	str	r3, [r7, #12]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <pvPortMalloc+0x172>
	return pvReturn;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3728      	adds	r7, #40	; 0x28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	2000d598 	.word	0x2000d598
 800bbcc:	2000d5ac 	.word	0x2000d5ac
 800bbd0:	2000d59c 	.word	0x2000d59c
 800bbd4:	2000d590 	.word	0x2000d590
 800bbd8:	2000d5a0 	.word	0x2000d5a0
 800bbdc:	2000d5a4 	.word	0x2000d5a4

0800bbe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d04d      	beq.n	800bc8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbf2:	2308      	movs	r3, #8
 800bbf4:	425b      	negs	r3, r3
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	4b24      	ldr	r3, [pc, #144]	; (800bc98 <vPortFree+0xb8>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4013      	ands	r3, r2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10a      	bne.n	800bc24 <vPortFree+0x44>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	60fb      	str	r3, [r7, #12]
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00a      	beq.n	800bc42 <vPortFree+0x62>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	60bb      	str	r3, [r7, #8]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <vPortFree+0xb8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01e      	beq.n	800bc8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11a      	bne.n	800bc8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	4b0e      	ldr	r3, [pc, #56]	; (800bc98 <vPortFree+0xb8>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	43db      	mvns	r3, r3
 800bc62:	401a      	ands	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc68:	f7fe fb88 	bl	800a37c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <vPortFree+0xbc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4413      	add	r3, r2
 800bc76:	4a09      	ldr	r2, [pc, #36]	; (800bc9c <vPortFree+0xbc>)
 800bc78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc7a:	6938      	ldr	r0, [r7, #16]
 800bc7c:	f000 f874 	bl	800bd68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <vPortFree+0xc0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3301      	adds	r3, #1
 800bc86:	4a06      	ldr	r2, [pc, #24]	; (800bca0 <vPortFree+0xc0>)
 800bc88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc8a:	f7fe fb85 	bl	800a398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc8e:	bf00      	nop
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	2000d5ac 	.word	0x2000d5ac
 800bc9c:	2000d59c 	.word	0x2000d59c
 800bca0:	2000d5a8 	.word	0x2000d5a8

0800bca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bcae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcb0:	4b27      	ldr	r3, [pc, #156]	; (800bd50 <prvHeapInit+0xac>)
 800bcb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00c      	beq.n	800bcd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3307      	adds	r3, #7
 800bcc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f023 0307 	bic.w	r3, r3, #7
 800bcca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	4a1f      	ldr	r2, [pc, #124]	; (800bd50 <prvHeapInit+0xac>)
 800bcd4:	4413      	add	r3, r2
 800bcd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcdc:	4a1d      	ldr	r2, [pc, #116]	; (800bd54 <prvHeapInit+0xb0>)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bce2:	4b1c      	ldr	r3, [pc, #112]	; (800bd54 <prvHeapInit+0xb0>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	4413      	add	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcf0:	2208      	movs	r2, #8
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	1a9b      	subs	r3, r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0307 	bic.w	r3, r3, #7
 800bcfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4a15      	ldr	r2, [pc, #84]	; (800bd58 <prvHeapInit+0xb4>)
 800bd04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd06:	4b14      	ldr	r3, [pc, #80]	; (800bd58 <prvHeapInit+0xb4>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd0e:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <prvHeapInit+0xb4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd24:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <prvHeapInit+0xb4>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	4a0a      	ldr	r2, [pc, #40]	; (800bd5c <prvHeapInit+0xb8>)
 800bd32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <prvHeapInit+0xbc>)
 800bd3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <prvHeapInit+0xc0>)
 800bd3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd42:	601a      	str	r2, [r3, #0]
}
 800bd44:	bf00      	nop
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	20001240 	.word	0x20001240
 800bd54:	2000d590 	.word	0x2000d590
 800bd58:	2000d598 	.word	0x2000d598
 800bd5c:	2000d5a0 	.word	0x2000d5a0
 800bd60:	2000d59c 	.word	0x2000d59c
 800bd64:	2000d5ac 	.word	0x2000d5ac

0800bd68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd70:	4b28      	ldr	r3, [pc, #160]	; (800be14 <prvInsertBlockIntoFreeList+0xac>)
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e002      	b.n	800bd7c <prvInsertBlockIntoFreeList+0x14>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d8f7      	bhi.n	800bd76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	4413      	add	r3, r2
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d108      	bne.n	800bdaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	441a      	add	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	441a      	add	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d118      	bne.n	800bdf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <prvInsertBlockIntoFreeList+0xb0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d00d      	beq.n	800bde6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e008      	b.n	800bdf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bde6:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <prvInsertBlockIntoFreeList+0xb0>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	e003      	b.n	800bdf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d002      	beq.n	800be06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be06:	bf00      	nop
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	2000d590 	.word	0x2000d590
 800be18:	2000d598 	.word	0x2000d598

0800be1c <__cvt>:
 800be1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	ec55 4b10 	vmov	r4, r5, d0
 800be24:	2d00      	cmp	r5, #0
 800be26:	460e      	mov	r6, r1
 800be28:	4619      	mov	r1, r3
 800be2a:	462b      	mov	r3, r5
 800be2c:	bfbb      	ittet	lt
 800be2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be32:	461d      	movlt	r5, r3
 800be34:	2300      	movge	r3, #0
 800be36:	232d      	movlt	r3, #45	; 0x2d
 800be38:	700b      	strb	r3, [r1, #0]
 800be3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be40:	4691      	mov	r9, r2
 800be42:	f023 0820 	bic.w	r8, r3, #32
 800be46:	bfbc      	itt	lt
 800be48:	4622      	movlt	r2, r4
 800be4a:	4614      	movlt	r4, r2
 800be4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be50:	d005      	beq.n	800be5e <__cvt+0x42>
 800be52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be56:	d100      	bne.n	800be5a <__cvt+0x3e>
 800be58:	3601      	adds	r6, #1
 800be5a:	2102      	movs	r1, #2
 800be5c:	e000      	b.n	800be60 <__cvt+0x44>
 800be5e:	2103      	movs	r1, #3
 800be60:	ab03      	add	r3, sp, #12
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	ab02      	add	r3, sp, #8
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	ec45 4b10 	vmov	d0, r4, r5
 800be6c:	4653      	mov	r3, sl
 800be6e:	4632      	mov	r2, r6
 800be70:	f001 f916 	bl	800d0a0 <_dtoa_r>
 800be74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be78:	4607      	mov	r7, r0
 800be7a:	d102      	bne.n	800be82 <__cvt+0x66>
 800be7c:	f019 0f01 	tst.w	r9, #1
 800be80:	d022      	beq.n	800bec8 <__cvt+0xac>
 800be82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be86:	eb07 0906 	add.w	r9, r7, r6
 800be8a:	d110      	bne.n	800beae <__cvt+0x92>
 800be8c:	783b      	ldrb	r3, [r7, #0]
 800be8e:	2b30      	cmp	r3, #48	; 0x30
 800be90:	d10a      	bne.n	800bea8 <__cvt+0x8c>
 800be92:	2200      	movs	r2, #0
 800be94:	2300      	movs	r3, #0
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	f7f4 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800be9e:	b918      	cbnz	r0, 800bea8 <__cvt+0x8c>
 800bea0:	f1c6 0601 	rsb	r6, r6, #1
 800bea4:	f8ca 6000 	str.w	r6, [sl]
 800bea8:	f8da 3000 	ldr.w	r3, [sl]
 800beac:	4499      	add	r9, r3
 800beae:	2200      	movs	r2, #0
 800beb0:	2300      	movs	r3, #0
 800beb2:	4620      	mov	r0, r4
 800beb4:	4629      	mov	r1, r5
 800beb6:	f7f4 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 800beba:	b108      	cbz	r0, 800bec0 <__cvt+0xa4>
 800bebc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bec0:	2230      	movs	r2, #48	; 0x30
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	454b      	cmp	r3, r9
 800bec6:	d307      	bcc.n	800bed8 <__cvt+0xbc>
 800bec8:	9b03      	ldr	r3, [sp, #12]
 800beca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800becc:	1bdb      	subs	r3, r3, r7
 800bece:	4638      	mov	r0, r7
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	b004      	add	sp, #16
 800bed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed8:	1c59      	adds	r1, r3, #1
 800beda:	9103      	str	r1, [sp, #12]
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	e7f0      	b.n	800bec2 <__cvt+0xa6>

0800bee0 <__exponent>:
 800bee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee2:	4603      	mov	r3, r0
 800bee4:	2900      	cmp	r1, #0
 800bee6:	bfb8      	it	lt
 800bee8:	4249      	neglt	r1, r1
 800beea:	f803 2b02 	strb.w	r2, [r3], #2
 800beee:	bfb4      	ite	lt
 800bef0:	222d      	movlt	r2, #45	; 0x2d
 800bef2:	222b      	movge	r2, #43	; 0x2b
 800bef4:	2909      	cmp	r1, #9
 800bef6:	7042      	strb	r2, [r0, #1]
 800bef8:	dd2a      	ble.n	800bf50 <__exponent+0x70>
 800befa:	f10d 0207 	add.w	r2, sp, #7
 800befe:	4617      	mov	r7, r2
 800bf00:	260a      	movs	r6, #10
 800bf02:	4694      	mov	ip, r2
 800bf04:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf08:	fb06 1415 	mls	r4, r6, r5, r1
 800bf0c:	3430      	adds	r4, #48	; 0x30
 800bf0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bf12:	460c      	mov	r4, r1
 800bf14:	2c63      	cmp	r4, #99	; 0x63
 800bf16:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	dcf1      	bgt.n	800bf02 <__exponent+0x22>
 800bf1e:	3130      	adds	r1, #48	; 0x30
 800bf20:	f1ac 0402 	sub.w	r4, ip, #2
 800bf24:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bf28:	1c41      	adds	r1, r0, #1
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	42ba      	cmp	r2, r7
 800bf2e:	d30a      	bcc.n	800bf46 <__exponent+0x66>
 800bf30:	f10d 0209 	add.w	r2, sp, #9
 800bf34:	eba2 020c 	sub.w	r2, r2, ip
 800bf38:	42bc      	cmp	r4, r7
 800bf3a:	bf88      	it	hi
 800bf3c:	2200      	movhi	r2, #0
 800bf3e:	4413      	add	r3, r2
 800bf40:	1a18      	subs	r0, r3, r0
 800bf42:	b003      	add	sp, #12
 800bf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf46:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bf4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bf4e:	e7ed      	b.n	800bf2c <__exponent+0x4c>
 800bf50:	2330      	movs	r3, #48	; 0x30
 800bf52:	3130      	adds	r1, #48	; 0x30
 800bf54:	7083      	strb	r3, [r0, #2]
 800bf56:	70c1      	strb	r1, [r0, #3]
 800bf58:	1d03      	adds	r3, r0, #4
 800bf5a:	e7f1      	b.n	800bf40 <__exponent+0x60>

0800bf5c <_printf_float>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	ed2d 8b02 	vpush	{d8}
 800bf64:	b08d      	sub	sp, #52	; 0x34
 800bf66:	460c      	mov	r4, r1
 800bf68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf6c:	4616      	mov	r6, r2
 800bf6e:	461f      	mov	r7, r3
 800bf70:	4605      	mov	r5, r0
 800bf72:	f000 ff2b 	bl	800cdcc <_localeconv_r>
 800bf76:	f8d0 a000 	ldr.w	sl, [r0]
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	f7f4 f978 	bl	8000270 <strlen>
 800bf80:	2300      	movs	r3, #0
 800bf82:	930a      	str	r3, [sp, #40]	; 0x28
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	f8d8 3000 	ldr.w	r3, [r8]
 800bf8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf90:	3307      	adds	r3, #7
 800bf92:	f023 0307 	bic.w	r3, r3, #7
 800bf96:	f103 0208 	add.w	r2, r3, #8
 800bf9a:	f8c8 2000 	str.w	r2, [r8]
 800bf9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bfa6:	9307      	str	r3, [sp, #28]
 800bfa8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfac:	ee08 0a10 	vmov	s16, r0
 800bfb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bfb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfb8:	4b9e      	ldr	r3, [pc, #632]	; (800c234 <_printf_float+0x2d8>)
 800bfba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfbe:	f7f4 fdb5 	bl	8000b2c <__aeabi_dcmpun>
 800bfc2:	bb88      	cbnz	r0, 800c028 <_printf_float+0xcc>
 800bfc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfc8:	4b9a      	ldr	r3, [pc, #616]	; (800c234 <_printf_float+0x2d8>)
 800bfca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfce:	f7f4 fd8f 	bl	8000af0 <__aeabi_dcmple>
 800bfd2:	bb48      	cbnz	r0, 800c028 <_printf_float+0xcc>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fd7e 	bl	8000adc <__aeabi_dcmplt>
 800bfe0:	b110      	cbz	r0, 800bfe8 <_printf_float+0x8c>
 800bfe2:	232d      	movs	r3, #45	; 0x2d
 800bfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe8:	4a93      	ldr	r2, [pc, #588]	; (800c238 <_printf_float+0x2dc>)
 800bfea:	4b94      	ldr	r3, [pc, #592]	; (800c23c <_printf_float+0x2e0>)
 800bfec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bff0:	bf94      	ite	ls
 800bff2:	4690      	movls	r8, r2
 800bff4:	4698      	movhi	r8, r3
 800bff6:	2303      	movs	r3, #3
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	9b05      	ldr	r3, [sp, #20]
 800bffc:	f023 0304 	bic.w	r3, r3, #4
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	9700      	str	r7, [sp, #0]
 800c008:	4633      	mov	r3, r6
 800c00a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c00c:	4621      	mov	r1, r4
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 f9da 	bl	800c3c8 <_printf_common>
 800c014:	3001      	adds	r0, #1
 800c016:	f040 8090 	bne.w	800c13a <_printf_float+0x1de>
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c01e:	b00d      	add	sp, #52	; 0x34
 800c020:	ecbd 8b02 	vpop	{d8}
 800c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c028:	4642      	mov	r2, r8
 800c02a:	464b      	mov	r3, r9
 800c02c:	4640      	mov	r0, r8
 800c02e:	4649      	mov	r1, r9
 800c030:	f7f4 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 800c034:	b140      	cbz	r0, 800c048 <_printf_float+0xec>
 800c036:	464b      	mov	r3, r9
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bfbc      	itt	lt
 800c03c:	232d      	movlt	r3, #45	; 0x2d
 800c03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c042:	4a7f      	ldr	r2, [pc, #508]	; (800c240 <_printf_float+0x2e4>)
 800c044:	4b7f      	ldr	r3, [pc, #508]	; (800c244 <_printf_float+0x2e8>)
 800c046:	e7d1      	b.n	800bfec <_printf_float+0x90>
 800c048:	6863      	ldr	r3, [r4, #4]
 800c04a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c04e:	9206      	str	r2, [sp, #24]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	d13f      	bne.n	800c0d4 <_printf_float+0x178>
 800c054:	2306      	movs	r3, #6
 800c056:	6063      	str	r3, [r4, #4]
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	6861      	ldr	r1, [r4, #4]
 800c05c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c060:	2300      	movs	r3, #0
 800c062:	9303      	str	r3, [sp, #12]
 800c064:	ab0a      	add	r3, sp, #40	; 0x28
 800c066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c06a:	ab09      	add	r3, sp, #36	; 0x24
 800c06c:	ec49 8b10 	vmov	d0, r8, r9
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	6022      	str	r2, [r4, #0]
 800c074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c078:	4628      	mov	r0, r5
 800c07a:	f7ff fecf 	bl	800be1c <__cvt>
 800c07e:	9b06      	ldr	r3, [sp, #24]
 800c080:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c082:	2b47      	cmp	r3, #71	; 0x47
 800c084:	4680      	mov	r8, r0
 800c086:	d108      	bne.n	800c09a <_printf_float+0x13e>
 800c088:	1cc8      	adds	r0, r1, #3
 800c08a:	db02      	blt.n	800c092 <_printf_float+0x136>
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	4299      	cmp	r1, r3
 800c090:	dd41      	ble.n	800c116 <_printf_float+0x1ba>
 800c092:	f1ab 0302 	sub.w	r3, fp, #2
 800c096:	fa5f fb83 	uxtb.w	fp, r3
 800c09a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c09e:	d820      	bhi.n	800c0e2 <_printf_float+0x186>
 800c0a0:	3901      	subs	r1, #1
 800c0a2:	465a      	mov	r2, fp
 800c0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c0a8:	9109      	str	r1, [sp, #36]	; 0x24
 800c0aa:	f7ff ff19 	bl	800bee0 <__exponent>
 800c0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b0:	1813      	adds	r3, r2, r0
 800c0b2:	2a01      	cmp	r2, #1
 800c0b4:	4681      	mov	r9, r0
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	dc02      	bgt.n	800c0c0 <_printf_float+0x164>
 800c0ba:	6822      	ldr	r2, [r4, #0]
 800c0bc:	07d2      	lsls	r2, r2, #31
 800c0be:	d501      	bpl.n	800c0c4 <_printf_float+0x168>
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d09c      	beq.n	800c006 <_printf_float+0xaa>
 800c0cc:	232d      	movs	r3, #45	; 0x2d
 800c0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0d2:	e798      	b.n	800c006 <_printf_float+0xaa>
 800c0d4:	9a06      	ldr	r2, [sp, #24]
 800c0d6:	2a47      	cmp	r2, #71	; 0x47
 800c0d8:	d1be      	bne.n	800c058 <_printf_float+0xfc>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1bc      	bne.n	800c058 <_printf_float+0xfc>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e7b9      	b.n	800c056 <_printf_float+0xfa>
 800c0e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c0e6:	d118      	bne.n	800c11a <_printf_float+0x1be>
 800c0e8:	2900      	cmp	r1, #0
 800c0ea:	6863      	ldr	r3, [r4, #4]
 800c0ec:	dd0b      	ble.n	800c106 <_printf_float+0x1aa>
 800c0ee:	6121      	str	r1, [r4, #16]
 800c0f0:	b913      	cbnz	r3, 800c0f8 <_printf_float+0x19c>
 800c0f2:	6822      	ldr	r2, [r4, #0]
 800c0f4:	07d0      	lsls	r0, r2, #31
 800c0f6:	d502      	bpl.n	800c0fe <_printf_float+0x1a2>
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	440b      	add	r3, r1
 800c0fc:	6123      	str	r3, [r4, #16]
 800c0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800c100:	f04f 0900 	mov.w	r9, #0
 800c104:	e7de      	b.n	800c0c4 <_printf_float+0x168>
 800c106:	b913      	cbnz	r3, 800c10e <_printf_float+0x1b2>
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	07d2      	lsls	r2, r2, #31
 800c10c:	d501      	bpl.n	800c112 <_printf_float+0x1b6>
 800c10e:	3302      	adds	r3, #2
 800c110:	e7f4      	b.n	800c0fc <_printf_float+0x1a0>
 800c112:	2301      	movs	r3, #1
 800c114:	e7f2      	b.n	800c0fc <_printf_float+0x1a0>
 800c116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c11c:	4299      	cmp	r1, r3
 800c11e:	db05      	blt.n	800c12c <_printf_float+0x1d0>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	6121      	str	r1, [r4, #16]
 800c124:	07d8      	lsls	r0, r3, #31
 800c126:	d5ea      	bpl.n	800c0fe <_printf_float+0x1a2>
 800c128:	1c4b      	adds	r3, r1, #1
 800c12a:	e7e7      	b.n	800c0fc <_printf_float+0x1a0>
 800c12c:	2900      	cmp	r1, #0
 800c12e:	bfd4      	ite	le
 800c130:	f1c1 0202 	rsble	r2, r1, #2
 800c134:	2201      	movgt	r2, #1
 800c136:	4413      	add	r3, r2
 800c138:	e7e0      	b.n	800c0fc <_printf_float+0x1a0>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	055a      	lsls	r2, r3, #21
 800c13e:	d407      	bmi.n	800c150 <_printf_float+0x1f4>
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	4642      	mov	r2, r8
 800c144:	4631      	mov	r1, r6
 800c146:	4628      	mov	r0, r5
 800c148:	47b8      	blx	r7
 800c14a:	3001      	adds	r0, #1
 800c14c:	d12c      	bne.n	800c1a8 <_printf_float+0x24c>
 800c14e:	e764      	b.n	800c01a <_printf_float+0xbe>
 800c150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c154:	f240 80e0 	bls.w	800c318 <_printf_float+0x3bc>
 800c158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	f7f4 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c164:	2800      	cmp	r0, #0
 800c166:	d034      	beq.n	800c1d2 <_printf_float+0x276>
 800c168:	4a37      	ldr	r2, [pc, #220]	; (800c248 <_printf_float+0x2ec>)
 800c16a:	2301      	movs	r3, #1
 800c16c:	4631      	mov	r1, r6
 800c16e:	4628      	mov	r0, r5
 800c170:	47b8      	blx	r7
 800c172:	3001      	adds	r0, #1
 800c174:	f43f af51 	beq.w	800c01a <_printf_float+0xbe>
 800c178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c17c:	429a      	cmp	r2, r3
 800c17e:	db02      	blt.n	800c186 <_printf_float+0x22a>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	07d8      	lsls	r0, r3, #31
 800c184:	d510      	bpl.n	800c1a8 <_printf_float+0x24c>
 800c186:	ee18 3a10 	vmov	r3, s16
 800c18a:	4652      	mov	r2, sl
 800c18c:	4631      	mov	r1, r6
 800c18e:	4628      	mov	r0, r5
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	f43f af41 	beq.w	800c01a <_printf_float+0xbe>
 800c198:	f04f 0800 	mov.w	r8, #0
 800c19c:	f104 091a 	add.w	r9, r4, #26
 800c1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	4543      	cmp	r3, r8
 800c1a6:	dc09      	bgt.n	800c1bc <_printf_float+0x260>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	079b      	lsls	r3, r3, #30
 800c1ac:	f100 8107 	bmi.w	800c3be <_printf_float+0x462>
 800c1b0:	68e0      	ldr	r0, [r4, #12]
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b4:	4298      	cmp	r0, r3
 800c1b6:	bfb8      	it	lt
 800c1b8:	4618      	movlt	r0, r3
 800c1ba:	e730      	b.n	800c01e <_printf_float+0xc2>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	464a      	mov	r2, r9
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f43f af27 	beq.w	800c01a <_printf_float+0xbe>
 800c1cc:	f108 0801 	add.w	r8, r8, #1
 800c1d0:	e7e6      	b.n	800c1a0 <_printf_float+0x244>
 800c1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dc39      	bgt.n	800c24c <_printf_float+0x2f0>
 800c1d8:	4a1b      	ldr	r2, [pc, #108]	; (800c248 <_printf_float+0x2ec>)
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	f43f af19 	beq.w	800c01a <_printf_float+0xbe>
 800c1e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	d102      	bne.n	800c1f6 <_printf_float+0x29a>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	07d9      	lsls	r1, r3, #31
 800c1f4:	d5d8      	bpl.n	800c1a8 <_printf_float+0x24c>
 800c1f6:	ee18 3a10 	vmov	r3, s16
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f af09 	beq.w	800c01a <_printf_float+0xbe>
 800c208:	f04f 0900 	mov.w	r9, #0
 800c20c:	f104 0a1a 	add.w	sl, r4, #26
 800c210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c212:	425b      	negs	r3, r3
 800c214:	454b      	cmp	r3, r9
 800c216:	dc01      	bgt.n	800c21c <_printf_float+0x2c0>
 800c218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21a:	e792      	b.n	800c142 <_printf_float+0x1e6>
 800c21c:	2301      	movs	r3, #1
 800c21e:	4652      	mov	r2, sl
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	f43f aef7 	beq.w	800c01a <_printf_float+0xbe>
 800c22c:	f109 0901 	add.w	r9, r9, #1
 800c230:	e7ee      	b.n	800c210 <_printf_float+0x2b4>
 800c232:	bf00      	nop
 800c234:	7fefffff 	.word	0x7fefffff
 800c238:	0801084c 	.word	0x0801084c
 800c23c:	08010850 	.word	0x08010850
 800c240:	08010854 	.word	0x08010854
 800c244:	08010858 	.word	0x08010858
 800c248:	0801085c 	.word	0x0801085c
 800c24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c250:	429a      	cmp	r2, r3
 800c252:	bfa8      	it	ge
 800c254:	461a      	movge	r2, r3
 800c256:	2a00      	cmp	r2, #0
 800c258:	4691      	mov	r9, r2
 800c25a:	dc37      	bgt.n	800c2cc <_printf_float+0x370>
 800c25c:	f04f 0b00 	mov.w	fp, #0
 800c260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c264:	f104 021a 	add.w	r2, r4, #26
 800c268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c26a:	9305      	str	r3, [sp, #20]
 800c26c:	eba3 0309 	sub.w	r3, r3, r9
 800c270:	455b      	cmp	r3, fp
 800c272:	dc33      	bgt.n	800c2dc <_printf_float+0x380>
 800c274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c278:	429a      	cmp	r2, r3
 800c27a:	db3b      	blt.n	800c2f4 <_printf_float+0x398>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	07da      	lsls	r2, r3, #31
 800c280:	d438      	bmi.n	800c2f4 <_printf_float+0x398>
 800c282:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c286:	eba2 0903 	sub.w	r9, r2, r3
 800c28a:	9b05      	ldr	r3, [sp, #20]
 800c28c:	1ad2      	subs	r2, r2, r3
 800c28e:	4591      	cmp	r9, r2
 800c290:	bfa8      	it	ge
 800c292:	4691      	movge	r9, r2
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	dc35      	bgt.n	800c306 <_printf_float+0x3aa>
 800c29a:	f04f 0800 	mov.w	r8, #0
 800c29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2a2:	f104 0a1a 	add.w	sl, r4, #26
 800c2a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	eba3 0309 	sub.w	r3, r3, r9
 800c2b0:	4543      	cmp	r3, r8
 800c2b2:	f77f af79 	ble.w	800c1a8 <_printf_float+0x24c>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	4652      	mov	r2, sl
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b8      	blx	r7
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f aeaa 	beq.w	800c01a <_printf_float+0xbe>
 800c2c6:	f108 0801 	add.w	r8, r8, #1
 800c2ca:	e7ec      	b.n	800c2a6 <_printf_float+0x34a>
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	47b8      	blx	r7
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	d1c0      	bne.n	800c25c <_printf_float+0x300>
 800c2da:	e69e      	b.n	800c01a <_printf_float+0xbe>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	9205      	str	r2, [sp, #20]
 800c2e4:	47b8      	blx	r7
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	f43f ae97 	beq.w	800c01a <_printf_float+0xbe>
 800c2ec:	9a05      	ldr	r2, [sp, #20]
 800c2ee:	f10b 0b01 	add.w	fp, fp, #1
 800c2f2:	e7b9      	b.n	800c268 <_printf_float+0x30c>
 800c2f4:	ee18 3a10 	vmov	r3, s16
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	d1be      	bne.n	800c282 <_printf_float+0x326>
 800c304:	e689      	b.n	800c01a <_printf_float+0xbe>
 800c306:	9a05      	ldr	r2, [sp, #20]
 800c308:	464b      	mov	r3, r9
 800c30a:	4442      	add	r2, r8
 800c30c:	4631      	mov	r1, r6
 800c30e:	4628      	mov	r0, r5
 800c310:	47b8      	blx	r7
 800c312:	3001      	adds	r0, #1
 800c314:	d1c1      	bne.n	800c29a <_printf_float+0x33e>
 800c316:	e680      	b.n	800c01a <_printf_float+0xbe>
 800c318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c31a:	2a01      	cmp	r2, #1
 800c31c:	dc01      	bgt.n	800c322 <_printf_float+0x3c6>
 800c31e:	07db      	lsls	r3, r3, #31
 800c320:	d53a      	bpl.n	800c398 <_printf_float+0x43c>
 800c322:	2301      	movs	r3, #1
 800c324:	4642      	mov	r2, r8
 800c326:	4631      	mov	r1, r6
 800c328:	4628      	mov	r0, r5
 800c32a:	47b8      	blx	r7
 800c32c:	3001      	adds	r0, #1
 800c32e:	f43f ae74 	beq.w	800c01a <_printf_float+0xbe>
 800c332:	ee18 3a10 	vmov	r3, s16
 800c336:	4652      	mov	r2, sl
 800c338:	4631      	mov	r1, r6
 800c33a:	4628      	mov	r0, r5
 800c33c:	47b8      	blx	r7
 800c33e:	3001      	adds	r0, #1
 800c340:	f43f ae6b 	beq.w	800c01a <_printf_float+0xbe>
 800c344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c348:	2200      	movs	r2, #0
 800c34a:	2300      	movs	r3, #0
 800c34c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c350:	f7f4 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 800c354:	b9d8      	cbnz	r0, 800c38e <_printf_float+0x432>
 800c356:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c35a:	f108 0201 	add.w	r2, r8, #1
 800c35e:	4631      	mov	r1, r6
 800c360:	4628      	mov	r0, r5
 800c362:	47b8      	blx	r7
 800c364:	3001      	adds	r0, #1
 800c366:	d10e      	bne.n	800c386 <_printf_float+0x42a>
 800c368:	e657      	b.n	800c01a <_printf_float+0xbe>
 800c36a:	2301      	movs	r3, #1
 800c36c:	4652      	mov	r2, sl
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	f43f ae50 	beq.w	800c01a <_printf_float+0xbe>
 800c37a:	f108 0801 	add.w	r8, r8, #1
 800c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c380:	3b01      	subs	r3, #1
 800c382:	4543      	cmp	r3, r8
 800c384:	dcf1      	bgt.n	800c36a <_printf_float+0x40e>
 800c386:	464b      	mov	r3, r9
 800c388:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c38c:	e6da      	b.n	800c144 <_printf_float+0x1e8>
 800c38e:	f04f 0800 	mov.w	r8, #0
 800c392:	f104 0a1a 	add.w	sl, r4, #26
 800c396:	e7f2      	b.n	800c37e <_printf_float+0x422>
 800c398:	2301      	movs	r3, #1
 800c39a:	4642      	mov	r2, r8
 800c39c:	e7df      	b.n	800c35e <_printf_float+0x402>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	464a      	mov	r2, r9
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	47b8      	blx	r7
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	f43f ae36 	beq.w	800c01a <_printf_float+0xbe>
 800c3ae:	f108 0801 	add.w	r8, r8, #1
 800c3b2:	68e3      	ldr	r3, [r4, #12]
 800c3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3b6:	1a5b      	subs	r3, r3, r1
 800c3b8:	4543      	cmp	r3, r8
 800c3ba:	dcf0      	bgt.n	800c39e <_printf_float+0x442>
 800c3bc:	e6f8      	b.n	800c1b0 <_printf_float+0x254>
 800c3be:	f04f 0800 	mov.w	r8, #0
 800c3c2:	f104 0919 	add.w	r9, r4, #25
 800c3c6:	e7f4      	b.n	800c3b2 <_printf_float+0x456>

0800c3c8 <_printf_common>:
 800c3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	4699      	mov	r9, r3
 800c3d0:	688a      	ldr	r2, [r1, #8]
 800c3d2:	690b      	ldr	r3, [r1, #16]
 800c3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	bfb8      	it	lt
 800c3dc:	4613      	movlt	r3, r2
 800c3de:	6033      	str	r3, [r6, #0]
 800c3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	b10a      	cbz	r2, 800c3ee <_printf_common+0x26>
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	6033      	str	r3, [r6, #0]
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	0699      	lsls	r1, r3, #26
 800c3f2:	bf42      	ittt	mi
 800c3f4:	6833      	ldrmi	r3, [r6, #0]
 800c3f6:	3302      	addmi	r3, #2
 800c3f8:	6033      	strmi	r3, [r6, #0]
 800c3fa:	6825      	ldr	r5, [r4, #0]
 800c3fc:	f015 0506 	ands.w	r5, r5, #6
 800c400:	d106      	bne.n	800c410 <_printf_common+0x48>
 800c402:	f104 0a19 	add.w	sl, r4, #25
 800c406:	68e3      	ldr	r3, [r4, #12]
 800c408:	6832      	ldr	r2, [r6, #0]
 800c40a:	1a9b      	subs	r3, r3, r2
 800c40c:	42ab      	cmp	r3, r5
 800c40e:	dc26      	bgt.n	800c45e <_printf_common+0x96>
 800c410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c414:	1e13      	subs	r3, r2, #0
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	bf18      	it	ne
 800c41a:	2301      	movne	r3, #1
 800c41c:	0692      	lsls	r2, r2, #26
 800c41e:	d42b      	bmi.n	800c478 <_printf_common+0xb0>
 800c420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c424:	4649      	mov	r1, r9
 800c426:	4638      	mov	r0, r7
 800c428:	47c0      	blx	r8
 800c42a:	3001      	adds	r0, #1
 800c42c:	d01e      	beq.n	800c46c <_printf_common+0xa4>
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	6922      	ldr	r2, [r4, #16]
 800c432:	f003 0306 	and.w	r3, r3, #6
 800c436:	2b04      	cmp	r3, #4
 800c438:	bf02      	ittt	eq
 800c43a:	68e5      	ldreq	r5, [r4, #12]
 800c43c:	6833      	ldreq	r3, [r6, #0]
 800c43e:	1aed      	subeq	r5, r5, r3
 800c440:	68a3      	ldr	r3, [r4, #8]
 800c442:	bf0c      	ite	eq
 800c444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c448:	2500      	movne	r5, #0
 800c44a:	4293      	cmp	r3, r2
 800c44c:	bfc4      	itt	gt
 800c44e:	1a9b      	subgt	r3, r3, r2
 800c450:	18ed      	addgt	r5, r5, r3
 800c452:	2600      	movs	r6, #0
 800c454:	341a      	adds	r4, #26
 800c456:	42b5      	cmp	r5, r6
 800c458:	d11a      	bne.n	800c490 <_printf_common+0xc8>
 800c45a:	2000      	movs	r0, #0
 800c45c:	e008      	b.n	800c470 <_printf_common+0xa8>
 800c45e:	2301      	movs	r3, #1
 800c460:	4652      	mov	r2, sl
 800c462:	4649      	mov	r1, r9
 800c464:	4638      	mov	r0, r7
 800c466:	47c0      	blx	r8
 800c468:	3001      	adds	r0, #1
 800c46a:	d103      	bne.n	800c474 <_printf_common+0xac>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c474:	3501      	adds	r5, #1
 800c476:	e7c6      	b.n	800c406 <_printf_common+0x3e>
 800c478:	18e1      	adds	r1, r4, r3
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	2030      	movs	r0, #48	; 0x30
 800c47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c482:	4422      	add	r2, r4
 800c484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c48c:	3302      	adds	r3, #2
 800c48e:	e7c7      	b.n	800c420 <_printf_common+0x58>
 800c490:	2301      	movs	r3, #1
 800c492:	4622      	mov	r2, r4
 800c494:	4649      	mov	r1, r9
 800c496:	4638      	mov	r0, r7
 800c498:	47c0      	blx	r8
 800c49a:	3001      	adds	r0, #1
 800c49c:	d0e6      	beq.n	800c46c <_printf_common+0xa4>
 800c49e:	3601      	adds	r6, #1
 800c4a0:	e7d9      	b.n	800c456 <_printf_common+0x8e>
	...

0800c4a4 <_printf_i>:
 800c4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a8:	7e0f      	ldrb	r7, [r1, #24]
 800c4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4ac:	2f78      	cmp	r7, #120	; 0x78
 800c4ae:	4691      	mov	r9, r2
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	469a      	mov	sl, r3
 800c4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4ba:	d807      	bhi.n	800c4cc <_printf_i+0x28>
 800c4bc:	2f62      	cmp	r7, #98	; 0x62
 800c4be:	d80a      	bhi.n	800c4d6 <_printf_i+0x32>
 800c4c0:	2f00      	cmp	r7, #0
 800c4c2:	f000 80d4 	beq.w	800c66e <_printf_i+0x1ca>
 800c4c6:	2f58      	cmp	r7, #88	; 0x58
 800c4c8:	f000 80c0 	beq.w	800c64c <_printf_i+0x1a8>
 800c4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4d4:	e03a      	b.n	800c54c <_printf_i+0xa8>
 800c4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4da:	2b15      	cmp	r3, #21
 800c4dc:	d8f6      	bhi.n	800c4cc <_printf_i+0x28>
 800c4de:	a101      	add	r1, pc, #4	; (adr r1, 800c4e4 <_printf_i+0x40>)
 800c4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4e4:	0800c53d 	.word	0x0800c53d
 800c4e8:	0800c551 	.word	0x0800c551
 800c4ec:	0800c4cd 	.word	0x0800c4cd
 800c4f0:	0800c4cd 	.word	0x0800c4cd
 800c4f4:	0800c4cd 	.word	0x0800c4cd
 800c4f8:	0800c4cd 	.word	0x0800c4cd
 800c4fc:	0800c551 	.word	0x0800c551
 800c500:	0800c4cd 	.word	0x0800c4cd
 800c504:	0800c4cd 	.word	0x0800c4cd
 800c508:	0800c4cd 	.word	0x0800c4cd
 800c50c:	0800c4cd 	.word	0x0800c4cd
 800c510:	0800c655 	.word	0x0800c655
 800c514:	0800c57d 	.word	0x0800c57d
 800c518:	0800c60f 	.word	0x0800c60f
 800c51c:	0800c4cd 	.word	0x0800c4cd
 800c520:	0800c4cd 	.word	0x0800c4cd
 800c524:	0800c677 	.word	0x0800c677
 800c528:	0800c4cd 	.word	0x0800c4cd
 800c52c:	0800c57d 	.word	0x0800c57d
 800c530:	0800c4cd 	.word	0x0800c4cd
 800c534:	0800c4cd 	.word	0x0800c4cd
 800c538:	0800c617 	.word	0x0800c617
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	1d1a      	adds	r2, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	602a      	str	r2, [r5, #0]
 800c544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c54c:	2301      	movs	r3, #1
 800c54e:	e09f      	b.n	800c690 <_printf_i+0x1ec>
 800c550:	6820      	ldr	r0, [r4, #0]
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	0607      	lsls	r7, r0, #24
 800c556:	f103 0104 	add.w	r1, r3, #4
 800c55a:	6029      	str	r1, [r5, #0]
 800c55c:	d501      	bpl.n	800c562 <_printf_i+0xbe>
 800c55e:	681e      	ldr	r6, [r3, #0]
 800c560:	e003      	b.n	800c56a <_printf_i+0xc6>
 800c562:	0646      	lsls	r6, r0, #25
 800c564:	d5fb      	bpl.n	800c55e <_printf_i+0xba>
 800c566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c56a:	2e00      	cmp	r6, #0
 800c56c:	da03      	bge.n	800c576 <_printf_i+0xd2>
 800c56e:	232d      	movs	r3, #45	; 0x2d
 800c570:	4276      	negs	r6, r6
 800c572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c576:	485a      	ldr	r0, [pc, #360]	; (800c6e0 <_printf_i+0x23c>)
 800c578:	230a      	movs	r3, #10
 800c57a:	e012      	b.n	800c5a2 <_printf_i+0xfe>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	6820      	ldr	r0, [r4, #0]
 800c580:	1d19      	adds	r1, r3, #4
 800c582:	6029      	str	r1, [r5, #0]
 800c584:	0605      	lsls	r5, r0, #24
 800c586:	d501      	bpl.n	800c58c <_printf_i+0xe8>
 800c588:	681e      	ldr	r6, [r3, #0]
 800c58a:	e002      	b.n	800c592 <_printf_i+0xee>
 800c58c:	0641      	lsls	r1, r0, #25
 800c58e:	d5fb      	bpl.n	800c588 <_printf_i+0xe4>
 800c590:	881e      	ldrh	r6, [r3, #0]
 800c592:	4853      	ldr	r0, [pc, #332]	; (800c6e0 <_printf_i+0x23c>)
 800c594:	2f6f      	cmp	r7, #111	; 0x6f
 800c596:	bf0c      	ite	eq
 800c598:	2308      	moveq	r3, #8
 800c59a:	230a      	movne	r3, #10
 800c59c:	2100      	movs	r1, #0
 800c59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5a2:	6865      	ldr	r5, [r4, #4]
 800c5a4:	60a5      	str	r5, [r4, #8]
 800c5a6:	2d00      	cmp	r5, #0
 800c5a8:	bfa2      	ittt	ge
 800c5aa:	6821      	ldrge	r1, [r4, #0]
 800c5ac:	f021 0104 	bicge.w	r1, r1, #4
 800c5b0:	6021      	strge	r1, [r4, #0]
 800c5b2:	b90e      	cbnz	r6, 800c5b8 <_printf_i+0x114>
 800c5b4:	2d00      	cmp	r5, #0
 800c5b6:	d04b      	beq.n	800c650 <_printf_i+0x1ac>
 800c5b8:	4615      	mov	r5, r2
 800c5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5be:	fb03 6711 	mls	r7, r3, r1, r6
 800c5c2:	5dc7      	ldrb	r7, [r0, r7]
 800c5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5c8:	4637      	mov	r7, r6
 800c5ca:	42bb      	cmp	r3, r7
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	d9f4      	bls.n	800c5ba <_printf_i+0x116>
 800c5d0:	2b08      	cmp	r3, #8
 800c5d2:	d10b      	bne.n	800c5ec <_printf_i+0x148>
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	07de      	lsls	r6, r3, #31
 800c5d8:	d508      	bpl.n	800c5ec <_printf_i+0x148>
 800c5da:	6923      	ldr	r3, [r4, #16]
 800c5dc:	6861      	ldr	r1, [r4, #4]
 800c5de:	4299      	cmp	r1, r3
 800c5e0:	bfde      	ittt	le
 800c5e2:	2330      	movle	r3, #48	; 0x30
 800c5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c5ec:	1b52      	subs	r2, r2, r5
 800c5ee:	6122      	str	r2, [r4, #16]
 800c5f0:	f8cd a000 	str.w	sl, [sp]
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	aa03      	add	r2, sp, #12
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	f7ff fee4 	bl	800c3c8 <_printf_common>
 800c600:	3001      	adds	r0, #1
 800c602:	d14a      	bne.n	800c69a <_printf_i+0x1f6>
 800c604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c608:	b004      	add	sp, #16
 800c60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	f043 0320 	orr.w	r3, r3, #32
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	4833      	ldr	r0, [pc, #204]	; (800c6e4 <_printf_i+0x240>)
 800c618:	2778      	movs	r7, #120	; 0x78
 800c61a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	6829      	ldr	r1, [r5, #0]
 800c622:	061f      	lsls	r7, r3, #24
 800c624:	f851 6b04 	ldr.w	r6, [r1], #4
 800c628:	d402      	bmi.n	800c630 <_printf_i+0x18c>
 800c62a:	065f      	lsls	r7, r3, #25
 800c62c:	bf48      	it	mi
 800c62e:	b2b6      	uxthmi	r6, r6
 800c630:	07df      	lsls	r7, r3, #31
 800c632:	bf48      	it	mi
 800c634:	f043 0320 	orrmi.w	r3, r3, #32
 800c638:	6029      	str	r1, [r5, #0]
 800c63a:	bf48      	it	mi
 800c63c:	6023      	strmi	r3, [r4, #0]
 800c63e:	b91e      	cbnz	r6, 800c648 <_printf_i+0x1a4>
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	f023 0320 	bic.w	r3, r3, #32
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	2310      	movs	r3, #16
 800c64a:	e7a7      	b.n	800c59c <_printf_i+0xf8>
 800c64c:	4824      	ldr	r0, [pc, #144]	; (800c6e0 <_printf_i+0x23c>)
 800c64e:	e7e4      	b.n	800c61a <_printf_i+0x176>
 800c650:	4615      	mov	r5, r2
 800c652:	e7bd      	b.n	800c5d0 <_printf_i+0x12c>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	6826      	ldr	r6, [r4, #0]
 800c658:	6961      	ldr	r1, [r4, #20]
 800c65a:	1d18      	adds	r0, r3, #4
 800c65c:	6028      	str	r0, [r5, #0]
 800c65e:	0635      	lsls	r5, r6, #24
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	d501      	bpl.n	800c668 <_printf_i+0x1c4>
 800c664:	6019      	str	r1, [r3, #0]
 800c666:	e002      	b.n	800c66e <_printf_i+0x1ca>
 800c668:	0670      	lsls	r0, r6, #25
 800c66a:	d5fb      	bpl.n	800c664 <_printf_i+0x1c0>
 800c66c:	8019      	strh	r1, [r3, #0]
 800c66e:	2300      	movs	r3, #0
 800c670:	6123      	str	r3, [r4, #16]
 800c672:	4615      	mov	r5, r2
 800c674:	e7bc      	b.n	800c5f0 <_printf_i+0x14c>
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	1d1a      	adds	r2, r3, #4
 800c67a:	602a      	str	r2, [r5, #0]
 800c67c:	681d      	ldr	r5, [r3, #0]
 800c67e:	6862      	ldr	r2, [r4, #4]
 800c680:	2100      	movs	r1, #0
 800c682:	4628      	mov	r0, r5
 800c684:	f7f3 fda4 	bl	80001d0 <memchr>
 800c688:	b108      	cbz	r0, 800c68e <_printf_i+0x1ea>
 800c68a:	1b40      	subs	r0, r0, r5
 800c68c:	6060      	str	r0, [r4, #4]
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	6123      	str	r3, [r4, #16]
 800c692:	2300      	movs	r3, #0
 800c694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c698:	e7aa      	b.n	800c5f0 <_printf_i+0x14c>
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	462a      	mov	r2, r5
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	47d0      	blx	sl
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d0ad      	beq.n	800c604 <_printf_i+0x160>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	079b      	lsls	r3, r3, #30
 800c6ac:	d413      	bmi.n	800c6d6 <_printf_i+0x232>
 800c6ae:	68e0      	ldr	r0, [r4, #12]
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	4298      	cmp	r0, r3
 800c6b4:	bfb8      	it	lt
 800c6b6:	4618      	movlt	r0, r3
 800c6b8:	e7a6      	b.n	800c608 <_printf_i+0x164>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4632      	mov	r2, r6
 800c6be:	4649      	mov	r1, r9
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	47d0      	blx	sl
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d09d      	beq.n	800c604 <_printf_i+0x160>
 800c6c8:	3501      	adds	r5, #1
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	9903      	ldr	r1, [sp, #12]
 800c6ce:	1a5b      	subs	r3, r3, r1
 800c6d0:	42ab      	cmp	r3, r5
 800c6d2:	dcf2      	bgt.n	800c6ba <_printf_i+0x216>
 800c6d4:	e7eb      	b.n	800c6ae <_printf_i+0x20a>
 800c6d6:	2500      	movs	r5, #0
 800c6d8:	f104 0619 	add.w	r6, r4, #25
 800c6dc:	e7f5      	b.n	800c6ca <_printf_i+0x226>
 800c6de:	bf00      	nop
 800c6e0:	0801085e 	.word	0x0801085e
 800c6e4:	0801086f 	.word	0x0801086f

0800c6e8 <_scanf_float>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	b087      	sub	sp, #28
 800c6ee:	4617      	mov	r7, r2
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	688b      	ldr	r3, [r1, #8]
 800c6f4:	1e5a      	subs	r2, r3, #1
 800c6f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6fa:	bf83      	ittte	hi
 800c6fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c700:	195b      	addhi	r3, r3, r5
 800c702:	9302      	strhi	r3, [sp, #8]
 800c704:	2300      	movls	r3, #0
 800c706:	bf86      	itte	hi
 800c708:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c70c:	608b      	strhi	r3, [r1, #8]
 800c70e:	9302      	strls	r3, [sp, #8]
 800c710:	680b      	ldr	r3, [r1, #0]
 800c712:	468b      	mov	fp, r1
 800c714:	2500      	movs	r5, #0
 800c716:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c71a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c71e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c722:	4680      	mov	r8, r0
 800c724:	460c      	mov	r4, r1
 800c726:	465e      	mov	r6, fp
 800c728:	46aa      	mov	sl, r5
 800c72a:	46a9      	mov	r9, r5
 800c72c:	9501      	str	r5, [sp, #4]
 800c72e:	68a2      	ldr	r2, [r4, #8]
 800c730:	b152      	cbz	r2, 800c748 <_scanf_float+0x60>
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b4e      	cmp	r3, #78	; 0x4e
 800c738:	d864      	bhi.n	800c804 <_scanf_float+0x11c>
 800c73a:	2b40      	cmp	r3, #64	; 0x40
 800c73c:	d83c      	bhi.n	800c7b8 <_scanf_float+0xd0>
 800c73e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c742:	b2c8      	uxtb	r0, r1
 800c744:	280e      	cmp	r0, #14
 800c746:	d93a      	bls.n	800c7be <_scanf_float+0xd6>
 800c748:	f1b9 0f00 	cmp.w	r9, #0
 800c74c:	d003      	beq.n	800c756 <_scanf_float+0x6e>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c75a:	f1ba 0f01 	cmp.w	sl, #1
 800c75e:	f200 8113 	bhi.w	800c988 <_scanf_float+0x2a0>
 800c762:	455e      	cmp	r6, fp
 800c764:	f200 8105 	bhi.w	800c972 <_scanf_float+0x28a>
 800c768:	2501      	movs	r5, #1
 800c76a:	4628      	mov	r0, r5
 800c76c:	b007      	add	sp, #28
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c776:	2a0d      	cmp	r2, #13
 800c778:	d8e6      	bhi.n	800c748 <_scanf_float+0x60>
 800c77a:	a101      	add	r1, pc, #4	; (adr r1, 800c780 <_scanf_float+0x98>)
 800c77c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c780:	0800c8bf 	.word	0x0800c8bf
 800c784:	0800c749 	.word	0x0800c749
 800c788:	0800c749 	.word	0x0800c749
 800c78c:	0800c749 	.word	0x0800c749
 800c790:	0800c91f 	.word	0x0800c91f
 800c794:	0800c8f7 	.word	0x0800c8f7
 800c798:	0800c749 	.word	0x0800c749
 800c79c:	0800c749 	.word	0x0800c749
 800c7a0:	0800c8cd 	.word	0x0800c8cd
 800c7a4:	0800c749 	.word	0x0800c749
 800c7a8:	0800c749 	.word	0x0800c749
 800c7ac:	0800c749 	.word	0x0800c749
 800c7b0:	0800c749 	.word	0x0800c749
 800c7b4:	0800c885 	.word	0x0800c885
 800c7b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c7bc:	e7db      	b.n	800c776 <_scanf_float+0x8e>
 800c7be:	290e      	cmp	r1, #14
 800c7c0:	d8c2      	bhi.n	800c748 <_scanf_float+0x60>
 800c7c2:	a001      	add	r0, pc, #4	; (adr r0, 800c7c8 <_scanf_float+0xe0>)
 800c7c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c7c8:	0800c877 	.word	0x0800c877
 800c7cc:	0800c749 	.word	0x0800c749
 800c7d0:	0800c877 	.word	0x0800c877
 800c7d4:	0800c90b 	.word	0x0800c90b
 800c7d8:	0800c749 	.word	0x0800c749
 800c7dc:	0800c825 	.word	0x0800c825
 800c7e0:	0800c861 	.word	0x0800c861
 800c7e4:	0800c861 	.word	0x0800c861
 800c7e8:	0800c861 	.word	0x0800c861
 800c7ec:	0800c861 	.word	0x0800c861
 800c7f0:	0800c861 	.word	0x0800c861
 800c7f4:	0800c861 	.word	0x0800c861
 800c7f8:	0800c861 	.word	0x0800c861
 800c7fc:	0800c861 	.word	0x0800c861
 800c800:	0800c861 	.word	0x0800c861
 800c804:	2b6e      	cmp	r3, #110	; 0x6e
 800c806:	d809      	bhi.n	800c81c <_scanf_float+0x134>
 800c808:	2b60      	cmp	r3, #96	; 0x60
 800c80a:	d8b2      	bhi.n	800c772 <_scanf_float+0x8a>
 800c80c:	2b54      	cmp	r3, #84	; 0x54
 800c80e:	d077      	beq.n	800c900 <_scanf_float+0x218>
 800c810:	2b59      	cmp	r3, #89	; 0x59
 800c812:	d199      	bne.n	800c748 <_scanf_float+0x60>
 800c814:	2d07      	cmp	r5, #7
 800c816:	d197      	bne.n	800c748 <_scanf_float+0x60>
 800c818:	2508      	movs	r5, #8
 800c81a:	e029      	b.n	800c870 <_scanf_float+0x188>
 800c81c:	2b74      	cmp	r3, #116	; 0x74
 800c81e:	d06f      	beq.n	800c900 <_scanf_float+0x218>
 800c820:	2b79      	cmp	r3, #121	; 0x79
 800c822:	e7f6      	b.n	800c812 <_scanf_float+0x12a>
 800c824:	6821      	ldr	r1, [r4, #0]
 800c826:	05c8      	lsls	r0, r1, #23
 800c828:	d51a      	bpl.n	800c860 <_scanf_float+0x178>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c830:	6021      	str	r1, [r4, #0]
 800c832:	f109 0901 	add.w	r9, r9, #1
 800c836:	b11b      	cbz	r3, 800c840 <_scanf_float+0x158>
 800c838:	3b01      	subs	r3, #1
 800c83a:	3201      	adds	r2, #1
 800c83c:	9302      	str	r3, [sp, #8]
 800c83e:	60a2      	str	r2, [r4, #8]
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	3b01      	subs	r3, #1
 800c844:	60a3      	str	r3, [r4, #8]
 800c846:	6923      	ldr	r3, [r4, #16]
 800c848:	3301      	adds	r3, #1
 800c84a:	6123      	str	r3, [r4, #16]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	3b01      	subs	r3, #1
 800c850:	2b00      	cmp	r3, #0
 800c852:	607b      	str	r3, [r7, #4]
 800c854:	f340 8084 	ble.w	800c960 <_scanf_float+0x278>
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	3301      	adds	r3, #1
 800c85c:	603b      	str	r3, [r7, #0]
 800c85e:	e766      	b.n	800c72e <_scanf_float+0x46>
 800c860:	eb1a 0f05 	cmn.w	sl, r5
 800c864:	f47f af70 	bne.w	800c748 <_scanf_float+0x60>
 800c868:	6822      	ldr	r2, [r4, #0]
 800c86a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c86e:	6022      	str	r2, [r4, #0]
 800c870:	f806 3b01 	strb.w	r3, [r6], #1
 800c874:	e7e4      	b.n	800c840 <_scanf_float+0x158>
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	0610      	lsls	r0, r2, #24
 800c87a:	f57f af65 	bpl.w	800c748 <_scanf_float+0x60>
 800c87e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c882:	e7f4      	b.n	800c86e <_scanf_float+0x186>
 800c884:	f1ba 0f00 	cmp.w	sl, #0
 800c888:	d10e      	bne.n	800c8a8 <_scanf_float+0x1c0>
 800c88a:	f1b9 0f00 	cmp.w	r9, #0
 800c88e:	d10e      	bne.n	800c8ae <_scanf_float+0x1c6>
 800c890:	6822      	ldr	r2, [r4, #0]
 800c892:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c896:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c89a:	d108      	bne.n	800c8ae <_scanf_float+0x1c6>
 800c89c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8a0:	6022      	str	r2, [r4, #0]
 800c8a2:	f04f 0a01 	mov.w	sl, #1
 800c8a6:	e7e3      	b.n	800c870 <_scanf_float+0x188>
 800c8a8:	f1ba 0f02 	cmp.w	sl, #2
 800c8ac:	d055      	beq.n	800c95a <_scanf_float+0x272>
 800c8ae:	2d01      	cmp	r5, #1
 800c8b0:	d002      	beq.n	800c8b8 <_scanf_float+0x1d0>
 800c8b2:	2d04      	cmp	r5, #4
 800c8b4:	f47f af48 	bne.w	800c748 <_scanf_float+0x60>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	b2ed      	uxtb	r5, r5
 800c8bc:	e7d8      	b.n	800c870 <_scanf_float+0x188>
 800c8be:	f1ba 0f01 	cmp.w	sl, #1
 800c8c2:	f47f af41 	bne.w	800c748 <_scanf_float+0x60>
 800c8c6:	f04f 0a02 	mov.w	sl, #2
 800c8ca:	e7d1      	b.n	800c870 <_scanf_float+0x188>
 800c8cc:	b97d      	cbnz	r5, 800c8ee <_scanf_float+0x206>
 800c8ce:	f1b9 0f00 	cmp.w	r9, #0
 800c8d2:	f47f af3c 	bne.w	800c74e <_scanf_float+0x66>
 800c8d6:	6822      	ldr	r2, [r4, #0]
 800c8d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c8dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c8e0:	f47f af39 	bne.w	800c756 <_scanf_float+0x6e>
 800c8e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8e8:	6022      	str	r2, [r4, #0]
 800c8ea:	2501      	movs	r5, #1
 800c8ec:	e7c0      	b.n	800c870 <_scanf_float+0x188>
 800c8ee:	2d03      	cmp	r5, #3
 800c8f0:	d0e2      	beq.n	800c8b8 <_scanf_float+0x1d0>
 800c8f2:	2d05      	cmp	r5, #5
 800c8f4:	e7de      	b.n	800c8b4 <_scanf_float+0x1cc>
 800c8f6:	2d02      	cmp	r5, #2
 800c8f8:	f47f af26 	bne.w	800c748 <_scanf_float+0x60>
 800c8fc:	2503      	movs	r5, #3
 800c8fe:	e7b7      	b.n	800c870 <_scanf_float+0x188>
 800c900:	2d06      	cmp	r5, #6
 800c902:	f47f af21 	bne.w	800c748 <_scanf_float+0x60>
 800c906:	2507      	movs	r5, #7
 800c908:	e7b2      	b.n	800c870 <_scanf_float+0x188>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	0591      	lsls	r1, r2, #22
 800c90e:	f57f af1b 	bpl.w	800c748 <_scanf_float+0x60>
 800c912:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c916:	6022      	str	r2, [r4, #0]
 800c918:	f8cd 9004 	str.w	r9, [sp, #4]
 800c91c:	e7a8      	b.n	800c870 <_scanf_float+0x188>
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c924:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c928:	d006      	beq.n	800c938 <_scanf_float+0x250>
 800c92a:	0550      	lsls	r0, r2, #21
 800c92c:	f57f af0c 	bpl.w	800c748 <_scanf_float+0x60>
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	f43f af0f 	beq.w	800c756 <_scanf_float+0x6e>
 800c938:	0591      	lsls	r1, r2, #22
 800c93a:	bf58      	it	pl
 800c93c:	9901      	ldrpl	r1, [sp, #4]
 800c93e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c942:	bf58      	it	pl
 800c944:	eba9 0101 	subpl.w	r1, r9, r1
 800c948:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c94c:	bf58      	it	pl
 800c94e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	f04f 0900 	mov.w	r9, #0
 800c958:	e78a      	b.n	800c870 <_scanf_float+0x188>
 800c95a:	f04f 0a03 	mov.w	sl, #3
 800c95e:	e787      	b.n	800c870 <_scanf_float+0x188>
 800c960:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c964:	4639      	mov	r1, r7
 800c966:	4640      	mov	r0, r8
 800c968:	4798      	blx	r3
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f43f aedf 	beq.w	800c72e <_scanf_float+0x46>
 800c970:	e6ea      	b.n	800c748 <_scanf_float+0x60>
 800c972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c97a:	463a      	mov	r2, r7
 800c97c:	4640      	mov	r0, r8
 800c97e:	4798      	blx	r3
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	3b01      	subs	r3, #1
 800c984:	6123      	str	r3, [r4, #16]
 800c986:	e6ec      	b.n	800c762 <_scanf_float+0x7a>
 800c988:	1e6b      	subs	r3, r5, #1
 800c98a:	2b06      	cmp	r3, #6
 800c98c:	d825      	bhi.n	800c9da <_scanf_float+0x2f2>
 800c98e:	2d02      	cmp	r5, #2
 800c990:	d836      	bhi.n	800ca00 <_scanf_float+0x318>
 800c992:	455e      	cmp	r6, fp
 800c994:	f67f aee8 	bls.w	800c768 <_scanf_float+0x80>
 800c998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c99c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9a0:	463a      	mov	r2, r7
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	4798      	blx	r3
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	e7f1      	b.n	800c992 <_scanf_float+0x2aa>
 800c9ae:	9802      	ldr	r0, [sp, #8]
 800c9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c9b8:	9002      	str	r0, [sp, #8]
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4798      	blx	r3
 800c9c0:	6923      	ldr	r3, [r4, #16]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	6123      	str	r3, [r4, #16]
 800c9c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c9ca:	fa5f fa8a 	uxtb.w	sl, sl
 800c9ce:	f1ba 0f02 	cmp.w	sl, #2
 800c9d2:	d1ec      	bne.n	800c9ae <_scanf_float+0x2c6>
 800c9d4:	3d03      	subs	r5, #3
 800c9d6:	b2ed      	uxtb	r5, r5
 800c9d8:	1b76      	subs	r6, r6, r5
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	05da      	lsls	r2, r3, #23
 800c9de:	d52f      	bpl.n	800ca40 <_scanf_float+0x358>
 800c9e0:	055b      	lsls	r3, r3, #21
 800c9e2:	d510      	bpl.n	800ca06 <_scanf_float+0x31e>
 800c9e4:	455e      	cmp	r6, fp
 800c9e6:	f67f aebf 	bls.w	800c768 <_scanf_float+0x80>
 800c9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9f2:	463a      	mov	r2, r7
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4798      	blx	r3
 800c9f8:	6923      	ldr	r3, [r4, #16]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	e7f1      	b.n	800c9e4 <_scanf_float+0x2fc>
 800ca00:	46aa      	mov	sl, r5
 800ca02:	9602      	str	r6, [sp, #8]
 800ca04:	e7df      	b.n	800c9c6 <_scanf_float+0x2de>
 800ca06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca0a:	6923      	ldr	r3, [r4, #16]
 800ca0c:	2965      	cmp	r1, #101	; 0x65
 800ca0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ca12:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	d00c      	beq.n	800ca34 <_scanf_float+0x34c>
 800ca1a:	2945      	cmp	r1, #69	; 0x45
 800ca1c:	d00a      	beq.n	800ca34 <_scanf_float+0x34c>
 800ca1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca22:	463a      	mov	r2, r7
 800ca24:	4640      	mov	r0, r8
 800ca26:	4798      	blx	r3
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	1eb5      	subs	r5, r6, #2
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca38:	463a      	mov	r2, r7
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	4798      	blx	r3
 800ca3e:	462e      	mov	r6, r5
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	f015 0510 	ands.w	r5, r5, #16
 800ca46:	d158      	bne.n	800cafa <_scanf_float+0x412>
 800ca48:	7035      	strb	r5, [r6, #0]
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca54:	d11c      	bne.n	800ca90 <_scanf_float+0x3a8>
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	454b      	cmp	r3, r9
 800ca5a:	eba3 0209 	sub.w	r2, r3, r9
 800ca5e:	d124      	bne.n	800caaa <_scanf_float+0x3c2>
 800ca60:	2200      	movs	r2, #0
 800ca62:	4659      	mov	r1, fp
 800ca64:	4640      	mov	r0, r8
 800ca66:	f002 fcc7 	bl	800f3f8 <_strtod_r>
 800ca6a:	9b03      	ldr	r3, [sp, #12]
 800ca6c:	6821      	ldr	r1, [r4, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f011 0f02 	tst.w	r1, #2
 800ca74:	ec57 6b10 	vmov	r6, r7, d0
 800ca78:	f103 0204 	add.w	r2, r3, #4
 800ca7c:	d020      	beq.n	800cac0 <_scanf_float+0x3d8>
 800ca7e:	9903      	ldr	r1, [sp, #12]
 800ca80:	600a      	str	r2, [r1, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	e9c3 6700 	strd	r6, r7, [r3]
 800ca88:	68e3      	ldr	r3, [r4, #12]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	60e3      	str	r3, [r4, #12]
 800ca8e:	e66c      	b.n	800c76a <_scanf_float+0x82>
 800ca90:	9b04      	ldr	r3, [sp, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0e4      	beq.n	800ca60 <_scanf_float+0x378>
 800ca96:	9905      	ldr	r1, [sp, #20]
 800ca98:	230a      	movs	r3, #10
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	3101      	adds	r1, #1
 800ca9e:	4640      	mov	r0, r8
 800caa0:	f002 fd32 	bl	800f508 <_strtol_r>
 800caa4:	9b04      	ldr	r3, [sp, #16]
 800caa6:	9e05      	ldr	r6, [sp, #20]
 800caa8:	1ac2      	subs	r2, r0, r3
 800caaa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800caae:	429e      	cmp	r6, r3
 800cab0:	bf28      	it	cs
 800cab2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cab6:	4912      	ldr	r1, [pc, #72]	; (800cb00 <_scanf_float+0x418>)
 800cab8:	4630      	mov	r0, r6
 800caba:	f000 f91b 	bl	800ccf4 <siprintf>
 800cabe:	e7cf      	b.n	800ca60 <_scanf_float+0x378>
 800cac0:	f011 0f04 	tst.w	r1, #4
 800cac4:	9903      	ldr	r1, [sp, #12]
 800cac6:	600a      	str	r2, [r1, #0]
 800cac8:	d1db      	bne.n	800ca82 <_scanf_float+0x39a>
 800caca:	f8d3 8000 	ldr.w	r8, [r3]
 800cace:	ee10 2a10 	vmov	r2, s0
 800cad2:	ee10 0a10 	vmov	r0, s0
 800cad6:	463b      	mov	r3, r7
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f4 f827 	bl	8000b2c <__aeabi_dcmpun>
 800cade:	b128      	cbz	r0, 800caec <_scanf_float+0x404>
 800cae0:	4808      	ldr	r0, [pc, #32]	; (800cb04 <_scanf_float+0x41c>)
 800cae2:	f000 fa4f 	bl	800cf84 <nanf>
 800cae6:	ed88 0a00 	vstr	s0, [r8]
 800caea:	e7cd      	b.n	800ca88 <_scanf_float+0x3a0>
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f4 f87a 	bl	8000be8 <__aeabi_d2f>
 800caf4:	f8c8 0000 	str.w	r0, [r8]
 800caf8:	e7c6      	b.n	800ca88 <_scanf_float+0x3a0>
 800cafa:	2500      	movs	r5, #0
 800cafc:	e635      	b.n	800c76a <_scanf_float+0x82>
 800cafe:	bf00      	nop
 800cb00:	08010880 	.word	0x08010880
 800cb04:	08010c15 	.word	0x08010c15

0800cb08 <std>:
 800cb08:	2300      	movs	r3, #0
 800cb0a:	b510      	push	{r4, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb16:	6083      	str	r3, [r0, #8]
 800cb18:	8181      	strh	r1, [r0, #12]
 800cb1a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb1c:	81c2      	strh	r2, [r0, #14]
 800cb1e:	6183      	str	r3, [r0, #24]
 800cb20:	4619      	mov	r1, r3
 800cb22:	2208      	movs	r2, #8
 800cb24:	305c      	adds	r0, #92	; 0x5c
 800cb26:	f000 f948 	bl	800cdba <memset>
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	; (800cb60 <std+0x58>)
 800cb2c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <std+0x5c>)
 800cb30:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb32:	4b0d      	ldr	r3, [pc, #52]	; (800cb68 <std+0x60>)
 800cb34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb36:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <std+0x64>)
 800cb38:	6323      	str	r3, [r4, #48]	; 0x30
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <std+0x68>)
 800cb3c:	6224      	str	r4, [r4, #32]
 800cb3e:	429c      	cmp	r4, r3
 800cb40:	d006      	beq.n	800cb50 <std+0x48>
 800cb42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cb46:	4294      	cmp	r4, r2
 800cb48:	d002      	beq.n	800cb50 <std+0x48>
 800cb4a:	33d0      	adds	r3, #208	; 0xd0
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	d105      	bne.n	800cb5c <std+0x54>
 800cb50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb58:	f000 ba02 	b.w	800cf60 <__retarget_lock_init_recursive>
 800cb5c:	bd10      	pop	{r4, pc}
 800cb5e:	bf00      	nop
 800cb60:	0800cd35 	.word	0x0800cd35
 800cb64:	0800cd57 	.word	0x0800cd57
 800cb68:	0800cd8f 	.word	0x0800cd8f
 800cb6c:	0800cdb3 	.word	0x0800cdb3
 800cb70:	2000d5b0 	.word	0x2000d5b0

0800cb74 <stdio_exit_handler>:
 800cb74:	4a02      	ldr	r2, [pc, #8]	; (800cb80 <stdio_exit_handler+0xc>)
 800cb76:	4903      	ldr	r1, [pc, #12]	; (800cb84 <stdio_exit_handler+0x10>)
 800cb78:	4803      	ldr	r0, [pc, #12]	; (800cb88 <stdio_exit_handler+0x14>)
 800cb7a:	f000 b869 	b.w	800cc50 <_fwalk_sglue>
 800cb7e:	bf00      	nop
 800cb80:	20000010 	.word	0x20000010
 800cb84:	0800f8c9 	.word	0x0800f8c9
 800cb88:	2000001c 	.word	0x2000001c

0800cb8c <cleanup_stdio>:
 800cb8c:	6841      	ldr	r1, [r0, #4]
 800cb8e:	4b0c      	ldr	r3, [pc, #48]	; (800cbc0 <cleanup_stdio+0x34>)
 800cb90:	4299      	cmp	r1, r3
 800cb92:	b510      	push	{r4, lr}
 800cb94:	4604      	mov	r4, r0
 800cb96:	d001      	beq.n	800cb9c <cleanup_stdio+0x10>
 800cb98:	f002 fe96 	bl	800f8c8 <_fflush_r>
 800cb9c:	68a1      	ldr	r1, [r4, #8]
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <cleanup_stdio+0x38>)
 800cba0:	4299      	cmp	r1, r3
 800cba2:	d002      	beq.n	800cbaa <cleanup_stdio+0x1e>
 800cba4:	4620      	mov	r0, r4
 800cba6:	f002 fe8f 	bl	800f8c8 <_fflush_r>
 800cbaa:	68e1      	ldr	r1, [r4, #12]
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <cleanup_stdio+0x3c>)
 800cbae:	4299      	cmp	r1, r3
 800cbb0:	d004      	beq.n	800cbbc <cleanup_stdio+0x30>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbb8:	f002 be86 	b.w	800f8c8 <_fflush_r>
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	bf00      	nop
 800cbc0:	2000d5b0 	.word	0x2000d5b0
 800cbc4:	2000d618 	.word	0x2000d618
 800cbc8:	2000d680 	.word	0x2000d680

0800cbcc <global_stdio_init.part.0>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <global_stdio_init.part.0+0x30>)
 800cbd0:	4c0b      	ldr	r4, [pc, #44]	; (800cc00 <global_stdio_init.part.0+0x34>)
 800cbd2:	4a0c      	ldr	r2, [pc, #48]	; (800cc04 <global_stdio_init.part.0+0x38>)
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2104      	movs	r1, #4
 800cbdc:	f7ff ff94 	bl	800cb08 <std>
 800cbe0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	2109      	movs	r1, #9
 800cbe8:	f7ff ff8e 	bl	800cb08 <std>
 800cbec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf6:	2112      	movs	r1, #18
 800cbf8:	f7ff bf86 	b.w	800cb08 <std>
 800cbfc:	2000d6e8 	.word	0x2000d6e8
 800cc00:	2000d5b0 	.word	0x2000d5b0
 800cc04:	0800cb75 	.word	0x0800cb75

0800cc08 <__sfp_lock_acquire>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__sfp_lock_acquire+0x8>)
 800cc0a:	f000 b9aa 	b.w	800cf62 <__retarget_lock_acquire_recursive>
 800cc0e:	bf00      	nop
 800cc10:	2000d6f1 	.word	0x2000d6f1

0800cc14 <__sfp_lock_release>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__sfp_lock_release+0x8>)
 800cc16:	f000 b9a5 	b.w	800cf64 <__retarget_lock_release_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	2000d6f1 	.word	0x2000d6f1

0800cc20 <__sinit>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	f7ff fff0 	bl	800cc08 <__sfp_lock_acquire>
 800cc28:	6a23      	ldr	r3, [r4, #32]
 800cc2a:	b11b      	cbz	r3, 800cc34 <__sinit+0x14>
 800cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc30:	f7ff bff0 	b.w	800cc14 <__sfp_lock_release>
 800cc34:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <__sinit+0x28>)
 800cc36:	6223      	str	r3, [r4, #32]
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <__sinit+0x2c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1f5      	bne.n	800cc2c <__sinit+0xc>
 800cc40:	f7ff ffc4 	bl	800cbcc <global_stdio_init.part.0>
 800cc44:	e7f2      	b.n	800cc2c <__sinit+0xc>
 800cc46:	bf00      	nop
 800cc48:	0800cb8d 	.word	0x0800cb8d
 800cc4c:	2000d6e8 	.word	0x2000d6e8

0800cc50 <_fwalk_sglue>:
 800cc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc54:	4607      	mov	r7, r0
 800cc56:	4688      	mov	r8, r1
 800cc58:	4614      	mov	r4, r2
 800cc5a:	2600      	movs	r6, #0
 800cc5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc60:	f1b9 0901 	subs.w	r9, r9, #1
 800cc64:	d505      	bpl.n	800cc72 <_fwalk_sglue+0x22>
 800cc66:	6824      	ldr	r4, [r4, #0]
 800cc68:	2c00      	cmp	r4, #0
 800cc6a:	d1f7      	bne.n	800cc5c <_fwalk_sglue+0xc>
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc72:	89ab      	ldrh	r3, [r5, #12]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d907      	bls.n	800cc88 <_fwalk_sglue+0x38>
 800cc78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	d003      	beq.n	800cc88 <_fwalk_sglue+0x38>
 800cc80:	4629      	mov	r1, r5
 800cc82:	4638      	mov	r0, r7
 800cc84:	47c0      	blx	r8
 800cc86:	4306      	orrs	r6, r0
 800cc88:	3568      	adds	r5, #104	; 0x68
 800cc8a:	e7e9      	b.n	800cc60 <_fwalk_sglue+0x10>

0800cc8c <sniprintf>:
 800cc8c:	b40c      	push	{r2, r3}
 800cc8e:	b530      	push	{r4, r5, lr}
 800cc90:	4b17      	ldr	r3, [pc, #92]	; (800ccf0 <sniprintf+0x64>)
 800cc92:	1e0c      	subs	r4, r1, #0
 800cc94:	681d      	ldr	r5, [r3, #0]
 800cc96:	b09d      	sub	sp, #116	; 0x74
 800cc98:	da08      	bge.n	800ccac <sniprintf+0x20>
 800cc9a:	238b      	movs	r3, #139	; 0x8b
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cca2:	b01d      	add	sp, #116	; 0x74
 800cca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cca8:	b002      	add	sp, #8
 800ccaa:	4770      	bx	lr
 800ccac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccb4:	bf14      	ite	ne
 800ccb6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ccba:	4623      	moveq	r3, r4
 800ccbc:	9304      	str	r3, [sp, #16]
 800ccbe:	9307      	str	r3, [sp, #28]
 800ccc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccc4:	9002      	str	r0, [sp, #8]
 800ccc6:	9006      	str	r0, [sp, #24]
 800ccc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cccc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ccce:	ab21      	add	r3, sp, #132	; 0x84
 800ccd0:	a902      	add	r1, sp, #8
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	9301      	str	r3, [sp, #4]
 800ccd6:	f002 fc73 	bl	800f5c0 <_svfiprintf_r>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	bfbc      	itt	lt
 800ccde:	238b      	movlt	r3, #139	; 0x8b
 800cce0:	602b      	strlt	r3, [r5, #0]
 800cce2:	2c00      	cmp	r4, #0
 800cce4:	d0dd      	beq.n	800cca2 <sniprintf+0x16>
 800cce6:	9b02      	ldr	r3, [sp, #8]
 800cce8:	2200      	movs	r2, #0
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	e7d9      	b.n	800cca2 <sniprintf+0x16>
 800ccee:	bf00      	nop
 800ccf0:	20000068 	.word	0x20000068

0800ccf4 <siprintf>:
 800ccf4:	b40e      	push	{r1, r2, r3}
 800ccf6:	b500      	push	{lr}
 800ccf8:	b09c      	sub	sp, #112	; 0x70
 800ccfa:	ab1d      	add	r3, sp, #116	; 0x74
 800ccfc:	9002      	str	r0, [sp, #8]
 800ccfe:	9006      	str	r0, [sp, #24]
 800cd00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd04:	4809      	ldr	r0, [pc, #36]	; (800cd2c <siprintf+0x38>)
 800cd06:	9107      	str	r1, [sp, #28]
 800cd08:	9104      	str	r1, [sp, #16]
 800cd0a:	4909      	ldr	r1, [pc, #36]	; (800cd30 <siprintf+0x3c>)
 800cd0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd10:	9105      	str	r1, [sp, #20]
 800cd12:	6800      	ldr	r0, [r0, #0]
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	a902      	add	r1, sp, #8
 800cd18:	f002 fc52 	bl	800f5c0 <_svfiprintf_r>
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	701a      	strb	r2, [r3, #0]
 800cd22:	b01c      	add	sp, #112	; 0x70
 800cd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd28:	b003      	add	sp, #12
 800cd2a:	4770      	bx	lr
 800cd2c:	20000068 	.word	0x20000068
 800cd30:	ffff0208 	.word	0xffff0208

0800cd34 <__sread>:
 800cd34:	b510      	push	{r4, lr}
 800cd36:	460c      	mov	r4, r1
 800cd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd3c:	f000 f8c2 	bl	800cec4 <_read_r>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	bfab      	itete	ge
 800cd44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd46:	89a3      	ldrhlt	r3, [r4, #12]
 800cd48:	181b      	addge	r3, r3, r0
 800cd4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd4e:	bfac      	ite	ge
 800cd50:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd52:	81a3      	strhlt	r3, [r4, #12]
 800cd54:	bd10      	pop	{r4, pc}

0800cd56 <__swrite>:
 800cd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5a:	461f      	mov	r7, r3
 800cd5c:	898b      	ldrh	r3, [r1, #12]
 800cd5e:	05db      	lsls	r3, r3, #23
 800cd60:	4605      	mov	r5, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	4616      	mov	r6, r2
 800cd66:	d505      	bpl.n	800cd74 <__swrite+0x1e>
 800cd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f000 f896 	bl	800cea0 <_lseek_r>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	4632      	mov	r2, r6
 800cd82:	463b      	mov	r3, r7
 800cd84:	4628      	mov	r0, r5
 800cd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8a:	f000 b8ad 	b.w	800cee8 <_write_r>

0800cd8e <__sseek>:
 800cd8e:	b510      	push	{r4, lr}
 800cd90:	460c      	mov	r4, r1
 800cd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd96:	f000 f883 	bl	800cea0 <_lseek_r>
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	bf15      	itete	ne
 800cda0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cda2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cda6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdaa:	81a3      	strheq	r3, [r4, #12]
 800cdac:	bf18      	it	ne
 800cdae:	81a3      	strhne	r3, [r4, #12]
 800cdb0:	bd10      	pop	{r4, pc}

0800cdb2 <__sclose>:
 800cdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb6:	f000 b80d 	b.w	800cdd4 <_close_r>

0800cdba <memset>:
 800cdba:	4402      	add	r2, r0
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d100      	bne.n	800cdc4 <memset+0xa>
 800cdc2:	4770      	bx	lr
 800cdc4:	f803 1b01 	strb.w	r1, [r3], #1
 800cdc8:	e7f9      	b.n	800cdbe <memset+0x4>
	...

0800cdcc <_localeconv_r>:
 800cdcc:	4800      	ldr	r0, [pc, #0]	; (800cdd0 <_localeconv_r+0x4>)
 800cdce:	4770      	bx	lr
 800cdd0:	2000015c 	.word	0x2000015c

0800cdd4 <_close_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d06      	ldr	r5, [pc, #24]	; (800cdf0 <_close_r+0x1c>)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4604      	mov	r4, r0
 800cddc:	4608      	mov	r0, r1
 800cdde:	602b      	str	r3, [r5, #0]
 800cde0:	f7f5 f9b5 	bl	800214e <_close>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_close_r+0x1a>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_close_r+0x1a>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	2000d6ec 	.word	0x2000d6ec

0800cdf4 <_reclaim_reent>:
 800cdf4:	4b29      	ldr	r3, [pc, #164]	; (800ce9c <_reclaim_reent+0xa8>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4283      	cmp	r3, r0
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	d04b      	beq.n	800ce98 <_reclaim_reent+0xa4>
 800ce00:	69c3      	ldr	r3, [r0, #28]
 800ce02:	b143      	cbz	r3, 800ce16 <_reclaim_reent+0x22>
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d144      	bne.n	800ce94 <_reclaim_reent+0xa0>
 800ce0a:	69e3      	ldr	r3, [r4, #28]
 800ce0c:	6819      	ldr	r1, [r3, #0]
 800ce0e:	b111      	cbz	r1, 800ce16 <_reclaim_reent+0x22>
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 ff37 	bl	800dc84 <_free_r>
 800ce16:	6961      	ldr	r1, [r4, #20]
 800ce18:	b111      	cbz	r1, 800ce20 <_reclaim_reent+0x2c>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 ff32 	bl	800dc84 <_free_r>
 800ce20:	69e1      	ldr	r1, [r4, #28]
 800ce22:	b111      	cbz	r1, 800ce2a <_reclaim_reent+0x36>
 800ce24:	4620      	mov	r0, r4
 800ce26:	f000 ff2d 	bl	800dc84 <_free_r>
 800ce2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ce2c:	b111      	cbz	r1, 800ce34 <_reclaim_reent+0x40>
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 ff28 	bl	800dc84 <_free_r>
 800ce34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce36:	b111      	cbz	r1, 800ce3e <_reclaim_reent+0x4a>
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 ff23 	bl	800dc84 <_free_r>
 800ce3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce40:	b111      	cbz	r1, 800ce48 <_reclaim_reent+0x54>
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 ff1e 	bl	800dc84 <_free_r>
 800ce48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce4a:	b111      	cbz	r1, 800ce52 <_reclaim_reent+0x5e>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 ff19 	bl	800dc84 <_free_r>
 800ce52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce54:	b111      	cbz	r1, 800ce5c <_reclaim_reent+0x68>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 ff14 	bl	800dc84 <_free_r>
 800ce5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ce5e:	b111      	cbz	r1, 800ce66 <_reclaim_reent+0x72>
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 ff0f 	bl	800dc84 <_free_r>
 800ce66:	6a23      	ldr	r3, [r4, #32]
 800ce68:	b1b3      	cbz	r3, 800ce98 <_reclaim_reent+0xa4>
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce70:	4718      	bx	r3
 800ce72:	5949      	ldr	r1, [r1, r5]
 800ce74:	b941      	cbnz	r1, 800ce88 <_reclaim_reent+0x94>
 800ce76:	3504      	adds	r5, #4
 800ce78:	69e3      	ldr	r3, [r4, #28]
 800ce7a:	2d80      	cmp	r5, #128	; 0x80
 800ce7c:	68d9      	ldr	r1, [r3, #12]
 800ce7e:	d1f8      	bne.n	800ce72 <_reclaim_reent+0x7e>
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 feff 	bl	800dc84 <_free_r>
 800ce86:	e7c0      	b.n	800ce0a <_reclaim_reent+0x16>
 800ce88:	680e      	ldr	r6, [r1, #0]
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fefa 	bl	800dc84 <_free_r>
 800ce90:	4631      	mov	r1, r6
 800ce92:	e7ef      	b.n	800ce74 <_reclaim_reent+0x80>
 800ce94:	2500      	movs	r5, #0
 800ce96:	e7ef      	b.n	800ce78 <_reclaim_reent+0x84>
 800ce98:	bd70      	pop	{r4, r5, r6, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000068 	.word	0x20000068

0800cea0 <_lseek_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d07      	ldr	r5, [pc, #28]	; (800cec0 <_lseek_r+0x20>)
 800cea4:	4604      	mov	r4, r0
 800cea6:	4608      	mov	r0, r1
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7f5 f974 	bl	800219c <_lseek>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_lseek_r+0x1e>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_lseek_r+0x1e>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	2000d6ec 	.word	0x2000d6ec

0800cec4 <_read_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_read_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f5 f902 	bl	80020dc <_read>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_read_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_read_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	2000d6ec 	.word	0x2000d6ec

0800cee8 <_write_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d07      	ldr	r5, [pc, #28]	; (800cf08 <_write_r+0x20>)
 800ceec:	4604      	mov	r4, r0
 800ceee:	4608      	mov	r0, r1
 800cef0:	4611      	mov	r1, r2
 800cef2:	2200      	movs	r2, #0
 800cef4:	602a      	str	r2, [r5, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f7f5 f90d 	bl	8002116 <_write>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_write_r+0x1e>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_write_r+0x1e>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	2000d6ec 	.word	0x2000d6ec

0800cf0c <__errno>:
 800cf0c:	4b01      	ldr	r3, [pc, #4]	; (800cf14 <__errno+0x8>)
 800cf0e:	6818      	ldr	r0, [r3, #0]
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	20000068 	.word	0x20000068

0800cf18 <__libc_init_array>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	4d0d      	ldr	r5, [pc, #52]	; (800cf50 <__libc_init_array+0x38>)
 800cf1c:	4c0d      	ldr	r4, [pc, #52]	; (800cf54 <__libc_init_array+0x3c>)
 800cf1e:	1b64      	subs	r4, r4, r5
 800cf20:	10a4      	asrs	r4, r4, #2
 800cf22:	2600      	movs	r6, #0
 800cf24:	42a6      	cmp	r6, r4
 800cf26:	d109      	bne.n	800cf3c <__libc_init_array+0x24>
 800cf28:	4d0b      	ldr	r5, [pc, #44]	; (800cf58 <__libc_init_array+0x40>)
 800cf2a:	4c0c      	ldr	r4, [pc, #48]	; (800cf5c <__libc_init_array+0x44>)
 800cf2c:	f003 fbd4 	bl	80106d8 <_init>
 800cf30:	1b64      	subs	r4, r4, r5
 800cf32:	10a4      	asrs	r4, r4, #2
 800cf34:	2600      	movs	r6, #0
 800cf36:	42a6      	cmp	r6, r4
 800cf38:	d105      	bne.n	800cf46 <__libc_init_array+0x2e>
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}
 800cf3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf40:	4798      	blx	r3
 800cf42:	3601      	adds	r6, #1
 800cf44:	e7ee      	b.n	800cf24 <__libc_init_array+0xc>
 800cf46:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf4a:	4798      	blx	r3
 800cf4c:	3601      	adds	r6, #1
 800cf4e:	e7f2      	b.n	800cf36 <__libc_init_array+0x1e>
 800cf50:	08010c80 	.word	0x08010c80
 800cf54:	08010c80 	.word	0x08010c80
 800cf58:	08010c80 	.word	0x08010c80
 800cf5c:	08010c84 	.word	0x08010c84

0800cf60 <__retarget_lock_init_recursive>:
 800cf60:	4770      	bx	lr

0800cf62 <__retarget_lock_acquire_recursive>:
 800cf62:	4770      	bx	lr

0800cf64 <__retarget_lock_release_recursive>:
 800cf64:	4770      	bx	lr

0800cf66 <memcpy>:
 800cf66:	440a      	add	r2, r1
 800cf68:	4291      	cmp	r1, r2
 800cf6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf6e:	d100      	bne.n	800cf72 <memcpy+0xc>
 800cf70:	4770      	bx	lr
 800cf72:	b510      	push	{r4, lr}
 800cf74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf7c:	4291      	cmp	r1, r2
 800cf7e:	d1f9      	bne.n	800cf74 <memcpy+0xe>
 800cf80:	bd10      	pop	{r4, pc}
	...

0800cf84 <nanf>:
 800cf84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf8c <nanf+0x8>
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	7fc00000 	.word	0x7fc00000

0800cf90 <quorem>:
 800cf90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	6903      	ldr	r3, [r0, #16]
 800cf96:	690c      	ldr	r4, [r1, #16]
 800cf98:	42a3      	cmp	r3, r4
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	db7e      	blt.n	800d09c <quorem+0x10c>
 800cf9e:	3c01      	subs	r4, #1
 800cfa0:	f101 0814 	add.w	r8, r1, #20
 800cfa4:	f100 0514 	add.w	r5, r0, #20
 800cfa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfac:	9301      	str	r3, [sp, #4]
 800cfae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cfbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfc6:	d331      	bcc.n	800d02c <quorem+0x9c>
 800cfc8:	f04f 0e00 	mov.w	lr, #0
 800cfcc:	4640      	mov	r0, r8
 800cfce:	46ac      	mov	ip, r5
 800cfd0:	46f2      	mov	sl, lr
 800cfd2:	f850 2b04 	ldr.w	r2, [r0], #4
 800cfd6:	b293      	uxth	r3, r2
 800cfd8:	fb06 e303 	mla	r3, r6, r3, lr
 800cfdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfe0:	0c1a      	lsrs	r2, r3, #16
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	ebaa 0303 	sub.w	r3, sl, r3
 800cfe8:	f8dc a000 	ldr.w	sl, [ip]
 800cfec:	fa13 f38a 	uxtah	r3, r3, sl
 800cff0:	fb06 220e 	mla	r2, r6, lr, r2
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cffc:	b292      	uxth	r2, r2
 800cffe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d002:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d006:	f8bd 3000 	ldrh.w	r3, [sp]
 800d00a:	4581      	cmp	r9, r0
 800d00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d010:	f84c 3b04 	str.w	r3, [ip], #4
 800d014:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d018:	d2db      	bcs.n	800cfd2 <quorem+0x42>
 800d01a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d01e:	b92b      	cbnz	r3, 800d02c <quorem+0x9c>
 800d020:	9b01      	ldr	r3, [sp, #4]
 800d022:	3b04      	subs	r3, #4
 800d024:	429d      	cmp	r5, r3
 800d026:	461a      	mov	r2, r3
 800d028:	d32c      	bcc.n	800d084 <quorem+0xf4>
 800d02a:	613c      	str	r4, [r7, #16]
 800d02c:	4638      	mov	r0, r7
 800d02e:	f001 f9ef 	bl	800e410 <__mcmp>
 800d032:	2800      	cmp	r0, #0
 800d034:	db22      	blt.n	800d07c <quorem+0xec>
 800d036:	3601      	adds	r6, #1
 800d038:	4629      	mov	r1, r5
 800d03a:	2000      	movs	r0, #0
 800d03c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d040:	f8d1 c000 	ldr.w	ip, [r1]
 800d044:	b293      	uxth	r3, r2
 800d046:	1ac3      	subs	r3, r0, r3
 800d048:	0c12      	lsrs	r2, r2, #16
 800d04a:	fa13 f38c 	uxtah	r3, r3, ip
 800d04e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d052:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d056:	b29b      	uxth	r3, r3
 800d058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d05c:	45c1      	cmp	r9, r8
 800d05e:	f841 3b04 	str.w	r3, [r1], #4
 800d062:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d066:	d2e9      	bcs.n	800d03c <quorem+0xac>
 800d068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d06c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d070:	b922      	cbnz	r2, 800d07c <quorem+0xec>
 800d072:	3b04      	subs	r3, #4
 800d074:	429d      	cmp	r5, r3
 800d076:	461a      	mov	r2, r3
 800d078:	d30a      	bcc.n	800d090 <quorem+0x100>
 800d07a:	613c      	str	r4, [r7, #16]
 800d07c:	4630      	mov	r0, r6
 800d07e:	b003      	add	sp, #12
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d084:	6812      	ldr	r2, [r2, #0]
 800d086:	3b04      	subs	r3, #4
 800d088:	2a00      	cmp	r2, #0
 800d08a:	d1ce      	bne.n	800d02a <quorem+0x9a>
 800d08c:	3c01      	subs	r4, #1
 800d08e:	e7c9      	b.n	800d024 <quorem+0x94>
 800d090:	6812      	ldr	r2, [r2, #0]
 800d092:	3b04      	subs	r3, #4
 800d094:	2a00      	cmp	r2, #0
 800d096:	d1f0      	bne.n	800d07a <quorem+0xea>
 800d098:	3c01      	subs	r4, #1
 800d09a:	e7eb      	b.n	800d074 <quorem+0xe4>
 800d09c:	2000      	movs	r0, #0
 800d09e:	e7ee      	b.n	800d07e <quorem+0xee>

0800d0a0 <_dtoa_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	ed2d 8b04 	vpush	{d8-d9}
 800d0a8:	69c5      	ldr	r5, [r0, #28]
 800d0aa:	b093      	sub	sp, #76	; 0x4c
 800d0ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0b0:	ec57 6b10 	vmov	r6, r7, d0
 800d0b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d0b8:	9107      	str	r1, [sp, #28]
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	920a      	str	r2, [sp, #40]	; 0x28
 800d0be:	930d      	str	r3, [sp, #52]	; 0x34
 800d0c0:	b975      	cbnz	r5, 800d0e0 <_dtoa_r+0x40>
 800d0c2:	2010      	movs	r0, #16
 800d0c4:	f000 fe2a 	bl	800dd1c <malloc>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	61e0      	str	r0, [r4, #28]
 800d0cc:	b920      	cbnz	r0, 800d0d8 <_dtoa_r+0x38>
 800d0ce:	4bae      	ldr	r3, [pc, #696]	; (800d388 <_dtoa_r+0x2e8>)
 800d0d0:	21ef      	movs	r1, #239	; 0xef
 800d0d2:	48ae      	ldr	r0, [pc, #696]	; (800d38c <_dtoa_r+0x2ec>)
 800d0d4:	f002 fc64 	bl	800f9a0 <__assert_func>
 800d0d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0dc:	6005      	str	r5, [r0, #0]
 800d0de:	60c5      	str	r5, [r0, #12]
 800d0e0:	69e3      	ldr	r3, [r4, #28]
 800d0e2:	6819      	ldr	r1, [r3, #0]
 800d0e4:	b151      	cbz	r1, 800d0fc <_dtoa_r+0x5c>
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	604a      	str	r2, [r1, #4]
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	4093      	lsls	r3, r2
 800d0ee:	608b      	str	r3, [r1, #8]
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f000 ff07 	bl	800df04 <_Bfree>
 800d0f6:	69e3      	ldr	r3, [r4, #28]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	1e3b      	subs	r3, r7, #0
 800d0fe:	bfbb      	ittet	lt
 800d100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d104:	9303      	strlt	r3, [sp, #12]
 800d106:	2300      	movge	r3, #0
 800d108:	2201      	movlt	r2, #1
 800d10a:	bfac      	ite	ge
 800d10c:	f8c8 3000 	strge.w	r3, [r8]
 800d110:	f8c8 2000 	strlt.w	r2, [r8]
 800d114:	4b9e      	ldr	r3, [pc, #632]	; (800d390 <_dtoa_r+0x2f0>)
 800d116:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d11a:	ea33 0308 	bics.w	r3, r3, r8
 800d11e:	d11b      	bne.n	800d158 <_dtoa_r+0xb8>
 800d120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d122:	f242 730f 	movw	r3, #9999	; 0x270f
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d12c:	4333      	orrs	r3, r6
 800d12e:	f000 8593 	beq.w	800dc58 <_dtoa_r+0xbb8>
 800d132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d134:	b963      	cbnz	r3, 800d150 <_dtoa_r+0xb0>
 800d136:	4b97      	ldr	r3, [pc, #604]	; (800d394 <_dtoa_r+0x2f4>)
 800d138:	e027      	b.n	800d18a <_dtoa_r+0xea>
 800d13a:	4b97      	ldr	r3, [pc, #604]	; (800d398 <_dtoa_r+0x2f8>)
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	3308      	adds	r3, #8
 800d140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	9800      	ldr	r0, [sp, #0]
 800d146:	b013      	add	sp, #76	; 0x4c
 800d148:	ecbd 8b04 	vpop	{d8-d9}
 800d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d150:	4b90      	ldr	r3, [pc, #576]	; (800d394 <_dtoa_r+0x2f4>)
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	3303      	adds	r3, #3
 800d156:	e7f3      	b.n	800d140 <_dtoa_r+0xa0>
 800d158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d15c:	2200      	movs	r2, #0
 800d15e:	ec51 0b17 	vmov	r0, r1, d7
 800d162:	eeb0 8a47 	vmov.f32	s16, s14
 800d166:	eef0 8a67 	vmov.f32	s17, s15
 800d16a:	2300      	movs	r3, #0
 800d16c:	f7f3 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 800d170:	4681      	mov	r9, r0
 800d172:	b160      	cbz	r0, 800d18e <_dtoa_r+0xee>
 800d174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d176:	2301      	movs	r3, #1
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f000 8568 	beq.w	800dc52 <_dtoa_r+0xbb2>
 800d182:	4b86      	ldr	r3, [pc, #536]	; (800d39c <_dtoa_r+0x2fc>)
 800d184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	3b01      	subs	r3, #1
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	e7da      	b.n	800d144 <_dtoa_r+0xa4>
 800d18e:	aa10      	add	r2, sp, #64	; 0x40
 800d190:	a911      	add	r1, sp, #68	; 0x44
 800d192:	4620      	mov	r0, r4
 800d194:	eeb0 0a48 	vmov.f32	s0, s16
 800d198:	eef0 0a68 	vmov.f32	s1, s17
 800d19c:	f001 fa4e 	bl	800e63c <__d2b>
 800d1a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d1a4:	4682      	mov	sl, r0
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	d07f      	beq.n	800d2aa <_dtoa_r+0x20a>
 800d1aa:	ee18 3a90 	vmov	r3, s17
 800d1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d1b6:	ec51 0b18 	vmov	r0, r1, d8
 800d1ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d1be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d1c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	4b75      	ldr	r3, [pc, #468]	; (800d3a0 <_dtoa_r+0x300>)
 800d1cc:	f7f3 f85c 	bl	8000288 <__aeabi_dsub>
 800d1d0:	a367      	add	r3, pc, #412	; (adr r3, 800d370 <_dtoa_r+0x2d0>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fa0f 	bl	80005f8 <__aeabi_dmul>
 800d1da:	a367      	add	r3, pc, #412	; (adr r3, 800d378 <_dtoa_r+0x2d8>)
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 f854 	bl	800028c <__adddf3>
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	460f      	mov	r7, r1
 800d1ea:	f7f3 f99b 	bl	8000524 <__aeabi_i2d>
 800d1ee:	a364      	add	r3, pc, #400	; (adr r3, 800d380 <_dtoa_r+0x2e0>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f7f3 fa00 	bl	80005f8 <__aeabi_dmul>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	f7f3 f844 	bl	800028c <__adddf3>
 800d204:	4606      	mov	r6, r0
 800d206:	460f      	mov	r7, r1
 800d208:	f7f3 fca6 	bl	8000b58 <__aeabi_d2iz>
 800d20c:	2200      	movs	r2, #0
 800d20e:	4683      	mov	fp, r0
 800d210:	2300      	movs	r3, #0
 800d212:	4630      	mov	r0, r6
 800d214:	4639      	mov	r1, r7
 800d216:	f7f3 fc61 	bl	8000adc <__aeabi_dcmplt>
 800d21a:	b148      	cbz	r0, 800d230 <_dtoa_r+0x190>
 800d21c:	4658      	mov	r0, fp
 800d21e:	f7f3 f981 	bl	8000524 <__aeabi_i2d>
 800d222:	4632      	mov	r2, r6
 800d224:	463b      	mov	r3, r7
 800d226:	f7f3 fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d22a:	b908      	cbnz	r0, 800d230 <_dtoa_r+0x190>
 800d22c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d230:	f1bb 0f16 	cmp.w	fp, #22
 800d234:	d857      	bhi.n	800d2e6 <_dtoa_r+0x246>
 800d236:	4b5b      	ldr	r3, [pc, #364]	; (800d3a4 <_dtoa_r+0x304>)
 800d238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	ec51 0b18 	vmov	r0, r1, d8
 800d244:	f7f3 fc4a 	bl	8000adc <__aeabi_dcmplt>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d04e      	beq.n	800d2ea <_dtoa_r+0x24a>
 800d24c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d250:	2300      	movs	r3, #0
 800d252:	930c      	str	r3, [sp, #48]	; 0x30
 800d254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d256:	1b5b      	subs	r3, r3, r5
 800d258:	1e5a      	subs	r2, r3, #1
 800d25a:	bf45      	ittet	mi
 800d25c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d260:	9305      	strmi	r3, [sp, #20]
 800d262:	2300      	movpl	r3, #0
 800d264:	2300      	movmi	r3, #0
 800d266:	9206      	str	r2, [sp, #24]
 800d268:	bf54      	ite	pl
 800d26a:	9305      	strpl	r3, [sp, #20]
 800d26c:	9306      	strmi	r3, [sp, #24]
 800d26e:	f1bb 0f00 	cmp.w	fp, #0
 800d272:	db3c      	blt.n	800d2ee <_dtoa_r+0x24e>
 800d274:	9b06      	ldr	r3, [sp, #24]
 800d276:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d27a:	445b      	add	r3, fp
 800d27c:	9306      	str	r3, [sp, #24]
 800d27e:	2300      	movs	r3, #0
 800d280:	9308      	str	r3, [sp, #32]
 800d282:	9b07      	ldr	r3, [sp, #28]
 800d284:	2b09      	cmp	r3, #9
 800d286:	d868      	bhi.n	800d35a <_dtoa_r+0x2ba>
 800d288:	2b05      	cmp	r3, #5
 800d28a:	bfc4      	itt	gt
 800d28c:	3b04      	subgt	r3, #4
 800d28e:	9307      	strgt	r3, [sp, #28]
 800d290:	9b07      	ldr	r3, [sp, #28]
 800d292:	f1a3 0302 	sub.w	r3, r3, #2
 800d296:	bfcc      	ite	gt
 800d298:	2500      	movgt	r5, #0
 800d29a:	2501      	movle	r5, #1
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	f200 8085 	bhi.w	800d3ac <_dtoa_r+0x30c>
 800d2a2:	e8df f003 	tbb	[pc, r3]
 800d2a6:	3b2e      	.short	0x3b2e
 800d2a8:	5839      	.short	0x5839
 800d2aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d2ae:	441d      	add	r5, r3
 800d2b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d2b4:	2b20      	cmp	r3, #32
 800d2b6:	bfc1      	itttt	gt
 800d2b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d2bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800d2c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d2c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d2c8:	bfd6      	itet	le
 800d2ca:	f1c3 0320 	rsble	r3, r3, #32
 800d2ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800d2d2:	fa06 f003 	lslle.w	r0, r6, r3
 800d2d6:	f7f3 f915 	bl	8000504 <__aeabi_ui2d>
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d2e0:	3d01      	subs	r5, #1
 800d2e2:	920e      	str	r2, [sp, #56]	; 0x38
 800d2e4:	e76f      	b.n	800d1c6 <_dtoa_r+0x126>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e7b3      	b.n	800d252 <_dtoa_r+0x1b2>
 800d2ea:	900c      	str	r0, [sp, #48]	; 0x30
 800d2ec:	e7b2      	b.n	800d254 <_dtoa_r+0x1b4>
 800d2ee:	9b05      	ldr	r3, [sp, #20]
 800d2f0:	eba3 030b 	sub.w	r3, r3, fp
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	f1cb 0300 	rsb	r3, fp, #0
 800d2fa:	9308      	str	r3, [sp, #32]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800d300:	e7bf      	b.n	800d282 <_dtoa_r+0x1e2>
 800d302:	2300      	movs	r3, #0
 800d304:	9309      	str	r3, [sp, #36]	; 0x24
 800d306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d308:	2b00      	cmp	r3, #0
 800d30a:	dc52      	bgt.n	800d3b2 <_dtoa_r+0x312>
 800d30c:	2301      	movs	r3, #1
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	461a      	mov	r2, r3
 800d314:	920a      	str	r2, [sp, #40]	; 0x28
 800d316:	e00b      	b.n	800d330 <_dtoa_r+0x290>
 800d318:	2301      	movs	r3, #1
 800d31a:	e7f3      	b.n	800d304 <_dtoa_r+0x264>
 800d31c:	2300      	movs	r3, #0
 800d31e:	9309      	str	r3, [sp, #36]	; 0x24
 800d320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d322:	445b      	add	r3, fp
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	3301      	adds	r3, #1
 800d328:	2b01      	cmp	r3, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	bfb8      	it	lt
 800d32e:	2301      	movlt	r3, #1
 800d330:	69e0      	ldr	r0, [r4, #28]
 800d332:	2100      	movs	r1, #0
 800d334:	2204      	movs	r2, #4
 800d336:	f102 0614 	add.w	r6, r2, #20
 800d33a:	429e      	cmp	r6, r3
 800d33c:	d93d      	bls.n	800d3ba <_dtoa_r+0x31a>
 800d33e:	6041      	str	r1, [r0, #4]
 800d340:	4620      	mov	r0, r4
 800d342:	f000 fd9f 	bl	800de84 <_Balloc>
 800d346:	9000      	str	r0, [sp, #0]
 800d348:	2800      	cmp	r0, #0
 800d34a:	d139      	bne.n	800d3c0 <_dtoa_r+0x320>
 800d34c:	4b16      	ldr	r3, [pc, #88]	; (800d3a8 <_dtoa_r+0x308>)
 800d34e:	4602      	mov	r2, r0
 800d350:	f240 11af 	movw	r1, #431	; 0x1af
 800d354:	e6bd      	b.n	800d0d2 <_dtoa_r+0x32>
 800d356:	2301      	movs	r3, #1
 800d358:	e7e1      	b.n	800d31e <_dtoa_r+0x27e>
 800d35a:	2501      	movs	r5, #1
 800d35c:	2300      	movs	r3, #0
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	9509      	str	r5, [sp, #36]	; 0x24
 800d362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	2200      	movs	r2, #0
 800d36c:	2312      	movs	r3, #18
 800d36e:	e7d1      	b.n	800d314 <_dtoa_r+0x274>
 800d370:	636f4361 	.word	0x636f4361
 800d374:	3fd287a7 	.word	0x3fd287a7
 800d378:	8b60c8b3 	.word	0x8b60c8b3
 800d37c:	3fc68a28 	.word	0x3fc68a28
 800d380:	509f79fb 	.word	0x509f79fb
 800d384:	3fd34413 	.word	0x3fd34413
 800d388:	08010892 	.word	0x08010892
 800d38c:	080108a9 	.word	0x080108a9
 800d390:	7ff00000 	.word	0x7ff00000
 800d394:	0801088e 	.word	0x0801088e
 800d398:	08010885 	.word	0x08010885
 800d39c:	0801085d 	.word	0x0801085d
 800d3a0:	3ff80000 	.word	0x3ff80000
 800d3a4:	08010998 	.word	0x08010998
 800d3a8:	08010901 	.word	0x08010901
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b0:	e7d7      	b.n	800d362 <_dtoa_r+0x2c2>
 800d3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	e7ba      	b.n	800d330 <_dtoa_r+0x290>
 800d3ba:	3101      	adds	r1, #1
 800d3bc:	0052      	lsls	r2, r2, #1
 800d3be:	e7ba      	b.n	800d336 <_dtoa_r+0x296>
 800d3c0:	69e3      	ldr	r3, [r4, #28]
 800d3c2:	9a00      	ldr	r2, [sp, #0]
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	2b0e      	cmp	r3, #14
 800d3ca:	f200 80a8 	bhi.w	800d51e <_dtoa_r+0x47e>
 800d3ce:	2d00      	cmp	r5, #0
 800d3d0:	f000 80a5 	beq.w	800d51e <_dtoa_r+0x47e>
 800d3d4:	f1bb 0f00 	cmp.w	fp, #0
 800d3d8:	dd38      	ble.n	800d44c <_dtoa_r+0x3ac>
 800d3da:	4bc0      	ldr	r3, [pc, #768]	; (800d6dc <_dtoa_r+0x63c>)
 800d3dc:	f00b 020f 	and.w	r2, fp, #15
 800d3e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d3e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d3ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d3f0:	d019      	beq.n	800d426 <_dtoa_r+0x386>
 800d3f2:	4bbb      	ldr	r3, [pc, #748]	; (800d6e0 <_dtoa_r+0x640>)
 800d3f4:	ec51 0b18 	vmov	r0, r1, d8
 800d3f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3fc:	f7f3 fa26 	bl	800084c <__aeabi_ddiv>
 800d400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d404:	f008 080f 	and.w	r8, r8, #15
 800d408:	2503      	movs	r5, #3
 800d40a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d6e0 <_dtoa_r+0x640>
 800d40e:	f1b8 0f00 	cmp.w	r8, #0
 800d412:	d10a      	bne.n	800d42a <_dtoa_r+0x38a>
 800d414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d418:	4632      	mov	r2, r6
 800d41a:	463b      	mov	r3, r7
 800d41c:	f7f3 fa16 	bl	800084c <__aeabi_ddiv>
 800d420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d424:	e02b      	b.n	800d47e <_dtoa_r+0x3de>
 800d426:	2502      	movs	r5, #2
 800d428:	e7ef      	b.n	800d40a <_dtoa_r+0x36a>
 800d42a:	f018 0f01 	tst.w	r8, #1
 800d42e:	d008      	beq.n	800d442 <_dtoa_r+0x3a2>
 800d430:	4630      	mov	r0, r6
 800d432:	4639      	mov	r1, r7
 800d434:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d438:	f7f3 f8de 	bl	80005f8 <__aeabi_dmul>
 800d43c:	3501      	adds	r5, #1
 800d43e:	4606      	mov	r6, r0
 800d440:	460f      	mov	r7, r1
 800d442:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d446:	f109 0908 	add.w	r9, r9, #8
 800d44a:	e7e0      	b.n	800d40e <_dtoa_r+0x36e>
 800d44c:	f000 809f 	beq.w	800d58e <_dtoa_r+0x4ee>
 800d450:	f1cb 0600 	rsb	r6, fp, #0
 800d454:	4ba1      	ldr	r3, [pc, #644]	; (800d6dc <_dtoa_r+0x63c>)
 800d456:	4fa2      	ldr	r7, [pc, #648]	; (800d6e0 <_dtoa_r+0x640>)
 800d458:	f006 020f 	and.w	r2, r6, #15
 800d45c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	ec51 0b18 	vmov	r0, r1, d8
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d470:	1136      	asrs	r6, r6, #4
 800d472:	2300      	movs	r3, #0
 800d474:	2502      	movs	r5, #2
 800d476:	2e00      	cmp	r6, #0
 800d478:	d17e      	bne.n	800d578 <_dtoa_r+0x4d8>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1d0      	bne.n	800d420 <_dtoa_r+0x380>
 800d47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d480:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 8084 	beq.w	800d592 <_dtoa_r+0x4f2>
 800d48a:	4b96      	ldr	r3, [pc, #600]	; (800d6e4 <_dtoa_r+0x644>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	4640      	mov	r0, r8
 800d490:	4649      	mov	r1, r9
 800d492:	f7f3 fb23 	bl	8000adc <__aeabi_dcmplt>
 800d496:	2800      	cmp	r0, #0
 800d498:	d07b      	beq.n	800d592 <_dtoa_r+0x4f2>
 800d49a:	9b04      	ldr	r3, [sp, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d078      	beq.n	800d592 <_dtoa_r+0x4f2>
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dd39      	ble.n	800d51a <_dtoa_r+0x47a>
 800d4a6:	4b90      	ldr	r3, [pc, #576]	; (800d6e8 <_dtoa_r+0x648>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	f7f3 f8a3 	bl	80005f8 <__aeabi_dmul>
 800d4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4b6:	9e01      	ldr	r6, [sp, #4]
 800d4b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d4bc:	3501      	adds	r5, #1
 800d4be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f7f3 f82e 	bl	8000524 <__aeabi_i2d>
 800d4c8:	4642      	mov	r2, r8
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	f7f3 f894 	bl	80005f8 <__aeabi_dmul>
 800d4d0:	4b86      	ldr	r3, [pc, #536]	; (800d6ec <_dtoa_r+0x64c>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f7f2 feda 	bl	800028c <__adddf3>
 800d4d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e0:	9303      	str	r3, [sp, #12]
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d158      	bne.n	800d598 <_dtoa_r+0x4f8>
 800d4e6:	4b82      	ldr	r3, [pc, #520]	; (800d6f0 <_dtoa_r+0x650>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4640      	mov	r0, r8
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	f7f2 fecb 	bl	8000288 <__aeabi_dsub>
 800d4f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4f6:	4680      	mov	r8, r0
 800d4f8:	4689      	mov	r9, r1
 800d4fa:	f7f3 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f040 8296 	bne.w	800da30 <_dtoa_r+0x990>
 800d504:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d508:	4640      	mov	r0, r8
 800d50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fae4 	bl	8000adc <__aeabi_dcmplt>
 800d514:	2800      	cmp	r0, #0
 800d516:	f040 8289 	bne.w	800da2c <_dtoa_r+0x98c>
 800d51a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d520:	2b00      	cmp	r3, #0
 800d522:	f2c0 814e 	blt.w	800d7c2 <_dtoa_r+0x722>
 800d526:	f1bb 0f0e 	cmp.w	fp, #14
 800d52a:	f300 814a 	bgt.w	800d7c2 <_dtoa_r+0x722>
 800d52e:	4b6b      	ldr	r3, [pc, #428]	; (800d6dc <_dtoa_r+0x63c>)
 800d530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d534:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f280 80dc 	bge.w	800d6f8 <_dtoa_r+0x658>
 800d540:	9b04      	ldr	r3, [sp, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	f300 80d8 	bgt.w	800d6f8 <_dtoa_r+0x658>
 800d548:	f040 826f 	bne.w	800da2a <_dtoa_r+0x98a>
 800d54c:	4b68      	ldr	r3, [pc, #416]	; (800d6f0 <_dtoa_r+0x650>)
 800d54e:	2200      	movs	r2, #0
 800d550:	4640      	mov	r0, r8
 800d552:	4649      	mov	r1, r9
 800d554:	f7f3 f850 	bl	80005f8 <__aeabi_dmul>
 800d558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d55c:	f7f3 fad2 	bl	8000b04 <__aeabi_dcmpge>
 800d560:	9e04      	ldr	r6, [sp, #16]
 800d562:	4637      	mov	r7, r6
 800d564:	2800      	cmp	r0, #0
 800d566:	f040 8245 	bne.w	800d9f4 <_dtoa_r+0x954>
 800d56a:	9d00      	ldr	r5, [sp, #0]
 800d56c:	2331      	movs	r3, #49	; 0x31
 800d56e:	f805 3b01 	strb.w	r3, [r5], #1
 800d572:	f10b 0b01 	add.w	fp, fp, #1
 800d576:	e241      	b.n	800d9fc <_dtoa_r+0x95c>
 800d578:	07f2      	lsls	r2, r6, #31
 800d57a:	d505      	bpl.n	800d588 <_dtoa_r+0x4e8>
 800d57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d580:	f7f3 f83a 	bl	80005f8 <__aeabi_dmul>
 800d584:	3501      	adds	r5, #1
 800d586:	2301      	movs	r3, #1
 800d588:	1076      	asrs	r6, r6, #1
 800d58a:	3708      	adds	r7, #8
 800d58c:	e773      	b.n	800d476 <_dtoa_r+0x3d6>
 800d58e:	2502      	movs	r5, #2
 800d590:	e775      	b.n	800d47e <_dtoa_r+0x3de>
 800d592:	9e04      	ldr	r6, [sp, #16]
 800d594:	465f      	mov	r7, fp
 800d596:	e792      	b.n	800d4be <_dtoa_r+0x41e>
 800d598:	9900      	ldr	r1, [sp, #0]
 800d59a:	4b50      	ldr	r3, [pc, #320]	; (800d6dc <_dtoa_r+0x63c>)
 800d59c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5a0:	4431      	add	r1, r6
 800d5a2:	9102      	str	r1, [sp, #8]
 800d5a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5a6:	eeb0 9a47 	vmov.f32	s18, s14
 800d5aa:	eef0 9a67 	vmov.f32	s19, s15
 800d5ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d5b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5b6:	2900      	cmp	r1, #0
 800d5b8:	d044      	beq.n	800d644 <_dtoa_r+0x5a4>
 800d5ba:	494e      	ldr	r1, [pc, #312]	; (800d6f4 <_dtoa_r+0x654>)
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7f3 f945 	bl	800084c <__aeabi_ddiv>
 800d5c2:	ec53 2b19 	vmov	r2, r3, d9
 800d5c6:	f7f2 fe5f 	bl	8000288 <__aeabi_dsub>
 800d5ca:	9d00      	ldr	r5, [sp, #0]
 800d5cc:	ec41 0b19 	vmov	d9, r0, r1
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	f7f3 fac0 	bl	8000b58 <__aeabi_d2iz>
 800d5d8:	4606      	mov	r6, r0
 800d5da:	f7f2 ffa3 	bl	8000524 <__aeabi_i2d>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	f7f2 fe4f 	bl	8000288 <__aeabi_dsub>
 800d5ea:	3630      	adds	r6, #48	; 0x30
 800d5ec:	f805 6b01 	strb.w	r6, [r5], #1
 800d5f0:	ec53 2b19 	vmov	r2, r3, d9
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	4689      	mov	r9, r1
 800d5f8:	f7f3 fa70 	bl	8000adc <__aeabi_dcmplt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d164      	bne.n	800d6ca <_dtoa_r+0x62a>
 800d600:	4642      	mov	r2, r8
 800d602:	464b      	mov	r3, r9
 800d604:	4937      	ldr	r1, [pc, #220]	; (800d6e4 <_dtoa_r+0x644>)
 800d606:	2000      	movs	r0, #0
 800d608:	f7f2 fe3e 	bl	8000288 <__aeabi_dsub>
 800d60c:	ec53 2b19 	vmov	r2, r3, d9
 800d610:	f7f3 fa64 	bl	8000adc <__aeabi_dcmplt>
 800d614:	2800      	cmp	r0, #0
 800d616:	f040 80b6 	bne.w	800d786 <_dtoa_r+0x6e6>
 800d61a:	9b02      	ldr	r3, [sp, #8]
 800d61c:	429d      	cmp	r5, r3
 800d61e:	f43f af7c 	beq.w	800d51a <_dtoa_r+0x47a>
 800d622:	4b31      	ldr	r3, [pc, #196]	; (800d6e8 <_dtoa_r+0x648>)
 800d624:	ec51 0b19 	vmov	r0, r1, d9
 800d628:	2200      	movs	r2, #0
 800d62a:	f7f2 ffe5 	bl	80005f8 <__aeabi_dmul>
 800d62e:	4b2e      	ldr	r3, [pc, #184]	; (800d6e8 <_dtoa_r+0x648>)
 800d630:	ec41 0b19 	vmov	d9, r0, r1
 800d634:	2200      	movs	r2, #0
 800d636:	4640      	mov	r0, r8
 800d638:	4649      	mov	r1, r9
 800d63a:	f7f2 ffdd 	bl	80005f8 <__aeabi_dmul>
 800d63e:	4680      	mov	r8, r0
 800d640:	4689      	mov	r9, r1
 800d642:	e7c5      	b.n	800d5d0 <_dtoa_r+0x530>
 800d644:	ec51 0b17 	vmov	r0, r1, d7
 800d648:	f7f2 ffd6 	bl	80005f8 <__aeabi_dmul>
 800d64c:	9b02      	ldr	r3, [sp, #8]
 800d64e:	9d00      	ldr	r5, [sp, #0]
 800d650:	930f      	str	r3, [sp, #60]	; 0x3c
 800d652:	ec41 0b19 	vmov	d9, r0, r1
 800d656:	4649      	mov	r1, r9
 800d658:	4640      	mov	r0, r8
 800d65a:	f7f3 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800d65e:	4606      	mov	r6, r0
 800d660:	f7f2 ff60 	bl	8000524 <__aeabi_i2d>
 800d664:	3630      	adds	r6, #48	; 0x30
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4640      	mov	r0, r8
 800d66c:	4649      	mov	r1, r9
 800d66e:	f7f2 fe0b 	bl	8000288 <__aeabi_dsub>
 800d672:	f805 6b01 	strb.w	r6, [r5], #1
 800d676:	9b02      	ldr	r3, [sp, #8]
 800d678:	429d      	cmp	r5, r3
 800d67a:	4680      	mov	r8, r0
 800d67c:	4689      	mov	r9, r1
 800d67e:	f04f 0200 	mov.w	r2, #0
 800d682:	d124      	bne.n	800d6ce <_dtoa_r+0x62e>
 800d684:	4b1b      	ldr	r3, [pc, #108]	; (800d6f4 <_dtoa_r+0x654>)
 800d686:	ec51 0b19 	vmov	r0, r1, d9
 800d68a:	f7f2 fdff 	bl	800028c <__adddf3>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4640      	mov	r0, r8
 800d694:	4649      	mov	r1, r9
 800d696:	f7f3 fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d173      	bne.n	800d786 <_dtoa_r+0x6e6>
 800d69e:	ec53 2b19 	vmov	r2, r3, d9
 800d6a2:	4914      	ldr	r1, [pc, #80]	; (800d6f4 <_dtoa_r+0x654>)
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	f7f2 fdef 	bl	8000288 <__aeabi_dsub>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	f7f3 fa13 	bl	8000adc <__aeabi_dcmplt>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	f43f af2f 	beq.w	800d51a <_dtoa_r+0x47a>
 800d6bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d6be:	1e6b      	subs	r3, r5, #1
 800d6c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d6c6:	2b30      	cmp	r3, #48	; 0x30
 800d6c8:	d0f8      	beq.n	800d6bc <_dtoa_r+0x61c>
 800d6ca:	46bb      	mov	fp, r7
 800d6cc:	e04a      	b.n	800d764 <_dtoa_r+0x6c4>
 800d6ce:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <_dtoa_r+0x648>)
 800d6d0:	f7f2 ff92 	bl	80005f8 <__aeabi_dmul>
 800d6d4:	4680      	mov	r8, r0
 800d6d6:	4689      	mov	r9, r1
 800d6d8:	e7bd      	b.n	800d656 <_dtoa_r+0x5b6>
 800d6da:	bf00      	nop
 800d6dc:	08010998 	.word	0x08010998
 800d6e0:	08010970 	.word	0x08010970
 800d6e4:	3ff00000 	.word	0x3ff00000
 800d6e8:	40240000 	.word	0x40240000
 800d6ec:	401c0000 	.word	0x401c0000
 800d6f0:	40140000 	.word	0x40140000
 800d6f4:	3fe00000 	.word	0x3fe00000
 800d6f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6fc:	9d00      	ldr	r5, [sp, #0]
 800d6fe:	4642      	mov	r2, r8
 800d700:	464b      	mov	r3, r9
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	f7f3 f8a1 	bl	800084c <__aeabi_ddiv>
 800d70a:	f7f3 fa25 	bl	8000b58 <__aeabi_d2iz>
 800d70e:	9001      	str	r0, [sp, #4]
 800d710:	f7f2 ff08 	bl	8000524 <__aeabi_i2d>
 800d714:	4642      	mov	r2, r8
 800d716:	464b      	mov	r3, r9
 800d718:	f7f2 ff6e 	bl	80005f8 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	f7f2 fdb0 	bl	8000288 <__aeabi_dsub>
 800d728:	9e01      	ldr	r6, [sp, #4]
 800d72a:	9f04      	ldr	r7, [sp, #16]
 800d72c:	3630      	adds	r6, #48	; 0x30
 800d72e:	f805 6b01 	strb.w	r6, [r5], #1
 800d732:	9e00      	ldr	r6, [sp, #0]
 800d734:	1bae      	subs	r6, r5, r6
 800d736:	42b7      	cmp	r7, r6
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	d134      	bne.n	800d7a8 <_dtoa_r+0x708>
 800d73e:	f7f2 fda5 	bl	800028c <__adddf3>
 800d742:	4642      	mov	r2, r8
 800d744:	464b      	mov	r3, r9
 800d746:	4606      	mov	r6, r0
 800d748:	460f      	mov	r7, r1
 800d74a:	f7f3 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800d74e:	b9c8      	cbnz	r0, 800d784 <_dtoa_r+0x6e4>
 800d750:	4642      	mov	r2, r8
 800d752:	464b      	mov	r3, r9
 800d754:	4630      	mov	r0, r6
 800d756:	4639      	mov	r1, r7
 800d758:	f7f3 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d75c:	b110      	cbz	r0, 800d764 <_dtoa_r+0x6c4>
 800d75e:	9b01      	ldr	r3, [sp, #4]
 800d760:	07db      	lsls	r3, r3, #31
 800d762:	d40f      	bmi.n	800d784 <_dtoa_r+0x6e4>
 800d764:	4651      	mov	r1, sl
 800d766:	4620      	mov	r0, r4
 800d768:	f000 fbcc 	bl	800df04 <_Bfree>
 800d76c:	2300      	movs	r3, #0
 800d76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d770:	702b      	strb	r3, [r5, #0]
 800d772:	f10b 0301 	add.w	r3, fp, #1
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f43f ace2 	beq.w	800d144 <_dtoa_r+0xa4>
 800d780:	601d      	str	r5, [r3, #0]
 800d782:	e4df      	b.n	800d144 <_dtoa_r+0xa4>
 800d784:	465f      	mov	r7, fp
 800d786:	462b      	mov	r3, r5
 800d788:	461d      	mov	r5, r3
 800d78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d78e:	2a39      	cmp	r2, #57	; 0x39
 800d790:	d106      	bne.n	800d7a0 <_dtoa_r+0x700>
 800d792:	9a00      	ldr	r2, [sp, #0]
 800d794:	429a      	cmp	r2, r3
 800d796:	d1f7      	bne.n	800d788 <_dtoa_r+0x6e8>
 800d798:	9900      	ldr	r1, [sp, #0]
 800d79a:	2230      	movs	r2, #48	; 0x30
 800d79c:	3701      	adds	r7, #1
 800d79e:	700a      	strb	r2, [r1, #0]
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	3201      	adds	r2, #1
 800d7a4:	701a      	strb	r2, [r3, #0]
 800d7a6:	e790      	b.n	800d6ca <_dtoa_r+0x62a>
 800d7a8:	4ba3      	ldr	r3, [pc, #652]	; (800da38 <_dtoa_r+0x998>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	460f      	mov	r7, r1
 800d7b8:	f7f3 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d09e      	beq.n	800d6fe <_dtoa_r+0x65e>
 800d7c0:	e7d0      	b.n	800d764 <_dtoa_r+0x6c4>
 800d7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	f000 80ca 	beq.w	800d95e <_dtoa_r+0x8be>
 800d7ca:	9a07      	ldr	r2, [sp, #28]
 800d7cc:	2a01      	cmp	r2, #1
 800d7ce:	f300 80ad 	bgt.w	800d92c <_dtoa_r+0x88c>
 800d7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7d4:	2a00      	cmp	r2, #0
 800d7d6:	f000 80a5 	beq.w	800d924 <_dtoa_r+0x884>
 800d7da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d7de:	9e08      	ldr	r6, [sp, #32]
 800d7e0:	9d05      	ldr	r5, [sp, #20]
 800d7e2:	9a05      	ldr	r2, [sp, #20]
 800d7e4:	441a      	add	r2, r3
 800d7e6:	9205      	str	r2, [sp, #20]
 800d7e8:	9a06      	ldr	r2, [sp, #24]
 800d7ea:	2101      	movs	r1, #1
 800d7ec:	441a      	add	r2, r3
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	9206      	str	r2, [sp, #24]
 800d7f2:	f000 fc87 	bl	800e104 <__i2b>
 800d7f6:	4607      	mov	r7, r0
 800d7f8:	b165      	cbz	r5, 800d814 <_dtoa_r+0x774>
 800d7fa:	9b06      	ldr	r3, [sp, #24]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	dd09      	ble.n	800d814 <_dtoa_r+0x774>
 800d800:	42ab      	cmp	r3, r5
 800d802:	9a05      	ldr	r2, [sp, #20]
 800d804:	bfa8      	it	ge
 800d806:	462b      	movge	r3, r5
 800d808:	1ad2      	subs	r2, r2, r3
 800d80a:	9205      	str	r2, [sp, #20]
 800d80c:	9a06      	ldr	r2, [sp, #24]
 800d80e:	1aed      	subs	r5, r5, r3
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	9306      	str	r3, [sp, #24]
 800d814:	9b08      	ldr	r3, [sp, #32]
 800d816:	b1f3      	cbz	r3, 800d856 <_dtoa_r+0x7b6>
 800d818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 80a3 	beq.w	800d966 <_dtoa_r+0x8c6>
 800d820:	2e00      	cmp	r6, #0
 800d822:	dd10      	ble.n	800d846 <_dtoa_r+0x7a6>
 800d824:	4639      	mov	r1, r7
 800d826:	4632      	mov	r2, r6
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 fd2b 	bl	800e284 <__pow5mult>
 800d82e:	4652      	mov	r2, sl
 800d830:	4601      	mov	r1, r0
 800d832:	4607      	mov	r7, r0
 800d834:	4620      	mov	r0, r4
 800d836:	f000 fc7b 	bl	800e130 <__multiply>
 800d83a:	4651      	mov	r1, sl
 800d83c:	4680      	mov	r8, r0
 800d83e:	4620      	mov	r0, r4
 800d840:	f000 fb60 	bl	800df04 <_Bfree>
 800d844:	46c2      	mov	sl, r8
 800d846:	9b08      	ldr	r3, [sp, #32]
 800d848:	1b9a      	subs	r2, r3, r6
 800d84a:	d004      	beq.n	800d856 <_dtoa_r+0x7b6>
 800d84c:	4651      	mov	r1, sl
 800d84e:	4620      	mov	r0, r4
 800d850:	f000 fd18 	bl	800e284 <__pow5mult>
 800d854:	4682      	mov	sl, r0
 800d856:	2101      	movs	r1, #1
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 fc53 	bl	800e104 <__i2b>
 800d85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d860:	2b00      	cmp	r3, #0
 800d862:	4606      	mov	r6, r0
 800d864:	f340 8081 	ble.w	800d96a <_dtoa_r+0x8ca>
 800d868:	461a      	mov	r2, r3
 800d86a:	4601      	mov	r1, r0
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fd09 	bl	800e284 <__pow5mult>
 800d872:	9b07      	ldr	r3, [sp, #28]
 800d874:	2b01      	cmp	r3, #1
 800d876:	4606      	mov	r6, r0
 800d878:	dd7a      	ble.n	800d970 <_dtoa_r+0x8d0>
 800d87a:	f04f 0800 	mov.w	r8, #0
 800d87e:	6933      	ldr	r3, [r6, #16]
 800d880:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d884:	6918      	ldr	r0, [r3, #16]
 800d886:	f000 fbef 	bl	800e068 <__hi0bits>
 800d88a:	f1c0 0020 	rsb	r0, r0, #32
 800d88e:	9b06      	ldr	r3, [sp, #24]
 800d890:	4418      	add	r0, r3
 800d892:	f010 001f 	ands.w	r0, r0, #31
 800d896:	f000 8094 	beq.w	800d9c2 <_dtoa_r+0x922>
 800d89a:	f1c0 0320 	rsb	r3, r0, #32
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	f340 8085 	ble.w	800d9ae <_dtoa_r+0x90e>
 800d8a4:	9b05      	ldr	r3, [sp, #20]
 800d8a6:	f1c0 001c 	rsb	r0, r0, #28
 800d8aa:	4403      	add	r3, r0
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	9b06      	ldr	r3, [sp, #24]
 800d8b0:	4403      	add	r3, r0
 800d8b2:	4405      	add	r5, r0
 800d8b4:	9306      	str	r3, [sp, #24]
 800d8b6:	9b05      	ldr	r3, [sp, #20]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	dd05      	ble.n	800d8c8 <_dtoa_r+0x828>
 800d8bc:	4651      	mov	r1, sl
 800d8be:	461a      	mov	r2, r3
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f000 fd39 	bl	800e338 <__lshift>
 800d8c6:	4682      	mov	sl, r0
 800d8c8:	9b06      	ldr	r3, [sp, #24]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	dd05      	ble.n	800d8da <_dtoa_r+0x83a>
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fd30 	bl	800e338 <__lshift>
 800d8d8:	4606      	mov	r6, r0
 800d8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d072      	beq.n	800d9c6 <_dtoa_r+0x926>
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4650      	mov	r0, sl
 800d8e4:	f000 fd94 	bl	800e410 <__mcmp>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	da6c      	bge.n	800d9c6 <_dtoa_r+0x926>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4651      	mov	r1, sl
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fb28 	bl	800df48 <__multadd>
 800d8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d8fe:	4682      	mov	sl, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 81b0 	beq.w	800dc66 <_dtoa_r+0xbc6>
 800d906:	2300      	movs	r3, #0
 800d908:	4639      	mov	r1, r7
 800d90a:	220a      	movs	r2, #10
 800d90c:	4620      	mov	r0, r4
 800d90e:	f000 fb1b 	bl	800df48 <__multadd>
 800d912:	9b01      	ldr	r3, [sp, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	4607      	mov	r7, r0
 800d918:	f300 8096 	bgt.w	800da48 <_dtoa_r+0x9a8>
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	dc59      	bgt.n	800d9d6 <_dtoa_r+0x936>
 800d922:	e091      	b.n	800da48 <_dtoa_r+0x9a8>
 800d924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d92a:	e758      	b.n	800d7de <_dtoa_r+0x73e>
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	1e5e      	subs	r6, r3, #1
 800d930:	9b08      	ldr	r3, [sp, #32]
 800d932:	42b3      	cmp	r3, r6
 800d934:	bfbf      	itttt	lt
 800d936:	9b08      	ldrlt	r3, [sp, #32]
 800d938:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d93a:	9608      	strlt	r6, [sp, #32]
 800d93c:	1af3      	sublt	r3, r6, r3
 800d93e:	bfb4      	ite	lt
 800d940:	18d2      	addlt	r2, r2, r3
 800d942:	1b9e      	subge	r6, r3, r6
 800d944:	9b04      	ldr	r3, [sp, #16]
 800d946:	bfbc      	itt	lt
 800d948:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d94a:	2600      	movlt	r6, #0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bfb7      	itett	lt
 800d950:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d954:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d958:	1a9d      	sublt	r5, r3, r2
 800d95a:	2300      	movlt	r3, #0
 800d95c:	e741      	b.n	800d7e2 <_dtoa_r+0x742>
 800d95e:	9e08      	ldr	r6, [sp, #32]
 800d960:	9d05      	ldr	r5, [sp, #20]
 800d962:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d964:	e748      	b.n	800d7f8 <_dtoa_r+0x758>
 800d966:	9a08      	ldr	r2, [sp, #32]
 800d968:	e770      	b.n	800d84c <_dtoa_r+0x7ac>
 800d96a:	9b07      	ldr	r3, [sp, #28]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	dc19      	bgt.n	800d9a4 <_dtoa_r+0x904>
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	b9bb      	cbnz	r3, 800d9a4 <_dtoa_r+0x904>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d97a:	b99b      	cbnz	r3, 800d9a4 <_dtoa_r+0x904>
 800d97c:	9b03      	ldr	r3, [sp, #12]
 800d97e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d982:	0d1b      	lsrs	r3, r3, #20
 800d984:	051b      	lsls	r3, r3, #20
 800d986:	b183      	cbz	r3, 800d9aa <_dtoa_r+0x90a>
 800d988:	9b05      	ldr	r3, [sp, #20]
 800d98a:	3301      	adds	r3, #1
 800d98c:	9305      	str	r3, [sp, #20]
 800d98e:	9b06      	ldr	r3, [sp, #24]
 800d990:	3301      	adds	r3, #1
 800d992:	9306      	str	r3, [sp, #24]
 800d994:	f04f 0801 	mov.w	r8, #1
 800d998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f47f af6f 	bne.w	800d87e <_dtoa_r+0x7de>
 800d9a0:	2001      	movs	r0, #1
 800d9a2:	e774      	b.n	800d88e <_dtoa_r+0x7ee>
 800d9a4:	f04f 0800 	mov.w	r8, #0
 800d9a8:	e7f6      	b.n	800d998 <_dtoa_r+0x8f8>
 800d9aa:	4698      	mov	r8, r3
 800d9ac:	e7f4      	b.n	800d998 <_dtoa_r+0x8f8>
 800d9ae:	d082      	beq.n	800d8b6 <_dtoa_r+0x816>
 800d9b0:	9a05      	ldr	r2, [sp, #20]
 800d9b2:	331c      	adds	r3, #28
 800d9b4:	441a      	add	r2, r3
 800d9b6:	9205      	str	r2, [sp, #20]
 800d9b8:	9a06      	ldr	r2, [sp, #24]
 800d9ba:	441a      	add	r2, r3
 800d9bc:	441d      	add	r5, r3
 800d9be:	9206      	str	r2, [sp, #24]
 800d9c0:	e779      	b.n	800d8b6 <_dtoa_r+0x816>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	e7f4      	b.n	800d9b0 <_dtoa_r+0x910>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	dc37      	bgt.n	800da3c <_dtoa_r+0x99c>
 800d9cc:	9b07      	ldr	r3, [sp, #28]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	dd34      	ble.n	800da3c <_dtoa_r+0x99c>
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	b963      	cbnz	r3, 800d9f4 <_dtoa_r+0x954>
 800d9da:	4631      	mov	r1, r6
 800d9dc:	2205      	movs	r2, #5
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 fab2 	bl	800df48 <__multadd>
 800d9e4:	4601      	mov	r1, r0
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	f000 fd11 	bl	800e410 <__mcmp>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f73f adbb 	bgt.w	800d56a <_dtoa_r+0x4ca>
 800d9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f6:	9d00      	ldr	r5, [sp, #0]
 800d9f8:	ea6f 0b03 	mvn.w	fp, r3
 800d9fc:	f04f 0800 	mov.w	r8, #0
 800da00:	4631      	mov	r1, r6
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fa7e 	bl	800df04 <_Bfree>
 800da08:	2f00      	cmp	r7, #0
 800da0a:	f43f aeab 	beq.w	800d764 <_dtoa_r+0x6c4>
 800da0e:	f1b8 0f00 	cmp.w	r8, #0
 800da12:	d005      	beq.n	800da20 <_dtoa_r+0x980>
 800da14:	45b8      	cmp	r8, r7
 800da16:	d003      	beq.n	800da20 <_dtoa_r+0x980>
 800da18:	4641      	mov	r1, r8
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fa72 	bl	800df04 <_Bfree>
 800da20:	4639      	mov	r1, r7
 800da22:	4620      	mov	r0, r4
 800da24:	f000 fa6e 	bl	800df04 <_Bfree>
 800da28:	e69c      	b.n	800d764 <_dtoa_r+0x6c4>
 800da2a:	2600      	movs	r6, #0
 800da2c:	4637      	mov	r7, r6
 800da2e:	e7e1      	b.n	800d9f4 <_dtoa_r+0x954>
 800da30:	46bb      	mov	fp, r7
 800da32:	4637      	mov	r7, r6
 800da34:	e599      	b.n	800d56a <_dtoa_r+0x4ca>
 800da36:	bf00      	nop
 800da38:	40240000 	.word	0x40240000
 800da3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f000 80c8 	beq.w	800dbd4 <_dtoa_r+0xb34>
 800da44:	9b04      	ldr	r3, [sp, #16]
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	2d00      	cmp	r5, #0
 800da4a:	dd05      	ble.n	800da58 <_dtoa_r+0x9b8>
 800da4c:	4639      	mov	r1, r7
 800da4e:	462a      	mov	r2, r5
 800da50:	4620      	mov	r0, r4
 800da52:	f000 fc71 	bl	800e338 <__lshift>
 800da56:	4607      	mov	r7, r0
 800da58:	f1b8 0f00 	cmp.w	r8, #0
 800da5c:	d05b      	beq.n	800db16 <_dtoa_r+0xa76>
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	4620      	mov	r0, r4
 800da62:	f000 fa0f 	bl	800de84 <_Balloc>
 800da66:	4605      	mov	r5, r0
 800da68:	b928      	cbnz	r0, 800da76 <_dtoa_r+0x9d6>
 800da6a:	4b83      	ldr	r3, [pc, #524]	; (800dc78 <_dtoa_r+0xbd8>)
 800da6c:	4602      	mov	r2, r0
 800da6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800da72:	f7ff bb2e 	b.w	800d0d2 <_dtoa_r+0x32>
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	3202      	adds	r2, #2
 800da7a:	0092      	lsls	r2, r2, #2
 800da7c:	f107 010c 	add.w	r1, r7, #12
 800da80:	300c      	adds	r0, #12
 800da82:	f7ff fa70 	bl	800cf66 <memcpy>
 800da86:	2201      	movs	r2, #1
 800da88:	4629      	mov	r1, r5
 800da8a:	4620      	mov	r0, r4
 800da8c:	f000 fc54 	bl	800e338 <__lshift>
 800da90:	9b00      	ldr	r3, [sp, #0]
 800da92:	3301      	adds	r3, #1
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da9a:	4413      	add	r3, r2
 800da9c:	9308      	str	r3, [sp, #32]
 800da9e:	9b02      	ldr	r3, [sp, #8]
 800daa0:	f003 0301 	and.w	r3, r3, #1
 800daa4:	46b8      	mov	r8, r7
 800daa6:	9306      	str	r3, [sp, #24]
 800daa8:	4607      	mov	r7, r0
 800daaa:	9b04      	ldr	r3, [sp, #16]
 800daac:	4631      	mov	r1, r6
 800daae:	3b01      	subs	r3, #1
 800dab0:	4650      	mov	r0, sl
 800dab2:	9301      	str	r3, [sp, #4]
 800dab4:	f7ff fa6c 	bl	800cf90 <quorem>
 800dab8:	4641      	mov	r1, r8
 800daba:	9002      	str	r0, [sp, #8]
 800dabc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dac0:	4650      	mov	r0, sl
 800dac2:	f000 fca5 	bl	800e410 <__mcmp>
 800dac6:	463a      	mov	r2, r7
 800dac8:	9005      	str	r0, [sp, #20]
 800daca:	4631      	mov	r1, r6
 800dacc:	4620      	mov	r0, r4
 800dace:	f000 fcbb 	bl	800e448 <__mdiff>
 800dad2:	68c2      	ldr	r2, [r0, #12]
 800dad4:	4605      	mov	r5, r0
 800dad6:	bb02      	cbnz	r2, 800db1a <_dtoa_r+0xa7a>
 800dad8:	4601      	mov	r1, r0
 800dada:	4650      	mov	r0, sl
 800dadc:	f000 fc98 	bl	800e410 <__mcmp>
 800dae0:	4602      	mov	r2, r0
 800dae2:	4629      	mov	r1, r5
 800dae4:	4620      	mov	r0, r4
 800dae6:	9209      	str	r2, [sp, #36]	; 0x24
 800dae8:	f000 fa0c 	bl	800df04 <_Bfree>
 800daec:	9b07      	ldr	r3, [sp, #28]
 800daee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daf0:	9d04      	ldr	r5, [sp, #16]
 800daf2:	ea43 0102 	orr.w	r1, r3, r2
 800daf6:	9b06      	ldr	r3, [sp, #24]
 800daf8:	4319      	orrs	r1, r3
 800dafa:	d110      	bne.n	800db1e <_dtoa_r+0xa7e>
 800dafc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db00:	d029      	beq.n	800db56 <_dtoa_r+0xab6>
 800db02:	9b05      	ldr	r3, [sp, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	dd02      	ble.n	800db0e <_dtoa_r+0xa6e>
 800db08:	9b02      	ldr	r3, [sp, #8]
 800db0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800db0e:	9b01      	ldr	r3, [sp, #4]
 800db10:	f883 9000 	strb.w	r9, [r3]
 800db14:	e774      	b.n	800da00 <_dtoa_r+0x960>
 800db16:	4638      	mov	r0, r7
 800db18:	e7ba      	b.n	800da90 <_dtoa_r+0x9f0>
 800db1a:	2201      	movs	r2, #1
 800db1c:	e7e1      	b.n	800dae2 <_dtoa_r+0xa42>
 800db1e:	9b05      	ldr	r3, [sp, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	db04      	blt.n	800db2e <_dtoa_r+0xa8e>
 800db24:	9907      	ldr	r1, [sp, #28]
 800db26:	430b      	orrs	r3, r1
 800db28:	9906      	ldr	r1, [sp, #24]
 800db2a:	430b      	orrs	r3, r1
 800db2c:	d120      	bne.n	800db70 <_dtoa_r+0xad0>
 800db2e:	2a00      	cmp	r2, #0
 800db30:	dded      	ble.n	800db0e <_dtoa_r+0xa6e>
 800db32:	4651      	mov	r1, sl
 800db34:	2201      	movs	r2, #1
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fbfe 	bl	800e338 <__lshift>
 800db3c:	4631      	mov	r1, r6
 800db3e:	4682      	mov	sl, r0
 800db40:	f000 fc66 	bl	800e410 <__mcmp>
 800db44:	2800      	cmp	r0, #0
 800db46:	dc03      	bgt.n	800db50 <_dtoa_r+0xab0>
 800db48:	d1e1      	bne.n	800db0e <_dtoa_r+0xa6e>
 800db4a:	f019 0f01 	tst.w	r9, #1
 800db4e:	d0de      	beq.n	800db0e <_dtoa_r+0xa6e>
 800db50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db54:	d1d8      	bne.n	800db08 <_dtoa_r+0xa68>
 800db56:	9a01      	ldr	r2, [sp, #4]
 800db58:	2339      	movs	r3, #57	; 0x39
 800db5a:	7013      	strb	r3, [r2, #0]
 800db5c:	462b      	mov	r3, r5
 800db5e:	461d      	mov	r5, r3
 800db60:	3b01      	subs	r3, #1
 800db62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800db66:	2a39      	cmp	r2, #57	; 0x39
 800db68:	d06c      	beq.n	800dc44 <_dtoa_r+0xba4>
 800db6a:	3201      	adds	r2, #1
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	e747      	b.n	800da00 <_dtoa_r+0x960>
 800db70:	2a00      	cmp	r2, #0
 800db72:	dd07      	ble.n	800db84 <_dtoa_r+0xae4>
 800db74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db78:	d0ed      	beq.n	800db56 <_dtoa_r+0xab6>
 800db7a:	9a01      	ldr	r2, [sp, #4]
 800db7c:	f109 0301 	add.w	r3, r9, #1
 800db80:	7013      	strb	r3, [r2, #0]
 800db82:	e73d      	b.n	800da00 <_dtoa_r+0x960>
 800db84:	9b04      	ldr	r3, [sp, #16]
 800db86:	9a08      	ldr	r2, [sp, #32]
 800db88:	f803 9c01 	strb.w	r9, [r3, #-1]
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d043      	beq.n	800dc18 <_dtoa_r+0xb78>
 800db90:	4651      	mov	r1, sl
 800db92:	2300      	movs	r3, #0
 800db94:	220a      	movs	r2, #10
 800db96:	4620      	mov	r0, r4
 800db98:	f000 f9d6 	bl	800df48 <__multadd>
 800db9c:	45b8      	cmp	r8, r7
 800db9e:	4682      	mov	sl, r0
 800dba0:	f04f 0300 	mov.w	r3, #0
 800dba4:	f04f 020a 	mov.w	r2, #10
 800dba8:	4641      	mov	r1, r8
 800dbaa:	4620      	mov	r0, r4
 800dbac:	d107      	bne.n	800dbbe <_dtoa_r+0xb1e>
 800dbae:	f000 f9cb 	bl	800df48 <__multadd>
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	9304      	str	r3, [sp, #16]
 800dbbc:	e775      	b.n	800daaa <_dtoa_r+0xa0a>
 800dbbe:	f000 f9c3 	bl	800df48 <__multadd>
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	220a      	movs	r2, #10
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 f9bc 	bl	800df48 <__multadd>
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	e7f0      	b.n	800dbb6 <_dtoa_r+0xb16>
 800dbd4:	9b04      	ldr	r3, [sp, #16]
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	9d00      	ldr	r5, [sp, #0]
 800dbda:	4631      	mov	r1, r6
 800dbdc:	4650      	mov	r0, sl
 800dbde:	f7ff f9d7 	bl	800cf90 <quorem>
 800dbe2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dbe6:	9b00      	ldr	r3, [sp, #0]
 800dbe8:	f805 9b01 	strb.w	r9, [r5], #1
 800dbec:	1aea      	subs	r2, r5, r3
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	dd07      	ble.n	800dc04 <_dtoa_r+0xb64>
 800dbf4:	4651      	mov	r1, sl
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	220a      	movs	r2, #10
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f000 f9a4 	bl	800df48 <__multadd>
 800dc00:	4682      	mov	sl, r0
 800dc02:	e7ea      	b.n	800dbda <_dtoa_r+0xb3a>
 800dc04:	9b01      	ldr	r3, [sp, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bfc8      	it	gt
 800dc0a:	461d      	movgt	r5, r3
 800dc0c:	9b00      	ldr	r3, [sp, #0]
 800dc0e:	bfd8      	it	le
 800dc10:	2501      	movle	r5, #1
 800dc12:	441d      	add	r5, r3
 800dc14:	f04f 0800 	mov.w	r8, #0
 800dc18:	4651      	mov	r1, sl
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 fb8b 	bl	800e338 <__lshift>
 800dc22:	4631      	mov	r1, r6
 800dc24:	4682      	mov	sl, r0
 800dc26:	f000 fbf3 	bl	800e410 <__mcmp>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	dc96      	bgt.n	800db5c <_dtoa_r+0xabc>
 800dc2e:	d102      	bne.n	800dc36 <_dtoa_r+0xb96>
 800dc30:	f019 0f01 	tst.w	r9, #1
 800dc34:	d192      	bne.n	800db5c <_dtoa_r+0xabc>
 800dc36:	462b      	mov	r3, r5
 800dc38:	461d      	mov	r5, r3
 800dc3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc3e:	2a30      	cmp	r2, #48	; 0x30
 800dc40:	d0fa      	beq.n	800dc38 <_dtoa_r+0xb98>
 800dc42:	e6dd      	b.n	800da00 <_dtoa_r+0x960>
 800dc44:	9a00      	ldr	r2, [sp, #0]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d189      	bne.n	800db5e <_dtoa_r+0xabe>
 800dc4a:	f10b 0b01 	add.w	fp, fp, #1
 800dc4e:	2331      	movs	r3, #49	; 0x31
 800dc50:	e796      	b.n	800db80 <_dtoa_r+0xae0>
 800dc52:	4b0a      	ldr	r3, [pc, #40]	; (800dc7c <_dtoa_r+0xbdc>)
 800dc54:	f7ff ba99 	b.w	800d18a <_dtoa_r+0xea>
 800dc58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f47f aa6d 	bne.w	800d13a <_dtoa_r+0x9a>
 800dc60:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <_dtoa_r+0xbe0>)
 800dc62:	f7ff ba92 	b.w	800d18a <_dtoa_r+0xea>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	dcb5      	bgt.n	800dbd8 <_dtoa_r+0xb38>
 800dc6c:	9b07      	ldr	r3, [sp, #28]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	f73f aeb1 	bgt.w	800d9d6 <_dtoa_r+0x936>
 800dc74:	e7b0      	b.n	800dbd8 <_dtoa_r+0xb38>
 800dc76:	bf00      	nop
 800dc78:	08010901 	.word	0x08010901
 800dc7c:	0801085c 	.word	0x0801085c
 800dc80:	08010885 	.word	0x08010885

0800dc84 <_free_r>:
 800dc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc86:	2900      	cmp	r1, #0
 800dc88:	d044      	beq.n	800dd14 <_free_r+0x90>
 800dc8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc8e:	9001      	str	r0, [sp, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f1a1 0404 	sub.w	r4, r1, #4
 800dc96:	bfb8      	it	lt
 800dc98:	18e4      	addlt	r4, r4, r3
 800dc9a:	f000 f8e7 	bl	800de6c <__malloc_lock>
 800dc9e:	4a1e      	ldr	r2, [pc, #120]	; (800dd18 <_free_r+0x94>)
 800dca0:	9801      	ldr	r0, [sp, #4]
 800dca2:	6813      	ldr	r3, [r2, #0]
 800dca4:	b933      	cbnz	r3, 800dcb4 <_free_r+0x30>
 800dca6:	6063      	str	r3, [r4, #4]
 800dca8:	6014      	str	r4, [r2, #0]
 800dcaa:	b003      	add	sp, #12
 800dcac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcb0:	f000 b8e2 	b.w	800de78 <__malloc_unlock>
 800dcb4:	42a3      	cmp	r3, r4
 800dcb6:	d908      	bls.n	800dcca <_free_r+0x46>
 800dcb8:	6825      	ldr	r5, [r4, #0]
 800dcba:	1961      	adds	r1, r4, r5
 800dcbc:	428b      	cmp	r3, r1
 800dcbe:	bf01      	itttt	eq
 800dcc0:	6819      	ldreq	r1, [r3, #0]
 800dcc2:	685b      	ldreq	r3, [r3, #4]
 800dcc4:	1949      	addeq	r1, r1, r5
 800dcc6:	6021      	streq	r1, [r4, #0]
 800dcc8:	e7ed      	b.n	800dca6 <_free_r+0x22>
 800dcca:	461a      	mov	r2, r3
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	b10b      	cbz	r3, 800dcd4 <_free_r+0x50>
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	d9fa      	bls.n	800dcca <_free_r+0x46>
 800dcd4:	6811      	ldr	r1, [r2, #0]
 800dcd6:	1855      	adds	r5, r2, r1
 800dcd8:	42a5      	cmp	r5, r4
 800dcda:	d10b      	bne.n	800dcf4 <_free_r+0x70>
 800dcdc:	6824      	ldr	r4, [r4, #0]
 800dcde:	4421      	add	r1, r4
 800dce0:	1854      	adds	r4, r2, r1
 800dce2:	42a3      	cmp	r3, r4
 800dce4:	6011      	str	r1, [r2, #0]
 800dce6:	d1e0      	bne.n	800dcaa <_free_r+0x26>
 800dce8:	681c      	ldr	r4, [r3, #0]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	6053      	str	r3, [r2, #4]
 800dcee:	440c      	add	r4, r1
 800dcf0:	6014      	str	r4, [r2, #0]
 800dcf2:	e7da      	b.n	800dcaa <_free_r+0x26>
 800dcf4:	d902      	bls.n	800dcfc <_free_r+0x78>
 800dcf6:	230c      	movs	r3, #12
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	e7d6      	b.n	800dcaa <_free_r+0x26>
 800dcfc:	6825      	ldr	r5, [r4, #0]
 800dcfe:	1961      	adds	r1, r4, r5
 800dd00:	428b      	cmp	r3, r1
 800dd02:	bf04      	itt	eq
 800dd04:	6819      	ldreq	r1, [r3, #0]
 800dd06:	685b      	ldreq	r3, [r3, #4]
 800dd08:	6063      	str	r3, [r4, #4]
 800dd0a:	bf04      	itt	eq
 800dd0c:	1949      	addeq	r1, r1, r5
 800dd0e:	6021      	streq	r1, [r4, #0]
 800dd10:	6054      	str	r4, [r2, #4]
 800dd12:	e7ca      	b.n	800dcaa <_free_r+0x26>
 800dd14:	b003      	add	sp, #12
 800dd16:	bd30      	pop	{r4, r5, pc}
 800dd18:	2000d6f4 	.word	0x2000d6f4

0800dd1c <malloc>:
 800dd1c:	4b02      	ldr	r3, [pc, #8]	; (800dd28 <malloc+0xc>)
 800dd1e:	4601      	mov	r1, r0
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	f000 b823 	b.w	800dd6c <_malloc_r>
 800dd26:	bf00      	nop
 800dd28:	20000068 	.word	0x20000068

0800dd2c <sbrk_aligned>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	4e0e      	ldr	r6, [pc, #56]	; (800dd68 <sbrk_aligned+0x3c>)
 800dd30:	460c      	mov	r4, r1
 800dd32:	6831      	ldr	r1, [r6, #0]
 800dd34:	4605      	mov	r5, r0
 800dd36:	b911      	cbnz	r1, 800dd3e <sbrk_aligned+0x12>
 800dd38:	f001 fe1a 	bl	800f970 <_sbrk_r>
 800dd3c:	6030      	str	r0, [r6, #0]
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4628      	mov	r0, r5
 800dd42:	f001 fe15 	bl	800f970 <_sbrk_r>
 800dd46:	1c43      	adds	r3, r0, #1
 800dd48:	d00a      	beq.n	800dd60 <sbrk_aligned+0x34>
 800dd4a:	1cc4      	adds	r4, r0, #3
 800dd4c:	f024 0403 	bic.w	r4, r4, #3
 800dd50:	42a0      	cmp	r0, r4
 800dd52:	d007      	beq.n	800dd64 <sbrk_aligned+0x38>
 800dd54:	1a21      	subs	r1, r4, r0
 800dd56:	4628      	mov	r0, r5
 800dd58:	f001 fe0a 	bl	800f970 <_sbrk_r>
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d101      	bne.n	800dd64 <sbrk_aligned+0x38>
 800dd60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dd64:	4620      	mov	r0, r4
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
 800dd68:	2000d6f8 	.word	0x2000d6f8

0800dd6c <_malloc_r>:
 800dd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd70:	1ccd      	adds	r5, r1, #3
 800dd72:	f025 0503 	bic.w	r5, r5, #3
 800dd76:	3508      	adds	r5, #8
 800dd78:	2d0c      	cmp	r5, #12
 800dd7a:	bf38      	it	cc
 800dd7c:	250c      	movcc	r5, #12
 800dd7e:	2d00      	cmp	r5, #0
 800dd80:	4607      	mov	r7, r0
 800dd82:	db01      	blt.n	800dd88 <_malloc_r+0x1c>
 800dd84:	42a9      	cmp	r1, r5
 800dd86:	d905      	bls.n	800dd94 <_malloc_r+0x28>
 800dd88:	230c      	movs	r3, #12
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	4630      	mov	r0, r6
 800dd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de68 <_malloc_r+0xfc>
 800dd98:	f000 f868 	bl	800de6c <__malloc_lock>
 800dd9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dda0:	461c      	mov	r4, r3
 800dda2:	bb5c      	cbnz	r4, 800ddfc <_malloc_r+0x90>
 800dda4:	4629      	mov	r1, r5
 800dda6:	4638      	mov	r0, r7
 800dda8:	f7ff ffc0 	bl	800dd2c <sbrk_aligned>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	4604      	mov	r4, r0
 800ddb0:	d155      	bne.n	800de5e <_malloc_r+0xf2>
 800ddb2:	f8d8 4000 	ldr.w	r4, [r8]
 800ddb6:	4626      	mov	r6, r4
 800ddb8:	2e00      	cmp	r6, #0
 800ddba:	d145      	bne.n	800de48 <_malloc_r+0xdc>
 800ddbc:	2c00      	cmp	r4, #0
 800ddbe:	d048      	beq.n	800de52 <_malloc_r+0xe6>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	eb04 0903 	add.w	r9, r4, r3
 800ddca:	f001 fdd1 	bl	800f970 <_sbrk_r>
 800ddce:	4581      	cmp	r9, r0
 800ddd0:	d13f      	bne.n	800de52 <_malloc_r+0xe6>
 800ddd2:	6821      	ldr	r1, [r4, #0]
 800ddd4:	1a6d      	subs	r5, r5, r1
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ffa7 	bl	800dd2c <sbrk_aligned>
 800ddde:	3001      	adds	r0, #1
 800dde0:	d037      	beq.n	800de52 <_malloc_r+0xe6>
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	442b      	add	r3, r5
 800dde6:	6023      	str	r3, [r4, #0]
 800dde8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d038      	beq.n	800de62 <_malloc_r+0xf6>
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	42a2      	cmp	r2, r4
 800ddf4:	d12b      	bne.n	800de4e <_malloc_r+0xe2>
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	605a      	str	r2, [r3, #4]
 800ddfa:	e00f      	b.n	800de1c <_malloc_r+0xb0>
 800ddfc:	6822      	ldr	r2, [r4, #0]
 800ddfe:	1b52      	subs	r2, r2, r5
 800de00:	d41f      	bmi.n	800de42 <_malloc_r+0xd6>
 800de02:	2a0b      	cmp	r2, #11
 800de04:	d917      	bls.n	800de36 <_malloc_r+0xca>
 800de06:	1961      	adds	r1, r4, r5
 800de08:	42a3      	cmp	r3, r4
 800de0a:	6025      	str	r5, [r4, #0]
 800de0c:	bf18      	it	ne
 800de0e:	6059      	strne	r1, [r3, #4]
 800de10:	6863      	ldr	r3, [r4, #4]
 800de12:	bf08      	it	eq
 800de14:	f8c8 1000 	streq.w	r1, [r8]
 800de18:	5162      	str	r2, [r4, r5]
 800de1a:	604b      	str	r3, [r1, #4]
 800de1c:	4638      	mov	r0, r7
 800de1e:	f104 060b 	add.w	r6, r4, #11
 800de22:	f000 f829 	bl	800de78 <__malloc_unlock>
 800de26:	f026 0607 	bic.w	r6, r6, #7
 800de2a:	1d23      	adds	r3, r4, #4
 800de2c:	1af2      	subs	r2, r6, r3
 800de2e:	d0ae      	beq.n	800dd8e <_malloc_r+0x22>
 800de30:	1b9b      	subs	r3, r3, r6
 800de32:	50a3      	str	r3, [r4, r2]
 800de34:	e7ab      	b.n	800dd8e <_malloc_r+0x22>
 800de36:	42a3      	cmp	r3, r4
 800de38:	6862      	ldr	r2, [r4, #4]
 800de3a:	d1dd      	bne.n	800ddf8 <_malloc_r+0x8c>
 800de3c:	f8c8 2000 	str.w	r2, [r8]
 800de40:	e7ec      	b.n	800de1c <_malloc_r+0xb0>
 800de42:	4623      	mov	r3, r4
 800de44:	6864      	ldr	r4, [r4, #4]
 800de46:	e7ac      	b.n	800dda2 <_malloc_r+0x36>
 800de48:	4634      	mov	r4, r6
 800de4a:	6876      	ldr	r6, [r6, #4]
 800de4c:	e7b4      	b.n	800ddb8 <_malloc_r+0x4c>
 800de4e:	4613      	mov	r3, r2
 800de50:	e7cc      	b.n	800ddec <_malloc_r+0x80>
 800de52:	230c      	movs	r3, #12
 800de54:	603b      	str	r3, [r7, #0]
 800de56:	4638      	mov	r0, r7
 800de58:	f000 f80e 	bl	800de78 <__malloc_unlock>
 800de5c:	e797      	b.n	800dd8e <_malloc_r+0x22>
 800de5e:	6025      	str	r5, [r4, #0]
 800de60:	e7dc      	b.n	800de1c <_malloc_r+0xb0>
 800de62:	605b      	str	r3, [r3, #4]
 800de64:	deff      	udf	#255	; 0xff
 800de66:	bf00      	nop
 800de68:	2000d6f4 	.word	0x2000d6f4

0800de6c <__malloc_lock>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__malloc_lock+0x8>)
 800de6e:	f7ff b878 	b.w	800cf62 <__retarget_lock_acquire_recursive>
 800de72:	bf00      	nop
 800de74:	2000d6f0 	.word	0x2000d6f0

0800de78 <__malloc_unlock>:
 800de78:	4801      	ldr	r0, [pc, #4]	; (800de80 <__malloc_unlock+0x8>)
 800de7a:	f7ff b873 	b.w	800cf64 <__retarget_lock_release_recursive>
 800de7e:	bf00      	nop
 800de80:	2000d6f0 	.word	0x2000d6f0

0800de84 <_Balloc>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	69c6      	ldr	r6, [r0, #28]
 800de88:	4604      	mov	r4, r0
 800de8a:	460d      	mov	r5, r1
 800de8c:	b976      	cbnz	r6, 800deac <_Balloc+0x28>
 800de8e:	2010      	movs	r0, #16
 800de90:	f7ff ff44 	bl	800dd1c <malloc>
 800de94:	4602      	mov	r2, r0
 800de96:	61e0      	str	r0, [r4, #28]
 800de98:	b920      	cbnz	r0, 800dea4 <_Balloc+0x20>
 800de9a:	4b18      	ldr	r3, [pc, #96]	; (800defc <_Balloc+0x78>)
 800de9c:	4818      	ldr	r0, [pc, #96]	; (800df00 <_Balloc+0x7c>)
 800de9e:	216b      	movs	r1, #107	; 0x6b
 800dea0:	f001 fd7e 	bl	800f9a0 <__assert_func>
 800dea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dea8:	6006      	str	r6, [r0, #0]
 800deaa:	60c6      	str	r6, [r0, #12]
 800deac:	69e6      	ldr	r6, [r4, #28]
 800deae:	68f3      	ldr	r3, [r6, #12]
 800deb0:	b183      	cbz	r3, 800ded4 <_Balloc+0x50>
 800deb2:	69e3      	ldr	r3, [r4, #28]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800deba:	b9b8      	cbnz	r0, 800deec <_Balloc+0x68>
 800debc:	2101      	movs	r1, #1
 800debe:	fa01 f605 	lsl.w	r6, r1, r5
 800dec2:	1d72      	adds	r2, r6, #5
 800dec4:	0092      	lsls	r2, r2, #2
 800dec6:	4620      	mov	r0, r4
 800dec8:	f001 fd88 	bl	800f9dc <_calloc_r>
 800decc:	b160      	cbz	r0, 800dee8 <_Balloc+0x64>
 800dece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ded2:	e00e      	b.n	800def2 <_Balloc+0x6e>
 800ded4:	2221      	movs	r2, #33	; 0x21
 800ded6:	2104      	movs	r1, #4
 800ded8:	4620      	mov	r0, r4
 800deda:	f001 fd7f 	bl	800f9dc <_calloc_r>
 800dede:	69e3      	ldr	r3, [r4, #28]
 800dee0:	60f0      	str	r0, [r6, #12]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1e4      	bne.n	800deb2 <_Balloc+0x2e>
 800dee8:	2000      	movs	r0, #0
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	6802      	ldr	r2, [r0, #0]
 800deee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800def2:	2300      	movs	r3, #0
 800def4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800def8:	e7f7      	b.n	800deea <_Balloc+0x66>
 800defa:	bf00      	nop
 800defc:	08010892 	.word	0x08010892
 800df00:	08010912 	.word	0x08010912

0800df04 <_Bfree>:
 800df04:	b570      	push	{r4, r5, r6, lr}
 800df06:	69c6      	ldr	r6, [r0, #28]
 800df08:	4605      	mov	r5, r0
 800df0a:	460c      	mov	r4, r1
 800df0c:	b976      	cbnz	r6, 800df2c <_Bfree+0x28>
 800df0e:	2010      	movs	r0, #16
 800df10:	f7ff ff04 	bl	800dd1c <malloc>
 800df14:	4602      	mov	r2, r0
 800df16:	61e8      	str	r0, [r5, #28]
 800df18:	b920      	cbnz	r0, 800df24 <_Bfree+0x20>
 800df1a:	4b09      	ldr	r3, [pc, #36]	; (800df40 <_Bfree+0x3c>)
 800df1c:	4809      	ldr	r0, [pc, #36]	; (800df44 <_Bfree+0x40>)
 800df1e:	218f      	movs	r1, #143	; 0x8f
 800df20:	f001 fd3e 	bl	800f9a0 <__assert_func>
 800df24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df28:	6006      	str	r6, [r0, #0]
 800df2a:	60c6      	str	r6, [r0, #12]
 800df2c:	b13c      	cbz	r4, 800df3e <_Bfree+0x3a>
 800df2e:	69eb      	ldr	r3, [r5, #28]
 800df30:	6862      	ldr	r2, [r4, #4]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df38:	6021      	str	r1, [r4, #0]
 800df3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	08010892 	.word	0x08010892
 800df44:	08010912 	.word	0x08010912

0800df48 <__multadd>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	690d      	ldr	r5, [r1, #16]
 800df4e:	4607      	mov	r7, r0
 800df50:	460c      	mov	r4, r1
 800df52:	461e      	mov	r6, r3
 800df54:	f101 0c14 	add.w	ip, r1, #20
 800df58:	2000      	movs	r0, #0
 800df5a:	f8dc 3000 	ldr.w	r3, [ip]
 800df5e:	b299      	uxth	r1, r3
 800df60:	fb02 6101 	mla	r1, r2, r1, r6
 800df64:	0c1e      	lsrs	r6, r3, #16
 800df66:	0c0b      	lsrs	r3, r1, #16
 800df68:	fb02 3306 	mla	r3, r2, r6, r3
 800df6c:	b289      	uxth	r1, r1
 800df6e:	3001      	adds	r0, #1
 800df70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df74:	4285      	cmp	r5, r0
 800df76:	f84c 1b04 	str.w	r1, [ip], #4
 800df7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df7e:	dcec      	bgt.n	800df5a <__multadd+0x12>
 800df80:	b30e      	cbz	r6, 800dfc6 <__multadd+0x7e>
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	42ab      	cmp	r3, r5
 800df86:	dc19      	bgt.n	800dfbc <__multadd+0x74>
 800df88:	6861      	ldr	r1, [r4, #4]
 800df8a:	4638      	mov	r0, r7
 800df8c:	3101      	adds	r1, #1
 800df8e:	f7ff ff79 	bl	800de84 <_Balloc>
 800df92:	4680      	mov	r8, r0
 800df94:	b928      	cbnz	r0, 800dfa2 <__multadd+0x5a>
 800df96:	4602      	mov	r2, r0
 800df98:	4b0c      	ldr	r3, [pc, #48]	; (800dfcc <__multadd+0x84>)
 800df9a:	480d      	ldr	r0, [pc, #52]	; (800dfd0 <__multadd+0x88>)
 800df9c:	21ba      	movs	r1, #186	; 0xba
 800df9e:	f001 fcff 	bl	800f9a0 <__assert_func>
 800dfa2:	6922      	ldr	r2, [r4, #16]
 800dfa4:	3202      	adds	r2, #2
 800dfa6:	f104 010c 	add.w	r1, r4, #12
 800dfaa:	0092      	lsls	r2, r2, #2
 800dfac:	300c      	adds	r0, #12
 800dfae:	f7fe ffda 	bl	800cf66 <memcpy>
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f7ff ffa5 	bl	800df04 <_Bfree>
 800dfba:	4644      	mov	r4, r8
 800dfbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfc0:	3501      	adds	r5, #1
 800dfc2:	615e      	str	r6, [r3, #20]
 800dfc4:	6125      	str	r5, [r4, #16]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	08010901 	.word	0x08010901
 800dfd0:	08010912 	.word	0x08010912

0800dfd4 <__s2b>:
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	460c      	mov	r4, r1
 800dfda:	4615      	mov	r5, r2
 800dfdc:	461f      	mov	r7, r3
 800dfde:	2209      	movs	r2, #9
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfe8:	2100      	movs	r1, #0
 800dfea:	2201      	movs	r2, #1
 800dfec:	429a      	cmp	r2, r3
 800dfee:	db09      	blt.n	800e004 <__s2b+0x30>
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7ff ff47 	bl	800de84 <_Balloc>
 800dff6:	b940      	cbnz	r0, 800e00a <__s2b+0x36>
 800dff8:	4602      	mov	r2, r0
 800dffa:	4b19      	ldr	r3, [pc, #100]	; (800e060 <__s2b+0x8c>)
 800dffc:	4819      	ldr	r0, [pc, #100]	; (800e064 <__s2b+0x90>)
 800dffe:	21d3      	movs	r1, #211	; 0xd3
 800e000:	f001 fcce 	bl	800f9a0 <__assert_func>
 800e004:	0052      	lsls	r2, r2, #1
 800e006:	3101      	adds	r1, #1
 800e008:	e7f0      	b.n	800dfec <__s2b+0x18>
 800e00a:	9b08      	ldr	r3, [sp, #32]
 800e00c:	6143      	str	r3, [r0, #20]
 800e00e:	2d09      	cmp	r5, #9
 800e010:	f04f 0301 	mov.w	r3, #1
 800e014:	6103      	str	r3, [r0, #16]
 800e016:	dd16      	ble.n	800e046 <__s2b+0x72>
 800e018:	f104 0909 	add.w	r9, r4, #9
 800e01c:	46c8      	mov	r8, r9
 800e01e:	442c      	add	r4, r5
 800e020:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e024:	4601      	mov	r1, r0
 800e026:	3b30      	subs	r3, #48	; 0x30
 800e028:	220a      	movs	r2, #10
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7ff ff8c 	bl	800df48 <__multadd>
 800e030:	45a0      	cmp	r8, r4
 800e032:	d1f5      	bne.n	800e020 <__s2b+0x4c>
 800e034:	f1a5 0408 	sub.w	r4, r5, #8
 800e038:	444c      	add	r4, r9
 800e03a:	1b2d      	subs	r5, r5, r4
 800e03c:	1963      	adds	r3, r4, r5
 800e03e:	42bb      	cmp	r3, r7
 800e040:	db04      	blt.n	800e04c <__s2b+0x78>
 800e042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e046:	340a      	adds	r4, #10
 800e048:	2509      	movs	r5, #9
 800e04a:	e7f6      	b.n	800e03a <__s2b+0x66>
 800e04c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e050:	4601      	mov	r1, r0
 800e052:	3b30      	subs	r3, #48	; 0x30
 800e054:	220a      	movs	r2, #10
 800e056:	4630      	mov	r0, r6
 800e058:	f7ff ff76 	bl	800df48 <__multadd>
 800e05c:	e7ee      	b.n	800e03c <__s2b+0x68>
 800e05e:	bf00      	nop
 800e060:	08010901 	.word	0x08010901
 800e064:	08010912 	.word	0x08010912

0800e068 <__hi0bits>:
 800e068:	0c03      	lsrs	r3, r0, #16
 800e06a:	041b      	lsls	r3, r3, #16
 800e06c:	b9d3      	cbnz	r3, 800e0a4 <__hi0bits+0x3c>
 800e06e:	0400      	lsls	r0, r0, #16
 800e070:	2310      	movs	r3, #16
 800e072:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e076:	bf04      	itt	eq
 800e078:	0200      	lsleq	r0, r0, #8
 800e07a:	3308      	addeq	r3, #8
 800e07c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e080:	bf04      	itt	eq
 800e082:	0100      	lsleq	r0, r0, #4
 800e084:	3304      	addeq	r3, #4
 800e086:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e08a:	bf04      	itt	eq
 800e08c:	0080      	lsleq	r0, r0, #2
 800e08e:	3302      	addeq	r3, #2
 800e090:	2800      	cmp	r0, #0
 800e092:	db05      	blt.n	800e0a0 <__hi0bits+0x38>
 800e094:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e098:	f103 0301 	add.w	r3, r3, #1
 800e09c:	bf08      	it	eq
 800e09e:	2320      	moveq	r3, #32
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	4770      	bx	lr
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e7e4      	b.n	800e072 <__hi0bits+0xa>

0800e0a8 <__lo0bits>:
 800e0a8:	6803      	ldr	r3, [r0, #0]
 800e0aa:	f013 0207 	ands.w	r2, r3, #7
 800e0ae:	d00c      	beq.n	800e0ca <__lo0bits+0x22>
 800e0b0:	07d9      	lsls	r1, r3, #31
 800e0b2:	d422      	bmi.n	800e0fa <__lo0bits+0x52>
 800e0b4:	079a      	lsls	r2, r3, #30
 800e0b6:	bf49      	itett	mi
 800e0b8:	085b      	lsrmi	r3, r3, #1
 800e0ba:	089b      	lsrpl	r3, r3, #2
 800e0bc:	6003      	strmi	r3, [r0, #0]
 800e0be:	2201      	movmi	r2, #1
 800e0c0:	bf5c      	itt	pl
 800e0c2:	6003      	strpl	r3, [r0, #0]
 800e0c4:	2202      	movpl	r2, #2
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	4770      	bx	lr
 800e0ca:	b299      	uxth	r1, r3
 800e0cc:	b909      	cbnz	r1, 800e0d2 <__lo0bits+0x2a>
 800e0ce:	0c1b      	lsrs	r3, r3, #16
 800e0d0:	2210      	movs	r2, #16
 800e0d2:	b2d9      	uxtb	r1, r3
 800e0d4:	b909      	cbnz	r1, 800e0da <__lo0bits+0x32>
 800e0d6:	3208      	adds	r2, #8
 800e0d8:	0a1b      	lsrs	r3, r3, #8
 800e0da:	0719      	lsls	r1, r3, #28
 800e0dc:	bf04      	itt	eq
 800e0de:	091b      	lsreq	r3, r3, #4
 800e0e0:	3204      	addeq	r2, #4
 800e0e2:	0799      	lsls	r1, r3, #30
 800e0e4:	bf04      	itt	eq
 800e0e6:	089b      	lsreq	r3, r3, #2
 800e0e8:	3202      	addeq	r2, #2
 800e0ea:	07d9      	lsls	r1, r3, #31
 800e0ec:	d403      	bmi.n	800e0f6 <__lo0bits+0x4e>
 800e0ee:	085b      	lsrs	r3, r3, #1
 800e0f0:	f102 0201 	add.w	r2, r2, #1
 800e0f4:	d003      	beq.n	800e0fe <__lo0bits+0x56>
 800e0f6:	6003      	str	r3, [r0, #0]
 800e0f8:	e7e5      	b.n	800e0c6 <__lo0bits+0x1e>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	e7e3      	b.n	800e0c6 <__lo0bits+0x1e>
 800e0fe:	2220      	movs	r2, #32
 800e100:	e7e1      	b.n	800e0c6 <__lo0bits+0x1e>
	...

0800e104 <__i2b>:
 800e104:	b510      	push	{r4, lr}
 800e106:	460c      	mov	r4, r1
 800e108:	2101      	movs	r1, #1
 800e10a:	f7ff febb 	bl	800de84 <_Balloc>
 800e10e:	4602      	mov	r2, r0
 800e110:	b928      	cbnz	r0, 800e11e <__i2b+0x1a>
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <__i2b+0x24>)
 800e114:	4805      	ldr	r0, [pc, #20]	; (800e12c <__i2b+0x28>)
 800e116:	f240 1145 	movw	r1, #325	; 0x145
 800e11a:	f001 fc41 	bl	800f9a0 <__assert_func>
 800e11e:	2301      	movs	r3, #1
 800e120:	6144      	str	r4, [r0, #20]
 800e122:	6103      	str	r3, [r0, #16]
 800e124:	bd10      	pop	{r4, pc}
 800e126:	bf00      	nop
 800e128:	08010901 	.word	0x08010901
 800e12c:	08010912 	.word	0x08010912

0800e130 <__multiply>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4691      	mov	r9, r2
 800e136:	690a      	ldr	r2, [r1, #16]
 800e138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	bfb8      	it	lt
 800e140:	460b      	movlt	r3, r1
 800e142:	460c      	mov	r4, r1
 800e144:	bfbc      	itt	lt
 800e146:	464c      	movlt	r4, r9
 800e148:	4699      	movlt	r9, r3
 800e14a:	6927      	ldr	r7, [r4, #16]
 800e14c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	6861      	ldr	r1, [r4, #4]
 800e154:	eb07 060a 	add.w	r6, r7, sl
 800e158:	42b3      	cmp	r3, r6
 800e15a:	b085      	sub	sp, #20
 800e15c:	bfb8      	it	lt
 800e15e:	3101      	addlt	r1, #1
 800e160:	f7ff fe90 	bl	800de84 <_Balloc>
 800e164:	b930      	cbnz	r0, 800e174 <__multiply+0x44>
 800e166:	4602      	mov	r2, r0
 800e168:	4b44      	ldr	r3, [pc, #272]	; (800e27c <__multiply+0x14c>)
 800e16a:	4845      	ldr	r0, [pc, #276]	; (800e280 <__multiply+0x150>)
 800e16c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e170:	f001 fc16 	bl	800f9a0 <__assert_func>
 800e174:	f100 0514 	add.w	r5, r0, #20
 800e178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e17c:	462b      	mov	r3, r5
 800e17e:	2200      	movs	r2, #0
 800e180:	4543      	cmp	r3, r8
 800e182:	d321      	bcc.n	800e1c8 <__multiply+0x98>
 800e184:	f104 0314 	add.w	r3, r4, #20
 800e188:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e18c:	f109 0314 	add.w	r3, r9, #20
 800e190:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e194:	9202      	str	r2, [sp, #8]
 800e196:	1b3a      	subs	r2, r7, r4
 800e198:	3a15      	subs	r2, #21
 800e19a:	f022 0203 	bic.w	r2, r2, #3
 800e19e:	3204      	adds	r2, #4
 800e1a0:	f104 0115 	add.w	r1, r4, #21
 800e1a4:	428f      	cmp	r7, r1
 800e1a6:	bf38      	it	cc
 800e1a8:	2204      	movcc	r2, #4
 800e1aa:	9201      	str	r2, [sp, #4]
 800e1ac:	9a02      	ldr	r2, [sp, #8]
 800e1ae:	9303      	str	r3, [sp, #12]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d80c      	bhi.n	800e1ce <__multiply+0x9e>
 800e1b4:	2e00      	cmp	r6, #0
 800e1b6:	dd03      	ble.n	800e1c0 <__multiply+0x90>
 800e1b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d05b      	beq.n	800e278 <__multiply+0x148>
 800e1c0:	6106      	str	r6, [r0, #16]
 800e1c2:	b005      	add	sp, #20
 800e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c8:	f843 2b04 	str.w	r2, [r3], #4
 800e1cc:	e7d8      	b.n	800e180 <__multiply+0x50>
 800e1ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800e1d2:	f1ba 0f00 	cmp.w	sl, #0
 800e1d6:	d024      	beq.n	800e222 <__multiply+0xf2>
 800e1d8:	f104 0e14 	add.w	lr, r4, #20
 800e1dc:	46a9      	mov	r9, r5
 800e1de:	f04f 0c00 	mov.w	ip, #0
 800e1e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e1e6:	f8d9 1000 	ldr.w	r1, [r9]
 800e1ea:	fa1f fb82 	uxth.w	fp, r2
 800e1ee:	b289      	uxth	r1, r1
 800e1f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e1f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e1f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e1fc:	4461      	add	r1, ip
 800e1fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e202:	fb0a c20b 	mla	r2, sl, fp, ip
 800e206:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e20a:	b289      	uxth	r1, r1
 800e20c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e210:	4577      	cmp	r7, lr
 800e212:	f849 1b04 	str.w	r1, [r9], #4
 800e216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e21a:	d8e2      	bhi.n	800e1e2 <__multiply+0xb2>
 800e21c:	9a01      	ldr	r2, [sp, #4]
 800e21e:	f845 c002 	str.w	ip, [r5, r2]
 800e222:	9a03      	ldr	r2, [sp, #12]
 800e224:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e228:	3304      	adds	r3, #4
 800e22a:	f1b9 0f00 	cmp.w	r9, #0
 800e22e:	d021      	beq.n	800e274 <__multiply+0x144>
 800e230:	6829      	ldr	r1, [r5, #0]
 800e232:	f104 0c14 	add.w	ip, r4, #20
 800e236:	46ae      	mov	lr, r5
 800e238:	f04f 0a00 	mov.w	sl, #0
 800e23c:	f8bc b000 	ldrh.w	fp, [ip]
 800e240:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e244:	fb09 220b 	mla	r2, r9, fp, r2
 800e248:	4452      	add	r2, sl
 800e24a:	b289      	uxth	r1, r1
 800e24c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e250:	f84e 1b04 	str.w	r1, [lr], #4
 800e254:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e258:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e25c:	f8be 1000 	ldrh.w	r1, [lr]
 800e260:	fb09 110a 	mla	r1, r9, sl, r1
 800e264:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e268:	4567      	cmp	r7, ip
 800e26a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e26e:	d8e5      	bhi.n	800e23c <__multiply+0x10c>
 800e270:	9a01      	ldr	r2, [sp, #4]
 800e272:	50a9      	str	r1, [r5, r2]
 800e274:	3504      	adds	r5, #4
 800e276:	e799      	b.n	800e1ac <__multiply+0x7c>
 800e278:	3e01      	subs	r6, #1
 800e27a:	e79b      	b.n	800e1b4 <__multiply+0x84>
 800e27c:	08010901 	.word	0x08010901
 800e280:	08010912 	.word	0x08010912

0800e284 <__pow5mult>:
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e288:	4615      	mov	r5, r2
 800e28a:	f012 0203 	ands.w	r2, r2, #3
 800e28e:	4606      	mov	r6, r0
 800e290:	460f      	mov	r7, r1
 800e292:	d007      	beq.n	800e2a4 <__pow5mult+0x20>
 800e294:	4c25      	ldr	r4, [pc, #148]	; (800e32c <__pow5mult+0xa8>)
 800e296:	3a01      	subs	r2, #1
 800e298:	2300      	movs	r3, #0
 800e29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e29e:	f7ff fe53 	bl	800df48 <__multadd>
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	10ad      	asrs	r5, r5, #2
 800e2a6:	d03d      	beq.n	800e324 <__pow5mult+0xa0>
 800e2a8:	69f4      	ldr	r4, [r6, #28]
 800e2aa:	b97c      	cbnz	r4, 800e2cc <__pow5mult+0x48>
 800e2ac:	2010      	movs	r0, #16
 800e2ae:	f7ff fd35 	bl	800dd1c <malloc>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	61f0      	str	r0, [r6, #28]
 800e2b6:	b928      	cbnz	r0, 800e2c4 <__pow5mult+0x40>
 800e2b8:	4b1d      	ldr	r3, [pc, #116]	; (800e330 <__pow5mult+0xac>)
 800e2ba:	481e      	ldr	r0, [pc, #120]	; (800e334 <__pow5mult+0xb0>)
 800e2bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e2c0:	f001 fb6e 	bl	800f9a0 <__assert_func>
 800e2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2c8:	6004      	str	r4, [r0, #0]
 800e2ca:	60c4      	str	r4, [r0, #12]
 800e2cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2d4:	b94c      	cbnz	r4, 800e2ea <__pow5mult+0x66>
 800e2d6:	f240 2171 	movw	r1, #625	; 0x271
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff ff12 	bl	800e104 <__i2b>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	6003      	str	r3, [r0, #0]
 800e2ea:	f04f 0900 	mov.w	r9, #0
 800e2ee:	07eb      	lsls	r3, r5, #31
 800e2f0:	d50a      	bpl.n	800e308 <__pow5mult+0x84>
 800e2f2:	4639      	mov	r1, r7
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f7ff ff1a 	bl	800e130 <__multiply>
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	4680      	mov	r8, r0
 800e300:	4630      	mov	r0, r6
 800e302:	f7ff fdff 	bl	800df04 <_Bfree>
 800e306:	4647      	mov	r7, r8
 800e308:	106d      	asrs	r5, r5, #1
 800e30a:	d00b      	beq.n	800e324 <__pow5mult+0xa0>
 800e30c:	6820      	ldr	r0, [r4, #0]
 800e30e:	b938      	cbnz	r0, 800e320 <__pow5mult+0x9c>
 800e310:	4622      	mov	r2, r4
 800e312:	4621      	mov	r1, r4
 800e314:	4630      	mov	r0, r6
 800e316:	f7ff ff0b 	bl	800e130 <__multiply>
 800e31a:	6020      	str	r0, [r4, #0]
 800e31c:	f8c0 9000 	str.w	r9, [r0]
 800e320:	4604      	mov	r4, r0
 800e322:	e7e4      	b.n	800e2ee <__pow5mult+0x6a>
 800e324:	4638      	mov	r0, r7
 800e326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32a:	bf00      	nop
 800e32c:	08010a60 	.word	0x08010a60
 800e330:	08010892 	.word	0x08010892
 800e334:	08010912 	.word	0x08010912

0800e338 <__lshift>:
 800e338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e33c:	460c      	mov	r4, r1
 800e33e:	6849      	ldr	r1, [r1, #4]
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	4607      	mov	r7, r0
 800e34a:	4691      	mov	r9, r2
 800e34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e350:	f108 0601 	add.w	r6, r8, #1
 800e354:	42b3      	cmp	r3, r6
 800e356:	db0b      	blt.n	800e370 <__lshift+0x38>
 800e358:	4638      	mov	r0, r7
 800e35a:	f7ff fd93 	bl	800de84 <_Balloc>
 800e35e:	4605      	mov	r5, r0
 800e360:	b948      	cbnz	r0, 800e376 <__lshift+0x3e>
 800e362:	4602      	mov	r2, r0
 800e364:	4b28      	ldr	r3, [pc, #160]	; (800e408 <__lshift+0xd0>)
 800e366:	4829      	ldr	r0, [pc, #164]	; (800e40c <__lshift+0xd4>)
 800e368:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e36c:	f001 fb18 	bl	800f9a0 <__assert_func>
 800e370:	3101      	adds	r1, #1
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	e7ee      	b.n	800e354 <__lshift+0x1c>
 800e376:	2300      	movs	r3, #0
 800e378:	f100 0114 	add.w	r1, r0, #20
 800e37c:	f100 0210 	add.w	r2, r0, #16
 800e380:	4618      	mov	r0, r3
 800e382:	4553      	cmp	r3, sl
 800e384:	db33      	blt.n	800e3ee <__lshift+0xb6>
 800e386:	6920      	ldr	r0, [r4, #16]
 800e388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e38c:	f104 0314 	add.w	r3, r4, #20
 800e390:	f019 091f 	ands.w	r9, r9, #31
 800e394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e39c:	d02b      	beq.n	800e3f6 <__lshift+0xbe>
 800e39e:	f1c9 0e20 	rsb	lr, r9, #32
 800e3a2:	468a      	mov	sl, r1
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	6818      	ldr	r0, [r3, #0]
 800e3a8:	fa00 f009 	lsl.w	r0, r0, r9
 800e3ac:	4310      	orrs	r0, r2
 800e3ae:	f84a 0b04 	str.w	r0, [sl], #4
 800e3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b6:	459c      	cmp	ip, r3
 800e3b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3bc:	d8f3      	bhi.n	800e3a6 <__lshift+0x6e>
 800e3be:	ebac 0304 	sub.w	r3, ip, r4
 800e3c2:	3b15      	subs	r3, #21
 800e3c4:	f023 0303 	bic.w	r3, r3, #3
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	f104 0015 	add.w	r0, r4, #21
 800e3ce:	4584      	cmp	ip, r0
 800e3d0:	bf38      	it	cc
 800e3d2:	2304      	movcc	r3, #4
 800e3d4:	50ca      	str	r2, [r1, r3]
 800e3d6:	b10a      	cbz	r2, 800e3dc <__lshift+0xa4>
 800e3d8:	f108 0602 	add.w	r6, r8, #2
 800e3dc:	3e01      	subs	r6, #1
 800e3de:	4638      	mov	r0, r7
 800e3e0:	612e      	str	r6, [r5, #16]
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	f7ff fd8e 	bl	800df04 <_Bfree>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	e7c5      	b.n	800e382 <__lshift+0x4a>
 800e3f6:	3904      	subs	r1, #4
 800e3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e400:	459c      	cmp	ip, r3
 800e402:	d8f9      	bhi.n	800e3f8 <__lshift+0xc0>
 800e404:	e7ea      	b.n	800e3dc <__lshift+0xa4>
 800e406:	bf00      	nop
 800e408:	08010901 	.word	0x08010901
 800e40c:	08010912 	.word	0x08010912

0800e410 <__mcmp>:
 800e410:	b530      	push	{r4, r5, lr}
 800e412:	6902      	ldr	r2, [r0, #16]
 800e414:	690c      	ldr	r4, [r1, #16]
 800e416:	1b12      	subs	r2, r2, r4
 800e418:	d10e      	bne.n	800e438 <__mcmp+0x28>
 800e41a:	f100 0314 	add.w	r3, r0, #20
 800e41e:	3114      	adds	r1, #20
 800e420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e42c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e430:	42a5      	cmp	r5, r4
 800e432:	d003      	beq.n	800e43c <__mcmp+0x2c>
 800e434:	d305      	bcc.n	800e442 <__mcmp+0x32>
 800e436:	2201      	movs	r2, #1
 800e438:	4610      	mov	r0, r2
 800e43a:	bd30      	pop	{r4, r5, pc}
 800e43c:	4283      	cmp	r3, r0
 800e43e:	d3f3      	bcc.n	800e428 <__mcmp+0x18>
 800e440:	e7fa      	b.n	800e438 <__mcmp+0x28>
 800e442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e446:	e7f7      	b.n	800e438 <__mcmp+0x28>

0800e448 <__mdiff>:
 800e448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	460c      	mov	r4, r1
 800e44e:	4606      	mov	r6, r0
 800e450:	4611      	mov	r1, r2
 800e452:	4620      	mov	r0, r4
 800e454:	4690      	mov	r8, r2
 800e456:	f7ff ffdb 	bl	800e410 <__mcmp>
 800e45a:	1e05      	subs	r5, r0, #0
 800e45c:	d110      	bne.n	800e480 <__mdiff+0x38>
 800e45e:	4629      	mov	r1, r5
 800e460:	4630      	mov	r0, r6
 800e462:	f7ff fd0f 	bl	800de84 <_Balloc>
 800e466:	b930      	cbnz	r0, 800e476 <__mdiff+0x2e>
 800e468:	4b3a      	ldr	r3, [pc, #232]	; (800e554 <__mdiff+0x10c>)
 800e46a:	4602      	mov	r2, r0
 800e46c:	f240 2137 	movw	r1, #567	; 0x237
 800e470:	4839      	ldr	r0, [pc, #228]	; (800e558 <__mdiff+0x110>)
 800e472:	f001 fa95 	bl	800f9a0 <__assert_func>
 800e476:	2301      	movs	r3, #1
 800e478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e480:	bfa4      	itt	ge
 800e482:	4643      	movge	r3, r8
 800e484:	46a0      	movge	r8, r4
 800e486:	4630      	mov	r0, r6
 800e488:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e48c:	bfa6      	itte	ge
 800e48e:	461c      	movge	r4, r3
 800e490:	2500      	movge	r5, #0
 800e492:	2501      	movlt	r5, #1
 800e494:	f7ff fcf6 	bl	800de84 <_Balloc>
 800e498:	b920      	cbnz	r0, 800e4a4 <__mdiff+0x5c>
 800e49a:	4b2e      	ldr	r3, [pc, #184]	; (800e554 <__mdiff+0x10c>)
 800e49c:	4602      	mov	r2, r0
 800e49e:	f240 2145 	movw	r1, #581	; 0x245
 800e4a2:	e7e5      	b.n	800e470 <__mdiff+0x28>
 800e4a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4a8:	6926      	ldr	r6, [r4, #16]
 800e4aa:	60c5      	str	r5, [r0, #12]
 800e4ac:	f104 0914 	add.w	r9, r4, #20
 800e4b0:	f108 0514 	add.w	r5, r8, #20
 800e4b4:	f100 0e14 	add.w	lr, r0, #20
 800e4b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e4bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e4c0:	f108 0210 	add.w	r2, r8, #16
 800e4c4:	46f2      	mov	sl, lr
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e4cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e4d0:	fa11 f88b 	uxtah	r8, r1, fp
 800e4d4:	b299      	uxth	r1, r3
 800e4d6:	0c1b      	lsrs	r3, r3, #16
 800e4d8:	eba8 0801 	sub.w	r8, r8, r1
 800e4dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4e4:	fa1f f888 	uxth.w	r8, r8
 800e4e8:	1419      	asrs	r1, r3, #16
 800e4ea:	454e      	cmp	r6, r9
 800e4ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4f0:	f84a 3b04 	str.w	r3, [sl], #4
 800e4f4:	d8e8      	bhi.n	800e4c8 <__mdiff+0x80>
 800e4f6:	1b33      	subs	r3, r6, r4
 800e4f8:	3b15      	subs	r3, #21
 800e4fa:	f023 0303 	bic.w	r3, r3, #3
 800e4fe:	3304      	adds	r3, #4
 800e500:	3415      	adds	r4, #21
 800e502:	42a6      	cmp	r6, r4
 800e504:	bf38      	it	cc
 800e506:	2304      	movcc	r3, #4
 800e508:	441d      	add	r5, r3
 800e50a:	4473      	add	r3, lr
 800e50c:	469e      	mov	lr, r3
 800e50e:	462e      	mov	r6, r5
 800e510:	4566      	cmp	r6, ip
 800e512:	d30e      	bcc.n	800e532 <__mdiff+0xea>
 800e514:	f10c 0203 	add.w	r2, ip, #3
 800e518:	1b52      	subs	r2, r2, r5
 800e51a:	f022 0203 	bic.w	r2, r2, #3
 800e51e:	3d03      	subs	r5, #3
 800e520:	45ac      	cmp	ip, r5
 800e522:	bf38      	it	cc
 800e524:	2200      	movcc	r2, #0
 800e526:	4413      	add	r3, r2
 800e528:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e52c:	b17a      	cbz	r2, 800e54e <__mdiff+0x106>
 800e52e:	6107      	str	r7, [r0, #16]
 800e530:	e7a4      	b.n	800e47c <__mdiff+0x34>
 800e532:	f856 8b04 	ldr.w	r8, [r6], #4
 800e536:	fa11 f288 	uxtah	r2, r1, r8
 800e53a:	1414      	asrs	r4, r2, #16
 800e53c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e540:	b292      	uxth	r2, r2
 800e542:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e546:	f84e 2b04 	str.w	r2, [lr], #4
 800e54a:	1421      	asrs	r1, r4, #16
 800e54c:	e7e0      	b.n	800e510 <__mdiff+0xc8>
 800e54e:	3f01      	subs	r7, #1
 800e550:	e7ea      	b.n	800e528 <__mdiff+0xe0>
 800e552:	bf00      	nop
 800e554:	08010901 	.word	0x08010901
 800e558:	08010912 	.word	0x08010912

0800e55c <__ulp>:
 800e55c:	b082      	sub	sp, #8
 800e55e:	ed8d 0b00 	vstr	d0, [sp]
 800e562:	9a01      	ldr	r2, [sp, #4]
 800e564:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <__ulp+0x48>)
 800e566:	4013      	ands	r3, r2
 800e568:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dc08      	bgt.n	800e582 <__ulp+0x26>
 800e570:	425b      	negs	r3, r3
 800e572:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e576:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e57a:	da04      	bge.n	800e586 <__ulp+0x2a>
 800e57c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e580:	4113      	asrs	r3, r2
 800e582:	2200      	movs	r2, #0
 800e584:	e008      	b.n	800e598 <__ulp+0x3c>
 800e586:	f1a2 0314 	sub.w	r3, r2, #20
 800e58a:	2b1e      	cmp	r3, #30
 800e58c:	bfda      	itte	le
 800e58e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e592:	40da      	lsrle	r2, r3
 800e594:	2201      	movgt	r2, #1
 800e596:	2300      	movs	r3, #0
 800e598:	4619      	mov	r1, r3
 800e59a:	4610      	mov	r0, r2
 800e59c:	ec41 0b10 	vmov	d0, r0, r1
 800e5a0:	b002      	add	sp, #8
 800e5a2:	4770      	bx	lr
 800e5a4:	7ff00000 	.word	0x7ff00000

0800e5a8 <__b2d>:
 800e5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ac:	6906      	ldr	r6, [r0, #16]
 800e5ae:	f100 0814 	add.w	r8, r0, #20
 800e5b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5b6:	1f37      	subs	r7, r6, #4
 800e5b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f7ff fd53 	bl	800e068 <__hi0bits>
 800e5c2:	f1c0 0320 	rsb	r3, r0, #32
 800e5c6:	280a      	cmp	r0, #10
 800e5c8:	600b      	str	r3, [r1, #0]
 800e5ca:	491b      	ldr	r1, [pc, #108]	; (800e638 <__b2d+0x90>)
 800e5cc:	dc15      	bgt.n	800e5fa <__b2d+0x52>
 800e5ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800e5d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e5d6:	45b8      	cmp	r8, r7
 800e5d8:	ea43 0501 	orr.w	r5, r3, r1
 800e5dc:	bf34      	ite	cc
 800e5de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5e2:	2300      	movcs	r3, #0
 800e5e4:	3015      	adds	r0, #21
 800e5e6:	fa02 f000 	lsl.w	r0, r2, r0
 800e5ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800e5ee:	4303      	orrs	r3, r0
 800e5f0:	461c      	mov	r4, r3
 800e5f2:	ec45 4b10 	vmov	d0, r4, r5
 800e5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fa:	45b8      	cmp	r8, r7
 800e5fc:	bf3a      	itte	cc
 800e5fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e602:	f1a6 0708 	subcc.w	r7, r6, #8
 800e606:	2300      	movcs	r3, #0
 800e608:	380b      	subs	r0, #11
 800e60a:	d012      	beq.n	800e632 <__b2d+0x8a>
 800e60c:	f1c0 0120 	rsb	r1, r0, #32
 800e610:	fa23 f401 	lsr.w	r4, r3, r1
 800e614:	4082      	lsls	r2, r0
 800e616:	4322      	orrs	r2, r4
 800e618:	4547      	cmp	r7, r8
 800e61a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e61e:	bf8c      	ite	hi
 800e620:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e624:	2200      	movls	r2, #0
 800e626:	4083      	lsls	r3, r0
 800e628:	40ca      	lsrs	r2, r1
 800e62a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e62e:	4313      	orrs	r3, r2
 800e630:	e7de      	b.n	800e5f0 <__b2d+0x48>
 800e632:	ea42 0501 	orr.w	r5, r2, r1
 800e636:	e7db      	b.n	800e5f0 <__b2d+0x48>
 800e638:	3ff00000 	.word	0x3ff00000

0800e63c <__d2b>:
 800e63c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e640:	460f      	mov	r7, r1
 800e642:	2101      	movs	r1, #1
 800e644:	ec59 8b10 	vmov	r8, r9, d0
 800e648:	4616      	mov	r6, r2
 800e64a:	f7ff fc1b 	bl	800de84 <_Balloc>
 800e64e:	4604      	mov	r4, r0
 800e650:	b930      	cbnz	r0, 800e660 <__d2b+0x24>
 800e652:	4602      	mov	r2, r0
 800e654:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <__d2b+0xac>)
 800e656:	4825      	ldr	r0, [pc, #148]	; (800e6ec <__d2b+0xb0>)
 800e658:	f240 310f 	movw	r1, #783	; 0x30f
 800e65c:	f001 f9a0 	bl	800f9a0 <__assert_func>
 800e660:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e668:	bb2d      	cbnz	r5, 800e6b6 <__d2b+0x7a>
 800e66a:	9301      	str	r3, [sp, #4]
 800e66c:	f1b8 0300 	subs.w	r3, r8, #0
 800e670:	d026      	beq.n	800e6c0 <__d2b+0x84>
 800e672:	4668      	mov	r0, sp
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	f7ff fd17 	bl	800e0a8 <__lo0bits>
 800e67a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e67e:	b1e8      	cbz	r0, 800e6bc <__d2b+0x80>
 800e680:	f1c0 0320 	rsb	r3, r0, #32
 800e684:	fa02 f303 	lsl.w	r3, r2, r3
 800e688:	430b      	orrs	r3, r1
 800e68a:	40c2      	lsrs	r2, r0
 800e68c:	6163      	str	r3, [r4, #20]
 800e68e:	9201      	str	r2, [sp, #4]
 800e690:	9b01      	ldr	r3, [sp, #4]
 800e692:	61a3      	str	r3, [r4, #24]
 800e694:	2b00      	cmp	r3, #0
 800e696:	bf14      	ite	ne
 800e698:	2202      	movne	r2, #2
 800e69a:	2201      	moveq	r2, #1
 800e69c:	6122      	str	r2, [r4, #16]
 800e69e:	b1bd      	cbz	r5, 800e6d0 <__d2b+0x94>
 800e6a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6a4:	4405      	add	r5, r0
 800e6a6:	603d      	str	r5, [r7, #0]
 800e6a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6ac:	6030      	str	r0, [r6, #0]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6ba:	e7d6      	b.n	800e66a <__d2b+0x2e>
 800e6bc:	6161      	str	r1, [r4, #20]
 800e6be:	e7e7      	b.n	800e690 <__d2b+0x54>
 800e6c0:	a801      	add	r0, sp, #4
 800e6c2:	f7ff fcf1 	bl	800e0a8 <__lo0bits>
 800e6c6:	9b01      	ldr	r3, [sp, #4]
 800e6c8:	6163      	str	r3, [r4, #20]
 800e6ca:	3020      	adds	r0, #32
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	e7e5      	b.n	800e69c <__d2b+0x60>
 800e6d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6d8:	6038      	str	r0, [r7, #0]
 800e6da:	6918      	ldr	r0, [r3, #16]
 800e6dc:	f7ff fcc4 	bl	800e068 <__hi0bits>
 800e6e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6e4:	e7e2      	b.n	800e6ac <__d2b+0x70>
 800e6e6:	bf00      	nop
 800e6e8:	08010901 	.word	0x08010901
 800e6ec:	08010912 	.word	0x08010912

0800e6f0 <__ratio>:
 800e6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4688      	mov	r8, r1
 800e6f6:	4669      	mov	r1, sp
 800e6f8:	4681      	mov	r9, r0
 800e6fa:	f7ff ff55 	bl	800e5a8 <__b2d>
 800e6fe:	a901      	add	r1, sp, #4
 800e700:	4640      	mov	r0, r8
 800e702:	ec55 4b10 	vmov	r4, r5, d0
 800e706:	f7ff ff4f 	bl	800e5a8 <__b2d>
 800e70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e712:	eba3 0c02 	sub.w	ip, r3, r2
 800e716:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e71a:	1a9b      	subs	r3, r3, r2
 800e71c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e720:	ec51 0b10 	vmov	r0, r1, d0
 800e724:	2b00      	cmp	r3, #0
 800e726:	bfd6      	itet	le
 800e728:	460a      	movle	r2, r1
 800e72a:	462a      	movgt	r2, r5
 800e72c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e730:	468b      	mov	fp, r1
 800e732:	462f      	mov	r7, r5
 800e734:	bfd4      	ite	le
 800e736:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e73a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e73e:	4620      	mov	r0, r4
 800e740:	ee10 2a10 	vmov	r2, s0
 800e744:	465b      	mov	r3, fp
 800e746:	4639      	mov	r1, r7
 800e748:	f7f2 f880 	bl	800084c <__aeabi_ddiv>
 800e74c:	ec41 0b10 	vmov	d0, r0, r1
 800e750:	b003      	add	sp, #12
 800e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e756 <__copybits>:
 800e756:	3901      	subs	r1, #1
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	1149      	asrs	r1, r1, #5
 800e75c:	6914      	ldr	r4, [r2, #16]
 800e75e:	3101      	adds	r1, #1
 800e760:	f102 0314 	add.w	r3, r2, #20
 800e764:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e768:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e76c:	1f05      	subs	r5, r0, #4
 800e76e:	42a3      	cmp	r3, r4
 800e770:	d30c      	bcc.n	800e78c <__copybits+0x36>
 800e772:	1aa3      	subs	r3, r4, r2
 800e774:	3b11      	subs	r3, #17
 800e776:	f023 0303 	bic.w	r3, r3, #3
 800e77a:	3211      	adds	r2, #17
 800e77c:	42a2      	cmp	r2, r4
 800e77e:	bf88      	it	hi
 800e780:	2300      	movhi	r3, #0
 800e782:	4418      	add	r0, r3
 800e784:	2300      	movs	r3, #0
 800e786:	4288      	cmp	r0, r1
 800e788:	d305      	bcc.n	800e796 <__copybits+0x40>
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e790:	f845 6f04 	str.w	r6, [r5, #4]!
 800e794:	e7eb      	b.n	800e76e <__copybits+0x18>
 800e796:	f840 3b04 	str.w	r3, [r0], #4
 800e79a:	e7f4      	b.n	800e786 <__copybits+0x30>

0800e79c <__any_on>:
 800e79c:	f100 0214 	add.w	r2, r0, #20
 800e7a0:	6900      	ldr	r0, [r0, #16]
 800e7a2:	114b      	asrs	r3, r1, #5
 800e7a4:	4298      	cmp	r0, r3
 800e7a6:	b510      	push	{r4, lr}
 800e7a8:	db11      	blt.n	800e7ce <__any_on+0x32>
 800e7aa:	dd0a      	ble.n	800e7c2 <__any_on+0x26>
 800e7ac:	f011 011f 	ands.w	r1, r1, #31
 800e7b0:	d007      	beq.n	800e7c2 <__any_on+0x26>
 800e7b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7b6:	fa24 f001 	lsr.w	r0, r4, r1
 800e7ba:	fa00 f101 	lsl.w	r1, r0, r1
 800e7be:	428c      	cmp	r4, r1
 800e7c0:	d10b      	bne.n	800e7da <__any_on+0x3e>
 800e7c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d803      	bhi.n	800e7d2 <__any_on+0x36>
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	e7f7      	b.n	800e7c2 <__any_on+0x26>
 800e7d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	d0f5      	beq.n	800e7c6 <__any_on+0x2a>
 800e7da:	2001      	movs	r0, #1
 800e7dc:	e7f6      	b.n	800e7cc <__any_on+0x30>

0800e7de <sulp>:
 800e7de:	b570      	push	{r4, r5, r6, lr}
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	ec45 4b10 	vmov	d0, r4, r5
 800e7e8:	4616      	mov	r6, r2
 800e7ea:	f7ff feb7 	bl	800e55c <__ulp>
 800e7ee:	ec51 0b10 	vmov	r0, r1, d0
 800e7f2:	b17e      	cbz	r6, 800e814 <sulp+0x36>
 800e7f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e7f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd09      	ble.n	800e814 <sulp+0x36>
 800e800:	051b      	lsls	r3, r3, #20
 800e802:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e806:	2400      	movs	r4, #0
 800e808:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e80c:	4622      	mov	r2, r4
 800e80e:	462b      	mov	r3, r5
 800e810:	f7f1 fef2 	bl	80005f8 <__aeabi_dmul>
 800e814:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e818 <_strtod_l>:
 800e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	ed2d 8b02 	vpush	{d8}
 800e820:	b09b      	sub	sp, #108	; 0x6c
 800e822:	4604      	mov	r4, r0
 800e824:	9213      	str	r2, [sp, #76]	; 0x4c
 800e826:	2200      	movs	r2, #0
 800e828:	9216      	str	r2, [sp, #88]	; 0x58
 800e82a:	460d      	mov	r5, r1
 800e82c:	f04f 0800 	mov.w	r8, #0
 800e830:	f04f 0900 	mov.w	r9, #0
 800e834:	460a      	mov	r2, r1
 800e836:	9215      	str	r2, [sp, #84]	; 0x54
 800e838:	7811      	ldrb	r1, [r2, #0]
 800e83a:	292b      	cmp	r1, #43	; 0x2b
 800e83c:	d04c      	beq.n	800e8d8 <_strtod_l+0xc0>
 800e83e:	d83a      	bhi.n	800e8b6 <_strtod_l+0x9e>
 800e840:	290d      	cmp	r1, #13
 800e842:	d834      	bhi.n	800e8ae <_strtod_l+0x96>
 800e844:	2908      	cmp	r1, #8
 800e846:	d834      	bhi.n	800e8b2 <_strtod_l+0x9a>
 800e848:	2900      	cmp	r1, #0
 800e84a:	d03d      	beq.n	800e8c8 <_strtod_l+0xb0>
 800e84c:	2200      	movs	r2, #0
 800e84e:	920a      	str	r2, [sp, #40]	; 0x28
 800e850:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e852:	7832      	ldrb	r2, [r6, #0]
 800e854:	2a30      	cmp	r2, #48	; 0x30
 800e856:	f040 80b4 	bne.w	800e9c2 <_strtod_l+0x1aa>
 800e85a:	7872      	ldrb	r2, [r6, #1]
 800e85c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e860:	2a58      	cmp	r2, #88	; 0x58
 800e862:	d170      	bne.n	800e946 <_strtod_l+0x12e>
 800e864:	9302      	str	r3, [sp, #8]
 800e866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e868:	9301      	str	r3, [sp, #4]
 800e86a:	ab16      	add	r3, sp, #88	; 0x58
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	4a8e      	ldr	r2, [pc, #568]	; (800eaa8 <_strtod_l+0x290>)
 800e870:	ab17      	add	r3, sp, #92	; 0x5c
 800e872:	a915      	add	r1, sp, #84	; 0x54
 800e874:	4620      	mov	r0, r4
 800e876:	f001 f92f 	bl	800fad8 <__gethex>
 800e87a:	f010 070f 	ands.w	r7, r0, #15
 800e87e:	4605      	mov	r5, r0
 800e880:	d005      	beq.n	800e88e <_strtod_l+0x76>
 800e882:	2f06      	cmp	r7, #6
 800e884:	d12a      	bne.n	800e8dc <_strtod_l+0xc4>
 800e886:	3601      	adds	r6, #1
 800e888:	2300      	movs	r3, #0
 800e88a:	9615      	str	r6, [sp, #84]	; 0x54
 800e88c:	930a      	str	r3, [sp, #40]	; 0x28
 800e88e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 857f 	bne.w	800f394 <_strtod_l+0xb7c>
 800e896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e898:	b1db      	cbz	r3, 800e8d2 <_strtod_l+0xba>
 800e89a:	4642      	mov	r2, r8
 800e89c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e8a0:	ec43 2b10 	vmov	d0, r2, r3
 800e8a4:	b01b      	add	sp, #108	; 0x6c
 800e8a6:	ecbd 8b02 	vpop	{d8}
 800e8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ae:	2920      	cmp	r1, #32
 800e8b0:	d1cc      	bne.n	800e84c <_strtod_l+0x34>
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	e7bf      	b.n	800e836 <_strtod_l+0x1e>
 800e8b6:	292d      	cmp	r1, #45	; 0x2d
 800e8b8:	d1c8      	bne.n	800e84c <_strtod_l+0x34>
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	910a      	str	r1, [sp, #40]	; 0x28
 800e8be:	1c51      	adds	r1, r2, #1
 800e8c0:	9115      	str	r1, [sp, #84]	; 0x54
 800e8c2:	7852      	ldrb	r2, [r2, #1]
 800e8c4:	2a00      	cmp	r2, #0
 800e8c6:	d1c3      	bne.n	800e850 <_strtod_l+0x38>
 800e8c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8ca:	9515      	str	r5, [sp, #84]	; 0x54
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f040 855f 	bne.w	800f390 <_strtod_l+0xb78>
 800e8d2:	4642      	mov	r2, r8
 800e8d4:	464b      	mov	r3, r9
 800e8d6:	e7e3      	b.n	800e8a0 <_strtod_l+0x88>
 800e8d8:	2100      	movs	r1, #0
 800e8da:	e7ef      	b.n	800e8bc <_strtod_l+0xa4>
 800e8dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e8de:	b13a      	cbz	r2, 800e8f0 <_strtod_l+0xd8>
 800e8e0:	2135      	movs	r1, #53	; 0x35
 800e8e2:	a818      	add	r0, sp, #96	; 0x60
 800e8e4:	f7ff ff37 	bl	800e756 <__copybits>
 800e8e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7ff fb0a 	bl	800df04 <_Bfree>
 800e8f0:	3f01      	subs	r7, #1
 800e8f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e8f4:	2f04      	cmp	r7, #4
 800e8f6:	d806      	bhi.n	800e906 <_strtod_l+0xee>
 800e8f8:	e8df f007 	tbb	[pc, r7]
 800e8fc:	201d0314 	.word	0x201d0314
 800e900:	14          	.byte	0x14
 800e901:	00          	.byte	0x00
 800e902:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e906:	05e9      	lsls	r1, r5, #23
 800e908:	bf48      	it	mi
 800e90a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e90e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e912:	0d1b      	lsrs	r3, r3, #20
 800e914:	051b      	lsls	r3, r3, #20
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1b9      	bne.n	800e88e <_strtod_l+0x76>
 800e91a:	f7fe faf7 	bl	800cf0c <__errno>
 800e91e:	2322      	movs	r3, #34	; 0x22
 800e920:	6003      	str	r3, [r0, #0]
 800e922:	e7b4      	b.n	800e88e <_strtod_l+0x76>
 800e924:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e928:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e92c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e930:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e934:	e7e7      	b.n	800e906 <_strtod_l+0xee>
 800e936:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eab0 <_strtod_l+0x298>
 800e93a:	e7e4      	b.n	800e906 <_strtod_l+0xee>
 800e93c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e940:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e944:	e7df      	b.n	800e906 <_strtod_l+0xee>
 800e946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	9215      	str	r2, [sp, #84]	; 0x54
 800e94c:	785b      	ldrb	r3, [r3, #1]
 800e94e:	2b30      	cmp	r3, #48	; 0x30
 800e950:	d0f9      	beq.n	800e946 <_strtod_l+0x12e>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d09b      	beq.n	800e88e <_strtod_l+0x76>
 800e956:	2301      	movs	r3, #1
 800e958:	f04f 0a00 	mov.w	sl, #0
 800e95c:	9304      	str	r3, [sp, #16]
 800e95e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e960:	930b      	str	r3, [sp, #44]	; 0x2c
 800e962:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e966:	46d3      	mov	fp, sl
 800e968:	220a      	movs	r2, #10
 800e96a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e96c:	7806      	ldrb	r6, [r0, #0]
 800e96e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e972:	b2d9      	uxtb	r1, r3
 800e974:	2909      	cmp	r1, #9
 800e976:	d926      	bls.n	800e9c6 <_strtod_l+0x1ae>
 800e978:	494c      	ldr	r1, [pc, #304]	; (800eaac <_strtod_l+0x294>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	f000 ffe6 	bl	800f94c <strncmp>
 800e980:	2800      	cmp	r0, #0
 800e982:	d030      	beq.n	800e9e6 <_strtod_l+0x1ce>
 800e984:	2000      	movs	r0, #0
 800e986:	4632      	mov	r2, r6
 800e988:	9005      	str	r0, [sp, #20]
 800e98a:	465e      	mov	r6, fp
 800e98c:	4603      	mov	r3, r0
 800e98e:	2a65      	cmp	r2, #101	; 0x65
 800e990:	d001      	beq.n	800e996 <_strtod_l+0x17e>
 800e992:	2a45      	cmp	r2, #69	; 0x45
 800e994:	d113      	bne.n	800e9be <_strtod_l+0x1a6>
 800e996:	b91e      	cbnz	r6, 800e9a0 <_strtod_l+0x188>
 800e998:	9a04      	ldr	r2, [sp, #16]
 800e99a:	4302      	orrs	r2, r0
 800e99c:	d094      	beq.n	800e8c8 <_strtod_l+0xb0>
 800e99e:	2600      	movs	r6, #0
 800e9a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e9a2:	1c6a      	adds	r2, r5, #1
 800e9a4:	9215      	str	r2, [sp, #84]	; 0x54
 800e9a6:	786a      	ldrb	r2, [r5, #1]
 800e9a8:	2a2b      	cmp	r2, #43	; 0x2b
 800e9aa:	d074      	beq.n	800ea96 <_strtod_l+0x27e>
 800e9ac:	2a2d      	cmp	r2, #45	; 0x2d
 800e9ae:	d078      	beq.n	800eaa2 <_strtod_l+0x28a>
 800e9b0:	f04f 0c00 	mov.w	ip, #0
 800e9b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e9b8:	2909      	cmp	r1, #9
 800e9ba:	d97f      	bls.n	800eabc <_strtod_l+0x2a4>
 800e9bc:	9515      	str	r5, [sp, #84]	; 0x54
 800e9be:	2700      	movs	r7, #0
 800e9c0:	e09e      	b.n	800eb00 <_strtod_l+0x2e8>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e7c8      	b.n	800e958 <_strtod_l+0x140>
 800e9c6:	f1bb 0f08 	cmp.w	fp, #8
 800e9ca:	bfd8      	it	le
 800e9cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e9ce:	f100 0001 	add.w	r0, r0, #1
 800e9d2:	bfda      	itte	le
 800e9d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800e9d8:	9309      	strle	r3, [sp, #36]	; 0x24
 800e9da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e9de:	f10b 0b01 	add.w	fp, fp, #1
 800e9e2:	9015      	str	r0, [sp, #84]	; 0x54
 800e9e4:	e7c1      	b.n	800e96a <_strtod_l+0x152>
 800e9e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9e8:	1c5a      	adds	r2, r3, #1
 800e9ea:	9215      	str	r2, [sp, #84]	; 0x54
 800e9ec:	785a      	ldrb	r2, [r3, #1]
 800e9ee:	f1bb 0f00 	cmp.w	fp, #0
 800e9f2:	d037      	beq.n	800ea64 <_strtod_l+0x24c>
 800e9f4:	9005      	str	r0, [sp, #20]
 800e9f6:	465e      	mov	r6, fp
 800e9f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e9fc:	2b09      	cmp	r3, #9
 800e9fe:	d912      	bls.n	800ea26 <_strtod_l+0x20e>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e7c4      	b.n	800e98e <_strtod_l+0x176>
 800ea04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea06:	1c5a      	adds	r2, r3, #1
 800ea08:	9215      	str	r2, [sp, #84]	; 0x54
 800ea0a:	785a      	ldrb	r2, [r3, #1]
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	2a30      	cmp	r2, #48	; 0x30
 800ea10:	d0f8      	beq.n	800ea04 <_strtod_l+0x1ec>
 800ea12:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ea16:	2b08      	cmp	r3, #8
 800ea18:	f200 84c1 	bhi.w	800f39e <_strtod_l+0xb86>
 800ea1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea1e:	9005      	str	r0, [sp, #20]
 800ea20:	2000      	movs	r0, #0
 800ea22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea24:	4606      	mov	r6, r0
 800ea26:	3a30      	subs	r2, #48	; 0x30
 800ea28:	f100 0301 	add.w	r3, r0, #1
 800ea2c:	d014      	beq.n	800ea58 <_strtod_l+0x240>
 800ea2e:	9905      	ldr	r1, [sp, #20]
 800ea30:	4419      	add	r1, r3
 800ea32:	9105      	str	r1, [sp, #20]
 800ea34:	4633      	mov	r3, r6
 800ea36:	eb00 0c06 	add.w	ip, r0, r6
 800ea3a:	210a      	movs	r1, #10
 800ea3c:	4563      	cmp	r3, ip
 800ea3e:	d113      	bne.n	800ea68 <_strtod_l+0x250>
 800ea40:	1833      	adds	r3, r6, r0
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	f106 0601 	add.w	r6, r6, #1
 800ea48:	4406      	add	r6, r0
 800ea4a:	dc1a      	bgt.n	800ea82 <_strtod_l+0x26a>
 800ea4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea4e:	230a      	movs	r3, #10
 800ea50:	fb03 2301 	mla	r3, r3, r1, r2
 800ea54:	9309      	str	r3, [sp, #36]	; 0x24
 800ea56:	2300      	movs	r3, #0
 800ea58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ea5a:	1c51      	adds	r1, r2, #1
 800ea5c:	9115      	str	r1, [sp, #84]	; 0x54
 800ea5e:	7852      	ldrb	r2, [r2, #1]
 800ea60:	4618      	mov	r0, r3
 800ea62:	e7c9      	b.n	800e9f8 <_strtod_l+0x1e0>
 800ea64:	4658      	mov	r0, fp
 800ea66:	e7d2      	b.n	800ea0e <_strtod_l+0x1f6>
 800ea68:	2b08      	cmp	r3, #8
 800ea6a:	f103 0301 	add.w	r3, r3, #1
 800ea6e:	dc03      	bgt.n	800ea78 <_strtod_l+0x260>
 800ea70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea72:	434f      	muls	r7, r1
 800ea74:	9709      	str	r7, [sp, #36]	; 0x24
 800ea76:	e7e1      	b.n	800ea3c <_strtod_l+0x224>
 800ea78:	2b10      	cmp	r3, #16
 800ea7a:	bfd8      	it	le
 800ea7c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ea80:	e7dc      	b.n	800ea3c <_strtod_l+0x224>
 800ea82:	2e10      	cmp	r6, #16
 800ea84:	bfdc      	itt	le
 800ea86:	230a      	movle	r3, #10
 800ea88:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ea8c:	e7e3      	b.n	800ea56 <_strtod_l+0x23e>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	2301      	movs	r3, #1
 800ea94:	e780      	b.n	800e998 <_strtod_l+0x180>
 800ea96:	f04f 0c00 	mov.w	ip, #0
 800ea9a:	1caa      	adds	r2, r5, #2
 800ea9c:	9215      	str	r2, [sp, #84]	; 0x54
 800ea9e:	78aa      	ldrb	r2, [r5, #2]
 800eaa0:	e788      	b.n	800e9b4 <_strtod_l+0x19c>
 800eaa2:	f04f 0c01 	mov.w	ip, #1
 800eaa6:	e7f8      	b.n	800ea9a <_strtod_l+0x282>
 800eaa8:	08010a70 	.word	0x08010a70
 800eaac:	08010a6c 	.word	0x08010a6c
 800eab0:	7ff00000 	.word	0x7ff00000
 800eab4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eab6:	1c51      	adds	r1, r2, #1
 800eab8:	9115      	str	r1, [sp, #84]	; 0x54
 800eaba:	7852      	ldrb	r2, [r2, #1]
 800eabc:	2a30      	cmp	r2, #48	; 0x30
 800eabe:	d0f9      	beq.n	800eab4 <_strtod_l+0x29c>
 800eac0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eac4:	2908      	cmp	r1, #8
 800eac6:	f63f af7a 	bhi.w	800e9be <_strtod_l+0x1a6>
 800eaca:	3a30      	subs	r2, #48	; 0x30
 800eacc:	9208      	str	r2, [sp, #32]
 800eace:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ead0:	920c      	str	r2, [sp, #48]	; 0x30
 800ead2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ead4:	1c57      	adds	r7, r2, #1
 800ead6:	9715      	str	r7, [sp, #84]	; 0x54
 800ead8:	7852      	ldrb	r2, [r2, #1]
 800eada:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eade:	f1be 0f09 	cmp.w	lr, #9
 800eae2:	d938      	bls.n	800eb56 <_strtod_l+0x33e>
 800eae4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eae6:	1a7f      	subs	r7, r7, r1
 800eae8:	2f08      	cmp	r7, #8
 800eaea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800eaee:	dc03      	bgt.n	800eaf8 <_strtod_l+0x2e0>
 800eaf0:	9908      	ldr	r1, [sp, #32]
 800eaf2:	428f      	cmp	r7, r1
 800eaf4:	bfa8      	it	ge
 800eaf6:	460f      	movge	r7, r1
 800eaf8:	f1bc 0f00 	cmp.w	ip, #0
 800eafc:	d000      	beq.n	800eb00 <_strtod_l+0x2e8>
 800eafe:	427f      	negs	r7, r7
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	d14f      	bne.n	800eba4 <_strtod_l+0x38c>
 800eb04:	9904      	ldr	r1, [sp, #16]
 800eb06:	4301      	orrs	r1, r0
 800eb08:	f47f aec1 	bne.w	800e88e <_strtod_l+0x76>
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f47f aedb 	bne.w	800e8c8 <_strtod_l+0xb0>
 800eb12:	2a69      	cmp	r2, #105	; 0x69
 800eb14:	d029      	beq.n	800eb6a <_strtod_l+0x352>
 800eb16:	dc26      	bgt.n	800eb66 <_strtod_l+0x34e>
 800eb18:	2a49      	cmp	r2, #73	; 0x49
 800eb1a:	d026      	beq.n	800eb6a <_strtod_l+0x352>
 800eb1c:	2a4e      	cmp	r2, #78	; 0x4e
 800eb1e:	f47f aed3 	bne.w	800e8c8 <_strtod_l+0xb0>
 800eb22:	499b      	ldr	r1, [pc, #620]	; (800ed90 <_strtod_l+0x578>)
 800eb24:	a815      	add	r0, sp, #84	; 0x54
 800eb26:	f001 fa17 	bl	800ff58 <__match>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f43f aecc 	beq.w	800e8c8 <_strtod_l+0xb0>
 800eb30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b28      	cmp	r3, #40	; 0x28
 800eb36:	d12f      	bne.n	800eb98 <_strtod_l+0x380>
 800eb38:	4996      	ldr	r1, [pc, #600]	; (800ed94 <_strtod_l+0x57c>)
 800eb3a:	aa18      	add	r2, sp, #96	; 0x60
 800eb3c:	a815      	add	r0, sp, #84	; 0x54
 800eb3e:	f001 fa1f 	bl	800ff80 <__hexnan>
 800eb42:	2805      	cmp	r0, #5
 800eb44:	d128      	bne.n	800eb98 <_strtod_l+0x380>
 800eb46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800eb50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800eb54:	e69b      	b.n	800e88e <_strtod_l+0x76>
 800eb56:	9f08      	ldr	r7, [sp, #32]
 800eb58:	210a      	movs	r1, #10
 800eb5a:	fb01 2107 	mla	r1, r1, r7, r2
 800eb5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800eb62:	9208      	str	r2, [sp, #32]
 800eb64:	e7b5      	b.n	800ead2 <_strtod_l+0x2ba>
 800eb66:	2a6e      	cmp	r2, #110	; 0x6e
 800eb68:	e7d9      	b.n	800eb1e <_strtod_l+0x306>
 800eb6a:	498b      	ldr	r1, [pc, #556]	; (800ed98 <_strtod_l+0x580>)
 800eb6c:	a815      	add	r0, sp, #84	; 0x54
 800eb6e:	f001 f9f3 	bl	800ff58 <__match>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f43f aea8 	beq.w	800e8c8 <_strtod_l+0xb0>
 800eb78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb7a:	4988      	ldr	r1, [pc, #544]	; (800ed9c <_strtod_l+0x584>)
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	a815      	add	r0, sp, #84	; 0x54
 800eb80:	9315      	str	r3, [sp, #84]	; 0x54
 800eb82:	f001 f9e9 	bl	800ff58 <__match>
 800eb86:	b910      	cbnz	r0, 800eb8e <_strtod_l+0x376>
 800eb88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	9315      	str	r3, [sp, #84]	; 0x54
 800eb8e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800edac <_strtod_l+0x594>
 800eb92:	f04f 0800 	mov.w	r8, #0
 800eb96:	e67a      	b.n	800e88e <_strtod_l+0x76>
 800eb98:	4881      	ldr	r0, [pc, #516]	; (800eda0 <_strtod_l+0x588>)
 800eb9a:	f000 fef9 	bl	800f990 <nan>
 800eb9e:	ec59 8b10 	vmov	r8, r9, d0
 800eba2:	e674      	b.n	800e88e <_strtod_l+0x76>
 800eba4:	9b05      	ldr	r3, [sp, #20]
 800eba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eba8:	1afb      	subs	r3, r7, r3
 800ebaa:	f1bb 0f00 	cmp.w	fp, #0
 800ebae:	bf08      	it	eq
 800ebb0:	46b3      	moveq	fp, r6
 800ebb2:	2e10      	cmp	r6, #16
 800ebb4:	9308      	str	r3, [sp, #32]
 800ebb6:	4635      	mov	r5, r6
 800ebb8:	bfa8      	it	ge
 800ebba:	2510      	movge	r5, #16
 800ebbc:	f7f1 fca2 	bl	8000504 <__aeabi_ui2d>
 800ebc0:	2e09      	cmp	r6, #9
 800ebc2:	4680      	mov	r8, r0
 800ebc4:	4689      	mov	r9, r1
 800ebc6:	dd13      	ble.n	800ebf0 <_strtod_l+0x3d8>
 800ebc8:	4b76      	ldr	r3, [pc, #472]	; (800eda4 <_strtod_l+0x58c>)
 800ebca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ebce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	4650      	mov	r0, sl
 800ebda:	4689      	mov	r9, r1
 800ebdc:	f7f1 fc92 	bl	8000504 <__aeabi_ui2d>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 fb50 	bl	800028c <__adddf3>
 800ebec:	4680      	mov	r8, r0
 800ebee:	4689      	mov	r9, r1
 800ebf0:	2e0f      	cmp	r6, #15
 800ebf2:	dc38      	bgt.n	800ec66 <_strtod_l+0x44e>
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f43f ae49 	beq.w	800e88e <_strtod_l+0x76>
 800ebfc:	dd24      	ble.n	800ec48 <_strtod_l+0x430>
 800ebfe:	2b16      	cmp	r3, #22
 800ec00:	dc0b      	bgt.n	800ec1a <_strtod_l+0x402>
 800ec02:	4968      	ldr	r1, [pc, #416]	; (800eda4 <_strtod_l+0x58c>)
 800ec04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	464b      	mov	r3, r9
 800ec10:	f7f1 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ec14:	4680      	mov	r8, r0
 800ec16:	4689      	mov	r9, r1
 800ec18:	e639      	b.n	800e88e <_strtod_l+0x76>
 800ec1a:	9a08      	ldr	r2, [sp, #32]
 800ec1c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ec20:	4293      	cmp	r3, r2
 800ec22:	db20      	blt.n	800ec66 <_strtod_l+0x44e>
 800ec24:	4c5f      	ldr	r4, [pc, #380]	; (800eda4 <_strtod_l+0x58c>)
 800ec26:	f1c6 060f 	rsb	r6, r6, #15
 800ec2a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ec2e:	4642      	mov	r2, r8
 800ec30:	464b      	mov	r3, r9
 800ec32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	9b08      	ldr	r3, [sp, #32]
 800ec3c:	1b9e      	subs	r6, r3, r6
 800ec3e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ec42:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec46:	e7e3      	b.n	800ec10 <_strtod_l+0x3f8>
 800ec48:	9b08      	ldr	r3, [sp, #32]
 800ec4a:	3316      	adds	r3, #22
 800ec4c:	db0b      	blt.n	800ec66 <_strtod_l+0x44e>
 800ec4e:	9b05      	ldr	r3, [sp, #20]
 800ec50:	1bdf      	subs	r7, r3, r7
 800ec52:	4b54      	ldr	r3, [pc, #336]	; (800eda4 <_strtod_l+0x58c>)
 800ec54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ec58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	4649      	mov	r1, r9
 800ec60:	f7f1 fdf4 	bl	800084c <__aeabi_ddiv>
 800ec64:	e7d6      	b.n	800ec14 <_strtod_l+0x3fc>
 800ec66:	9b08      	ldr	r3, [sp, #32]
 800ec68:	1b75      	subs	r5, r6, r5
 800ec6a:	441d      	add	r5, r3
 800ec6c:	2d00      	cmp	r5, #0
 800ec6e:	dd70      	ble.n	800ed52 <_strtod_l+0x53a>
 800ec70:	f015 030f 	ands.w	r3, r5, #15
 800ec74:	d00a      	beq.n	800ec8c <_strtod_l+0x474>
 800ec76:	494b      	ldr	r1, [pc, #300]	; (800eda4 <_strtod_l+0x58c>)
 800ec78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec7c:	4642      	mov	r2, r8
 800ec7e:	464b      	mov	r3, r9
 800ec80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec84:	f7f1 fcb8 	bl	80005f8 <__aeabi_dmul>
 800ec88:	4680      	mov	r8, r0
 800ec8a:	4689      	mov	r9, r1
 800ec8c:	f035 050f 	bics.w	r5, r5, #15
 800ec90:	d04d      	beq.n	800ed2e <_strtod_l+0x516>
 800ec92:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ec96:	dd22      	ble.n	800ecde <_strtod_l+0x4c6>
 800ec98:	2500      	movs	r5, #0
 800ec9a:	46ab      	mov	fp, r5
 800ec9c:	9509      	str	r5, [sp, #36]	; 0x24
 800ec9e:	9505      	str	r5, [sp, #20]
 800eca0:	2322      	movs	r3, #34	; 0x22
 800eca2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800edac <_strtod_l+0x594>
 800eca6:	6023      	str	r3, [r4, #0]
 800eca8:	f04f 0800 	mov.w	r8, #0
 800ecac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f43f aded 	beq.w	800e88e <_strtod_l+0x76>
 800ecb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f7ff f924 	bl	800df04 <_Bfree>
 800ecbc:	9905      	ldr	r1, [sp, #20]
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7ff f920 	bl	800df04 <_Bfree>
 800ecc4:	4659      	mov	r1, fp
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7ff f91c 	bl	800df04 <_Bfree>
 800eccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f7ff f918 	bl	800df04 <_Bfree>
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f7ff f914 	bl	800df04 <_Bfree>
 800ecdc:	e5d7      	b.n	800e88e <_strtod_l+0x76>
 800ecde:	4b32      	ldr	r3, [pc, #200]	; (800eda8 <_strtod_l+0x590>)
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	2300      	movs	r3, #0
 800ece4:	112d      	asrs	r5, r5, #4
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	469a      	mov	sl, r3
 800ecec:	2d01      	cmp	r5, #1
 800ecee:	dc21      	bgt.n	800ed34 <_strtod_l+0x51c>
 800ecf0:	b10b      	cbz	r3, 800ecf6 <_strtod_l+0x4de>
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	4689      	mov	r9, r1
 800ecf6:	492c      	ldr	r1, [pc, #176]	; (800eda8 <_strtod_l+0x590>)
 800ecf8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ecfc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ed00:	4642      	mov	r2, r8
 800ed02:	464b      	mov	r3, r9
 800ed04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed08:	f7f1 fc76 	bl	80005f8 <__aeabi_dmul>
 800ed0c:	4b27      	ldr	r3, [pc, #156]	; (800edac <_strtod_l+0x594>)
 800ed0e:	460a      	mov	r2, r1
 800ed10:	400b      	ands	r3, r1
 800ed12:	4927      	ldr	r1, [pc, #156]	; (800edb0 <_strtod_l+0x598>)
 800ed14:	428b      	cmp	r3, r1
 800ed16:	4680      	mov	r8, r0
 800ed18:	d8be      	bhi.n	800ec98 <_strtod_l+0x480>
 800ed1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ed1e:	428b      	cmp	r3, r1
 800ed20:	bf86      	itte	hi
 800ed22:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800edb4 <_strtod_l+0x59c>
 800ed26:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800ed2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	e07b      	b.n	800ee2c <_strtod_l+0x614>
 800ed34:	07ea      	lsls	r2, r5, #31
 800ed36:	d505      	bpl.n	800ed44 <_strtod_l+0x52c>
 800ed38:	9b04      	ldr	r3, [sp, #16]
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	f7f1 fc5b 	bl	80005f8 <__aeabi_dmul>
 800ed42:	2301      	movs	r3, #1
 800ed44:	9a04      	ldr	r2, [sp, #16]
 800ed46:	3208      	adds	r2, #8
 800ed48:	f10a 0a01 	add.w	sl, sl, #1
 800ed4c:	106d      	asrs	r5, r5, #1
 800ed4e:	9204      	str	r2, [sp, #16]
 800ed50:	e7cc      	b.n	800ecec <_strtod_l+0x4d4>
 800ed52:	d0ec      	beq.n	800ed2e <_strtod_l+0x516>
 800ed54:	426d      	negs	r5, r5
 800ed56:	f015 020f 	ands.w	r2, r5, #15
 800ed5a:	d00a      	beq.n	800ed72 <_strtod_l+0x55a>
 800ed5c:	4b11      	ldr	r3, [pc, #68]	; (800eda4 <_strtod_l+0x58c>)
 800ed5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed62:	4640      	mov	r0, r8
 800ed64:	4649      	mov	r1, r9
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f7f1 fd6f 	bl	800084c <__aeabi_ddiv>
 800ed6e:	4680      	mov	r8, r0
 800ed70:	4689      	mov	r9, r1
 800ed72:	112d      	asrs	r5, r5, #4
 800ed74:	d0db      	beq.n	800ed2e <_strtod_l+0x516>
 800ed76:	2d1f      	cmp	r5, #31
 800ed78:	dd1e      	ble.n	800edb8 <_strtod_l+0x5a0>
 800ed7a:	2500      	movs	r5, #0
 800ed7c:	46ab      	mov	fp, r5
 800ed7e:	9509      	str	r5, [sp, #36]	; 0x24
 800ed80:	9505      	str	r5, [sp, #20]
 800ed82:	2322      	movs	r3, #34	; 0x22
 800ed84:	f04f 0800 	mov.w	r8, #0
 800ed88:	f04f 0900 	mov.w	r9, #0
 800ed8c:	6023      	str	r3, [r4, #0]
 800ed8e:	e78d      	b.n	800ecac <_strtod_l+0x494>
 800ed90:	08010859 	.word	0x08010859
 800ed94:	08010a84 	.word	0x08010a84
 800ed98:	08010851 	.word	0x08010851
 800ed9c:	08010888 	.word	0x08010888
 800eda0:	08010c15 	.word	0x08010c15
 800eda4:	08010998 	.word	0x08010998
 800eda8:	08010970 	.word	0x08010970
 800edac:	7ff00000 	.word	0x7ff00000
 800edb0:	7ca00000 	.word	0x7ca00000
 800edb4:	7fefffff 	.word	0x7fefffff
 800edb8:	f015 0310 	ands.w	r3, r5, #16
 800edbc:	bf18      	it	ne
 800edbe:	236a      	movne	r3, #106	; 0x6a
 800edc0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f164 <_strtod_l+0x94c>
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	4640      	mov	r0, r8
 800edc8:	4649      	mov	r1, r9
 800edca:	2300      	movs	r3, #0
 800edcc:	07ea      	lsls	r2, r5, #31
 800edce:	d504      	bpl.n	800edda <_strtod_l+0x5c2>
 800edd0:	e9da 2300 	ldrd	r2, r3, [sl]
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	2301      	movs	r3, #1
 800edda:	106d      	asrs	r5, r5, #1
 800eddc:	f10a 0a08 	add.w	sl, sl, #8
 800ede0:	d1f4      	bne.n	800edcc <_strtod_l+0x5b4>
 800ede2:	b10b      	cbz	r3, 800ede8 <_strtod_l+0x5d0>
 800ede4:	4680      	mov	r8, r0
 800ede6:	4689      	mov	r9, r1
 800ede8:	9b04      	ldr	r3, [sp, #16]
 800edea:	b1bb      	cbz	r3, 800ee1c <_strtod_l+0x604>
 800edec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800edf0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	4649      	mov	r1, r9
 800edf8:	dd10      	ble.n	800ee1c <_strtod_l+0x604>
 800edfa:	2b1f      	cmp	r3, #31
 800edfc:	f340 811e 	ble.w	800f03c <_strtod_l+0x824>
 800ee00:	2b34      	cmp	r3, #52	; 0x34
 800ee02:	bfde      	ittt	le
 800ee04:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ee08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ee0c:	4093      	lslle	r3, r2
 800ee0e:	f04f 0800 	mov.w	r8, #0
 800ee12:	bfcc      	ite	gt
 800ee14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ee18:	ea03 0901 	andle.w	r9, r3, r1
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2300      	movs	r3, #0
 800ee20:	4640      	mov	r0, r8
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d1a6      	bne.n	800ed7a <_strtod_l+0x562>
 800ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee32:	4633      	mov	r3, r6
 800ee34:	465a      	mov	r2, fp
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7ff f8cc 	bl	800dfd4 <__s2b>
 800ee3c:	9009      	str	r0, [sp, #36]	; 0x24
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	f43f af2a 	beq.w	800ec98 <_strtod_l+0x480>
 800ee44:	9a08      	ldr	r2, [sp, #32]
 800ee46:	9b05      	ldr	r3, [sp, #20]
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	eba3 0307 	sub.w	r3, r3, r7
 800ee4e:	bfa8      	it	ge
 800ee50:	2300      	movge	r3, #0
 800ee52:	930c      	str	r3, [sp, #48]	; 0x30
 800ee54:	2500      	movs	r5, #0
 800ee56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee5a:	9312      	str	r3, [sp, #72]	; 0x48
 800ee5c:	46ab      	mov	fp, r5
 800ee5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee60:	4620      	mov	r0, r4
 800ee62:	6859      	ldr	r1, [r3, #4]
 800ee64:	f7ff f80e 	bl	800de84 <_Balloc>
 800ee68:	9005      	str	r0, [sp, #20]
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	f43f af18 	beq.w	800eca0 <_strtod_l+0x488>
 800ee70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee72:	691a      	ldr	r2, [r3, #16]
 800ee74:	3202      	adds	r2, #2
 800ee76:	f103 010c 	add.w	r1, r3, #12
 800ee7a:	0092      	lsls	r2, r2, #2
 800ee7c:	300c      	adds	r0, #12
 800ee7e:	f7fe f872 	bl	800cf66 <memcpy>
 800ee82:	ec49 8b10 	vmov	d0, r8, r9
 800ee86:	aa18      	add	r2, sp, #96	; 0x60
 800ee88:	a917      	add	r1, sp, #92	; 0x5c
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7ff fbd6 	bl	800e63c <__d2b>
 800ee90:	ec49 8b18 	vmov	d8, r8, r9
 800ee94:	9016      	str	r0, [sp, #88]	; 0x58
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f43f af02 	beq.w	800eca0 <_strtod_l+0x488>
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f7ff f930 	bl	800e104 <__i2b>
 800eea4:	4683      	mov	fp, r0
 800eea6:	2800      	cmp	r0, #0
 800eea8:	f43f aefa 	beq.w	800eca0 <_strtod_l+0x488>
 800eeac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800eeae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eeb0:	2e00      	cmp	r6, #0
 800eeb2:	bfab      	itete	ge
 800eeb4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800eeb6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800eeb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800eeba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800eebe:	bfac      	ite	ge
 800eec0:	eb06 0a03 	addge.w	sl, r6, r3
 800eec4:	1b9f      	sublt	r7, r3, r6
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	1af6      	subs	r6, r6, r3
 800eeca:	4416      	add	r6, r2
 800eecc:	4ba0      	ldr	r3, [pc, #640]	; (800f150 <_strtod_l+0x938>)
 800eece:	3e01      	subs	r6, #1
 800eed0:	429e      	cmp	r6, r3
 800eed2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eed6:	f280 80c4 	bge.w	800f062 <_strtod_l+0x84a>
 800eeda:	1b9b      	subs	r3, r3, r6
 800eedc:	2b1f      	cmp	r3, #31
 800eede:	eba2 0203 	sub.w	r2, r2, r3
 800eee2:	f04f 0101 	mov.w	r1, #1
 800eee6:	f300 80b0 	bgt.w	800f04a <_strtod_l+0x832>
 800eeea:	fa01 f303 	lsl.w	r3, r1, r3
 800eeee:	930e      	str	r3, [sp, #56]	; 0x38
 800eef0:	2300      	movs	r3, #0
 800eef2:	930d      	str	r3, [sp, #52]	; 0x34
 800eef4:	eb0a 0602 	add.w	r6, sl, r2
 800eef8:	9b04      	ldr	r3, [sp, #16]
 800eefa:	45b2      	cmp	sl, r6
 800eefc:	4417      	add	r7, r2
 800eefe:	441f      	add	r7, r3
 800ef00:	4653      	mov	r3, sl
 800ef02:	bfa8      	it	ge
 800ef04:	4633      	movge	r3, r6
 800ef06:	42bb      	cmp	r3, r7
 800ef08:	bfa8      	it	ge
 800ef0a:	463b      	movge	r3, r7
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bfc2      	ittt	gt
 800ef10:	1af6      	subgt	r6, r6, r3
 800ef12:	1aff      	subgt	r7, r7, r3
 800ef14:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ef18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	dd17      	ble.n	800ef4e <_strtod_l+0x736>
 800ef1e:	4659      	mov	r1, fp
 800ef20:	461a      	mov	r2, r3
 800ef22:	4620      	mov	r0, r4
 800ef24:	f7ff f9ae 	bl	800e284 <__pow5mult>
 800ef28:	4683      	mov	fp, r0
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	f43f aeb8 	beq.w	800eca0 <_strtod_l+0x488>
 800ef30:	4601      	mov	r1, r0
 800ef32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef34:	4620      	mov	r0, r4
 800ef36:	f7ff f8fb 	bl	800e130 <__multiply>
 800ef3a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f43f aeaf 	beq.w	800eca0 <_strtod_l+0x488>
 800ef42:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7fe ffdd 	bl	800df04 <_Bfree>
 800ef4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef4c:	9316      	str	r3, [sp, #88]	; 0x58
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	f300 808c 	bgt.w	800f06c <_strtod_l+0x854>
 800ef54:	9b08      	ldr	r3, [sp, #32]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dd08      	ble.n	800ef6c <_strtod_l+0x754>
 800ef5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef5c:	9905      	ldr	r1, [sp, #20]
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f7ff f990 	bl	800e284 <__pow5mult>
 800ef64:	9005      	str	r0, [sp, #20]
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f43f ae9a 	beq.w	800eca0 <_strtod_l+0x488>
 800ef6c:	2f00      	cmp	r7, #0
 800ef6e:	dd08      	ble.n	800ef82 <_strtod_l+0x76a>
 800ef70:	9905      	ldr	r1, [sp, #20]
 800ef72:	463a      	mov	r2, r7
 800ef74:	4620      	mov	r0, r4
 800ef76:	f7ff f9df 	bl	800e338 <__lshift>
 800ef7a:	9005      	str	r0, [sp, #20]
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	f43f ae8f 	beq.w	800eca0 <_strtod_l+0x488>
 800ef82:	f1ba 0f00 	cmp.w	sl, #0
 800ef86:	dd08      	ble.n	800ef9a <_strtod_l+0x782>
 800ef88:	4659      	mov	r1, fp
 800ef8a:	4652      	mov	r2, sl
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f7ff f9d3 	bl	800e338 <__lshift>
 800ef92:	4683      	mov	fp, r0
 800ef94:	2800      	cmp	r0, #0
 800ef96:	f43f ae83 	beq.w	800eca0 <_strtod_l+0x488>
 800ef9a:	9a05      	ldr	r2, [sp, #20]
 800ef9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7ff fa52 	bl	800e448 <__mdiff>
 800efa4:	4605      	mov	r5, r0
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f43f ae7a 	beq.w	800eca0 <_strtod_l+0x488>
 800efac:	68c3      	ldr	r3, [r0, #12]
 800efae:	930b      	str	r3, [sp, #44]	; 0x2c
 800efb0:	2300      	movs	r3, #0
 800efb2:	60c3      	str	r3, [r0, #12]
 800efb4:	4659      	mov	r1, fp
 800efb6:	f7ff fa2b 	bl	800e410 <__mcmp>
 800efba:	2800      	cmp	r0, #0
 800efbc:	da60      	bge.n	800f080 <_strtod_l+0x868>
 800efbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efc0:	ea53 0308 	orrs.w	r3, r3, r8
 800efc4:	f040 8084 	bne.w	800f0d0 <_strtod_l+0x8b8>
 800efc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d17f      	bne.n	800f0d0 <_strtod_l+0x8b8>
 800efd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efd4:	0d1b      	lsrs	r3, r3, #20
 800efd6:	051b      	lsls	r3, r3, #20
 800efd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800efdc:	d978      	bls.n	800f0d0 <_strtod_l+0x8b8>
 800efde:	696b      	ldr	r3, [r5, #20]
 800efe0:	b913      	cbnz	r3, 800efe8 <_strtod_l+0x7d0>
 800efe2:	692b      	ldr	r3, [r5, #16]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	dd73      	ble.n	800f0d0 <_strtod_l+0x8b8>
 800efe8:	4629      	mov	r1, r5
 800efea:	2201      	movs	r2, #1
 800efec:	4620      	mov	r0, r4
 800efee:	f7ff f9a3 	bl	800e338 <__lshift>
 800eff2:	4659      	mov	r1, fp
 800eff4:	4605      	mov	r5, r0
 800eff6:	f7ff fa0b 	bl	800e410 <__mcmp>
 800effa:	2800      	cmp	r0, #0
 800effc:	dd68      	ble.n	800f0d0 <_strtod_l+0x8b8>
 800effe:	9904      	ldr	r1, [sp, #16]
 800f000:	4a54      	ldr	r2, [pc, #336]	; (800f154 <_strtod_l+0x93c>)
 800f002:	464b      	mov	r3, r9
 800f004:	2900      	cmp	r1, #0
 800f006:	f000 8084 	beq.w	800f112 <_strtod_l+0x8fa>
 800f00a:	ea02 0109 	and.w	r1, r2, r9
 800f00e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f012:	dc7e      	bgt.n	800f112 <_strtod_l+0x8fa>
 800f014:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f018:	f77f aeb3 	ble.w	800ed82 <_strtod_l+0x56a>
 800f01c:	4b4e      	ldr	r3, [pc, #312]	; (800f158 <_strtod_l+0x940>)
 800f01e:	4640      	mov	r0, r8
 800f020:	4649      	mov	r1, r9
 800f022:	2200      	movs	r2, #0
 800f024:	f7f1 fae8 	bl	80005f8 <__aeabi_dmul>
 800f028:	4b4a      	ldr	r3, [pc, #296]	; (800f154 <_strtod_l+0x93c>)
 800f02a:	400b      	ands	r3, r1
 800f02c:	4680      	mov	r8, r0
 800f02e:	4689      	mov	r9, r1
 800f030:	2b00      	cmp	r3, #0
 800f032:	f47f ae3f 	bne.w	800ecb4 <_strtod_l+0x49c>
 800f036:	2322      	movs	r3, #34	; 0x22
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	e63b      	b.n	800ecb4 <_strtod_l+0x49c>
 800f03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f040:	fa02 f303 	lsl.w	r3, r2, r3
 800f044:	ea03 0808 	and.w	r8, r3, r8
 800f048:	e6e8      	b.n	800ee1c <_strtod_l+0x604>
 800f04a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f04e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f052:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f056:	36e2      	adds	r6, #226	; 0xe2
 800f058:	fa01 f306 	lsl.w	r3, r1, r6
 800f05c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f060:	e748      	b.n	800eef4 <_strtod_l+0x6dc>
 800f062:	2100      	movs	r1, #0
 800f064:	2301      	movs	r3, #1
 800f066:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f06a:	e743      	b.n	800eef4 <_strtod_l+0x6dc>
 800f06c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f06e:	4632      	mov	r2, r6
 800f070:	4620      	mov	r0, r4
 800f072:	f7ff f961 	bl	800e338 <__lshift>
 800f076:	9016      	str	r0, [sp, #88]	; 0x58
 800f078:	2800      	cmp	r0, #0
 800f07a:	f47f af6b 	bne.w	800ef54 <_strtod_l+0x73c>
 800f07e:	e60f      	b.n	800eca0 <_strtod_l+0x488>
 800f080:	46ca      	mov	sl, r9
 800f082:	d171      	bne.n	800f168 <_strtod_l+0x950>
 800f084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f086:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f08a:	b352      	cbz	r2, 800f0e2 <_strtod_l+0x8ca>
 800f08c:	4a33      	ldr	r2, [pc, #204]	; (800f15c <_strtod_l+0x944>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d12a      	bne.n	800f0e8 <_strtod_l+0x8d0>
 800f092:	9b04      	ldr	r3, [sp, #16]
 800f094:	4641      	mov	r1, r8
 800f096:	b1fb      	cbz	r3, 800f0d8 <_strtod_l+0x8c0>
 800f098:	4b2e      	ldr	r3, [pc, #184]	; (800f154 <_strtod_l+0x93c>)
 800f09a:	ea09 0303 	and.w	r3, r9, r3
 800f09e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f0a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0a6:	d81a      	bhi.n	800f0de <_strtod_l+0x8c6>
 800f0a8:	0d1b      	lsrs	r3, r3, #20
 800f0aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d118      	bne.n	800f0e8 <_strtod_l+0x8d0>
 800f0b6:	4b2a      	ldr	r3, [pc, #168]	; (800f160 <_strtod_l+0x948>)
 800f0b8:	459a      	cmp	sl, r3
 800f0ba:	d102      	bne.n	800f0c2 <_strtod_l+0x8aa>
 800f0bc:	3101      	adds	r1, #1
 800f0be:	f43f adef 	beq.w	800eca0 <_strtod_l+0x488>
 800f0c2:	4b24      	ldr	r3, [pc, #144]	; (800f154 <_strtod_l+0x93c>)
 800f0c4:	ea0a 0303 	and.w	r3, sl, r3
 800f0c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f0cc:	f04f 0800 	mov.w	r8, #0
 800f0d0:	9b04      	ldr	r3, [sp, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1a2      	bne.n	800f01c <_strtod_l+0x804>
 800f0d6:	e5ed      	b.n	800ecb4 <_strtod_l+0x49c>
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0dc:	e7e9      	b.n	800f0b2 <_strtod_l+0x89a>
 800f0de:	4613      	mov	r3, r2
 800f0e0:	e7e7      	b.n	800f0b2 <_strtod_l+0x89a>
 800f0e2:	ea53 0308 	orrs.w	r3, r3, r8
 800f0e6:	d08a      	beq.n	800effe <_strtod_l+0x7e6>
 800f0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0ea:	b1e3      	cbz	r3, 800f126 <_strtod_l+0x90e>
 800f0ec:	ea13 0f0a 	tst.w	r3, sl
 800f0f0:	d0ee      	beq.n	800f0d0 <_strtod_l+0x8b8>
 800f0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f4:	9a04      	ldr	r2, [sp, #16]
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	b1c3      	cbz	r3, 800f12e <_strtod_l+0x916>
 800f0fc:	f7ff fb6f 	bl	800e7de <sulp>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	ec51 0b18 	vmov	r0, r1, d8
 800f108:	f7f1 f8c0 	bl	800028c <__adddf3>
 800f10c:	4680      	mov	r8, r0
 800f10e:	4689      	mov	r9, r1
 800f110:	e7de      	b.n	800f0d0 <_strtod_l+0x8b8>
 800f112:	4013      	ands	r3, r2
 800f114:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f118:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f11c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f120:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f124:	e7d4      	b.n	800f0d0 <_strtod_l+0x8b8>
 800f126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f128:	ea13 0f08 	tst.w	r3, r8
 800f12c:	e7e0      	b.n	800f0f0 <_strtod_l+0x8d8>
 800f12e:	f7ff fb56 	bl	800e7de <sulp>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	ec51 0b18 	vmov	r0, r1, d8
 800f13a:	f7f1 f8a5 	bl	8000288 <__aeabi_dsub>
 800f13e:	2200      	movs	r2, #0
 800f140:	2300      	movs	r3, #0
 800f142:	4680      	mov	r8, r0
 800f144:	4689      	mov	r9, r1
 800f146:	f7f1 fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0c0      	beq.n	800f0d0 <_strtod_l+0x8b8>
 800f14e:	e618      	b.n	800ed82 <_strtod_l+0x56a>
 800f150:	fffffc02 	.word	0xfffffc02
 800f154:	7ff00000 	.word	0x7ff00000
 800f158:	39500000 	.word	0x39500000
 800f15c:	000fffff 	.word	0x000fffff
 800f160:	7fefffff 	.word	0x7fefffff
 800f164:	08010a98 	.word	0x08010a98
 800f168:	4659      	mov	r1, fp
 800f16a:	4628      	mov	r0, r5
 800f16c:	f7ff fac0 	bl	800e6f0 <__ratio>
 800f170:	ec57 6b10 	vmov	r6, r7, d0
 800f174:	ee10 0a10 	vmov	r0, s0
 800f178:	2200      	movs	r2, #0
 800f17a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f17e:	4639      	mov	r1, r7
 800f180:	f7f1 fcb6 	bl	8000af0 <__aeabi_dcmple>
 800f184:	2800      	cmp	r0, #0
 800f186:	d071      	beq.n	800f26c <_strtod_l+0xa54>
 800f188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d17c      	bne.n	800f288 <_strtod_l+0xa70>
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	d15a      	bne.n	800f24a <_strtod_l+0xa32>
 800f194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d15d      	bne.n	800f258 <_strtod_l+0xa40>
 800f19c:	4b90      	ldr	r3, [pc, #576]	; (800f3e0 <_strtod_l+0xbc8>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 fc9a 	bl	8000adc <__aeabi_dcmplt>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d15c      	bne.n	800f266 <_strtod_l+0xa4e>
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	4b8c      	ldr	r3, [pc, #560]	; (800f3e4 <_strtod_l+0xbcc>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f7f1 fa20 	bl	80005f8 <__aeabi_dmul>
 800f1b8:	4606      	mov	r6, r0
 800f1ba:	460f      	mov	r7, r1
 800f1bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f1c0:	9606      	str	r6, [sp, #24]
 800f1c2:	9307      	str	r3, [sp, #28]
 800f1c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f1cc:	4b86      	ldr	r3, [pc, #536]	; (800f3e8 <_strtod_l+0xbd0>)
 800f1ce:	ea0a 0303 	and.w	r3, sl, r3
 800f1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f1d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1d6:	4b85      	ldr	r3, [pc, #532]	; (800f3ec <_strtod_l+0xbd4>)
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	f040 8090 	bne.w	800f2fe <_strtod_l+0xae6>
 800f1de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f1e2:	ec49 8b10 	vmov	d0, r8, r9
 800f1e6:	f7ff f9b9 	bl	800e55c <__ulp>
 800f1ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1ee:	ec51 0b10 	vmov	r0, r1, d0
 800f1f2:	f7f1 fa01 	bl	80005f8 <__aeabi_dmul>
 800f1f6:	4642      	mov	r2, r8
 800f1f8:	464b      	mov	r3, r9
 800f1fa:	f7f1 f847 	bl	800028c <__adddf3>
 800f1fe:	460b      	mov	r3, r1
 800f200:	4979      	ldr	r1, [pc, #484]	; (800f3e8 <_strtod_l+0xbd0>)
 800f202:	4a7b      	ldr	r2, [pc, #492]	; (800f3f0 <_strtod_l+0xbd8>)
 800f204:	4019      	ands	r1, r3
 800f206:	4291      	cmp	r1, r2
 800f208:	4680      	mov	r8, r0
 800f20a:	d944      	bls.n	800f296 <_strtod_l+0xa7e>
 800f20c:	ee18 2a90 	vmov	r2, s17
 800f210:	4b78      	ldr	r3, [pc, #480]	; (800f3f4 <_strtod_l+0xbdc>)
 800f212:	429a      	cmp	r2, r3
 800f214:	d104      	bne.n	800f220 <_strtod_l+0xa08>
 800f216:	ee18 3a10 	vmov	r3, s16
 800f21a:	3301      	adds	r3, #1
 800f21c:	f43f ad40 	beq.w	800eca0 <_strtod_l+0x488>
 800f220:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f3f4 <_strtod_l+0xbdc>
 800f224:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f228:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f22a:	4620      	mov	r0, r4
 800f22c:	f7fe fe6a 	bl	800df04 <_Bfree>
 800f230:	9905      	ldr	r1, [sp, #20]
 800f232:	4620      	mov	r0, r4
 800f234:	f7fe fe66 	bl	800df04 <_Bfree>
 800f238:	4659      	mov	r1, fp
 800f23a:	4620      	mov	r0, r4
 800f23c:	f7fe fe62 	bl	800df04 <_Bfree>
 800f240:	4629      	mov	r1, r5
 800f242:	4620      	mov	r0, r4
 800f244:	f7fe fe5e 	bl	800df04 <_Bfree>
 800f248:	e609      	b.n	800ee5e <_strtod_l+0x646>
 800f24a:	f1b8 0f01 	cmp.w	r8, #1
 800f24e:	d103      	bne.n	800f258 <_strtod_l+0xa40>
 800f250:	f1b9 0f00 	cmp.w	r9, #0
 800f254:	f43f ad95 	beq.w	800ed82 <_strtod_l+0x56a>
 800f258:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f3b0 <_strtod_l+0xb98>
 800f25c:	4f60      	ldr	r7, [pc, #384]	; (800f3e0 <_strtod_l+0xbc8>)
 800f25e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f262:	2600      	movs	r6, #0
 800f264:	e7ae      	b.n	800f1c4 <_strtod_l+0x9ac>
 800f266:	4f5f      	ldr	r7, [pc, #380]	; (800f3e4 <_strtod_l+0xbcc>)
 800f268:	2600      	movs	r6, #0
 800f26a:	e7a7      	b.n	800f1bc <_strtod_l+0x9a4>
 800f26c:	4b5d      	ldr	r3, [pc, #372]	; (800f3e4 <_strtod_l+0xbcc>)
 800f26e:	4630      	mov	r0, r6
 800f270:	4639      	mov	r1, r7
 800f272:	2200      	movs	r2, #0
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27a:	4606      	mov	r6, r0
 800f27c:	460f      	mov	r7, r1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d09c      	beq.n	800f1bc <_strtod_l+0x9a4>
 800f282:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f286:	e79d      	b.n	800f1c4 <_strtod_l+0x9ac>
 800f288:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f3b8 <_strtod_l+0xba0>
 800f28c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f290:	ec57 6b17 	vmov	r6, r7, d7
 800f294:	e796      	b.n	800f1c4 <_strtod_l+0x9ac>
 800f296:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f29a:	9b04      	ldr	r3, [sp, #16]
 800f29c:	46ca      	mov	sl, r9
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1c2      	bne.n	800f228 <_strtod_l+0xa10>
 800f2a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2a8:	0d1b      	lsrs	r3, r3, #20
 800f2aa:	051b      	lsls	r3, r3, #20
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d1bb      	bne.n	800f228 <_strtod_l+0xa10>
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	f7f1 fd00 	bl	8000cb8 <__aeabi_d2lz>
 800f2b8:	f7f1 f970 	bl	800059c <__aeabi_l2d>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	f7f0 ffe0 	bl	8000288 <__aeabi_dsub>
 800f2c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2ce:	ea43 0308 	orr.w	r3, r3, r8
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	4606      	mov	r6, r0
 800f2d6:	460f      	mov	r7, r1
 800f2d8:	d054      	beq.n	800f384 <_strtod_l+0xb6c>
 800f2da:	a339      	add	r3, pc, #228	; (adr r3, 800f3c0 <_strtod_l+0xba8>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	f7f1 fbfc 	bl	8000adc <__aeabi_dcmplt>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	f47f ace5 	bne.w	800ecb4 <_strtod_l+0x49c>
 800f2ea:	a337      	add	r3, pc, #220	; (adr r3, 800f3c8 <_strtod_l+0xbb0>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	4639      	mov	r1, r7
 800f2f4:	f7f1 fc10 	bl	8000b18 <__aeabi_dcmpgt>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d095      	beq.n	800f228 <_strtod_l+0xa10>
 800f2fc:	e4da      	b.n	800ecb4 <_strtod_l+0x49c>
 800f2fe:	9b04      	ldr	r3, [sp, #16]
 800f300:	b333      	cbz	r3, 800f350 <_strtod_l+0xb38>
 800f302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f304:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f308:	d822      	bhi.n	800f350 <_strtod_l+0xb38>
 800f30a:	a331      	add	r3, pc, #196	; (adr r3, 800f3d0 <_strtod_l+0xbb8>)
 800f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f310:	4630      	mov	r0, r6
 800f312:	4639      	mov	r1, r7
 800f314:	f7f1 fbec 	bl	8000af0 <__aeabi_dcmple>
 800f318:	b1a0      	cbz	r0, 800f344 <_strtod_l+0xb2c>
 800f31a:	4639      	mov	r1, r7
 800f31c:	4630      	mov	r0, r6
 800f31e:	f7f1 fc43 	bl	8000ba8 <__aeabi_d2uiz>
 800f322:	2801      	cmp	r0, #1
 800f324:	bf38      	it	cc
 800f326:	2001      	movcc	r0, #1
 800f328:	f7f1 f8ec 	bl	8000504 <__aeabi_ui2d>
 800f32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f32e:	4606      	mov	r6, r0
 800f330:	460f      	mov	r7, r1
 800f332:	bb23      	cbnz	r3, 800f37e <_strtod_l+0xb66>
 800f334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f338:	9010      	str	r0, [sp, #64]	; 0x40
 800f33a:	9311      	str	r3, [sp, #68]	; 0x44
 800f33c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f340:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f348:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f350:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f354:	eeb0 0a48 	vmov.f32	s0, s16
 800f358:	eef0 0a68 	vmov.f32	s1, s17
 800f35c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f360:	f7ff f8fc 	bl	800e55c <__ulp>
 800f364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f368:	ec53 2b10 	vmov	r2, r3, d0
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	ec53 2b18 	vmov	r2, r3, d8
 800f374:	f7f0 ff8a 	bl	800028c <__adddf3>
 800f378:	4680      	mov	r8, r0
 800f37a:	4689      	mov	r9, r1
 800f37c:	e78d      	b.n	800f29a <_strtod_l+0xa82>
 800f37e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f382:	e7db      	b.n	800f33c <_strtod_l+0xb24>
 800f384:	a314      	add	r3, pc, #80	; (adr r3, 800f3d8 <_strtod_l+0xbc0>)
 800f386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38a:	f7f1 fba7 	bl	8000adc <__aeabi_dcmplt>
 800f38e:	e7b3      	b.n	800f2f8 <_strtod_l+0xae0>
 800f390:	2300      	movs	r3, #0
 800f392:	930a      	str	r3, [sp, #40]	; 0x28
 800f394:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f398:	6013      	str	r3, [r2, #0]
 800f39a:	f7ff ba7c 	b.w	800e896 <_strtod_l+0x7e>
 800f39e:	2a65      	cmp	r2, #101	; 0x65
 800f3a0:	f43f ab75 	beq.w	800ea8e <_strtod_l+0x276>
 800f3a4:	2a45      	cmp	r2, #69	; 0x45
 800f3a6:	f43f ab72 	beq.w	800ea8e <_strtod_l+0x276>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	f7ff bbaa 	b.w	800eb04 <_strtod_l+0x2ec>
 800f3b0:	00000000 	.word	0x00000000
 800f3b4:	bff00000 	.word	0xbff00000
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	3ff00000 	.word	0x3ff00000
 800f3c0:	94a03595 	.word	0x94a03595
 800f3c4:	3fdfffff 	.word	0x3fdfffff
 800f3c8:	35afe535 	.word	0x35afe535
 800f3cc:	3fe00000 	.word	0x3fe00000
 800f3d0:	ffc00000 	.word	0xffc00000
 800f3d4:	41dfffff 	.word	0x41dfffff
 800f3d8:	94a03595 	.word	0x94a03595
 800f3dc:	3fcfffff 	.word	0x3fcfffff
 800f3e0:	3ff00000 	.word	0x3ff00000
 800f3e4:	3fe00000 	.word	0x3fe00000
 800f3e8:	7ff00000 	.word	0x7ff00000
 800f3ec:	7fe00000 	.word	0x7fe00000
 800f3f0:	7c9fffff 	.word	0x7c9fffff
 800f3f4:	7fefffff 	.word	0x7fefffff

0800f3f8 <_strtod_r>:
 800f3f8:	4b01      	ldr	r3, [pc, #4]	; (800f400 <_strtod_r+0x8>)
 800f3fa:	f7ff ba0d 	b.w	800e818 <_strtod_l>
 800f3fe:	bf00      	nop
 800f400:	2000006c 	.word	0x2000006c

0800f404 <_strtol_l.constprop.0>:
 800f404:	2b01      	cmp	r3, #1
 800f406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f40a:	d001      	beq.n	800f410 <_strtol_l.constprop.0+0xc>
 800f40c:	2b24      	cmp	r3, #36	; 0x24
 800f40e:	d906      	bls.n	800f41e <_strtol_l.constprop.0+0x1a>
 800f410:	f7fd fd7c 	bl	800cf0c <__errno>
 800f414:	2316      	movs	r3, #22
 800f416:	6003      	str	r3, [r0, #0]
 800f418:	2000      	movs	r0, #0
 800f41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f41e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f504 <_strtol_l.constprop.0+0x100>
 800f422:	460d      	mov	r5, r1
 800f424:	462e      	mov	r6, r5
 800f426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f42a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f42e:	f017 0708 	ands.w	r7, r7, #8
 800f432:	d1f7      	bne.n	800f424 <_strtol_l.constprop.0+0x20>
 800f434:	2c2d      	cmp	r4, #45	; 0x2d
 800f436:	d132      	bne.n	800f49e <_strtol_l.constprop.0+0x9a>
 800f438:	782c      	ldrb	r4, [r5, #0]
 800f43a:	2701      	movs	r7, #1
 800f43c:	1cb5      	adds	r5, r6, #2
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d05b      	beq.n	800f4fa <_strtol_l.constprop.0+0xf6>
 800f442:	2b10      	cmp	r3, #16
 800f444:	d109      	bne.n	800f45a <_strtol_l.constprop.0+0x56>
 800f446:	2c30      	cmp	r4, #48	; 0x30
 800f448:	d107      	bne.n	800f45a <_strtol_l.constprop.0+0x56>
 800f44a:	782c      	ldrb	r4, [r5, #0]
 800f44c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f450:	2c58      	cmp	r4, #88	; 0x58
 800f452:	d14d      	bne.n	800f4f0 <_strtol_l.constprop.0+0xec>
 800f454:	786c      	ldrb	r4, [r5, #1]
 800f456:	2310      	movs	r3, #16
 800f458:	3502      	adds	r5, #2
 800f45a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f45e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f462:	f04f 0e00 	mov.w	lr, #0
 800f466:	fbb8 f9f3 	udiv	r9, r8, r3
 800f46a:	4676      	mov	r6, lr
 800f46c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f470:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f474:	f1bc 0f09 	cmp.w	ip, #9
 800f478:	d816      	bhi.n	800f4a8 <_strtol_l.constprop.0+0xa4>
 800f47a:	4664      	mov	r4, ip
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	dd24      	ble.n	800f4ca <_strtol_l.constprop.0+0xc6>
 800f480:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f484:	d008      	beq.n	800f498 <_strtol_l.constprop.0+0x94>
 800f486:	45b1      	cmp	r9, r6
 800f488:	d31c      	bcc.n	800f4c4 <_strtol_l.constprop.0+0xc0>
 800f48a:	d101      	bne.n	800f490 <_strtol_l.constprop.0+0x8c>
 800f48c:	45a2      	cmp	sl, r4
 800f48e:	db19      	blt.n	800f4c4 <_strtol_l.constprop.0+0xc0>
 800f490:	fb06 4603 	mla	r6, r6, r3, r4
 800f494:	f04f 0e01 	mov.w	lr, #1
 800f498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f49c:	e7e8      	b.n	800f470 <_strtol_l.constprop.0+0x6c>
 800f49e:	2c2b      	cmp	r4, #43	; 0x2b
 800f4a0:	bf04      	itt	eq
 800f4a2:	782c      	ldrbeq	r4, [r5, #0]
 800f4a4:	1cb5      	addeq	r5, r6, #2
 800f4a6:	e7ca      	b.n	800f43e <_strtol_l.constprop.0+0x3a>
 800f4a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f4ac:	f1bc 0f19 	cmp.w	ip, #25
 800f4b0:	d801      	bhi.n	800f4b6 <_strtol_l.constprop.0+0xb2>
 800f4b2:	3c37      	subs	r4, #55	; 0x37
 800f4b4:	e7e2      	b.n	800f47c <_strtol_l.constprop.0+0x78>
 800f4b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f4ba:	f1bc 0f19 	cmp.w	ip, #25
 800f4be:	d804      	bhi.n	800f4ca <_strtol_l.constprop.0+0xc6>
 800f4c0:	3c57      	subs	r4, #87	; 0x57
 800f4c2:	e7db      	b.n	800f47c <_strtol_l.constprop.0+0x78>
 800f4c4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f4c8:	e7e6      	b.n	800f498 <_strtol_l.constprop.0+0x94>
 800f4ca:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f4ce:	d105      	bne.n	800f4dc <_strtol_l.constprop.0+0xd8>
 800f4d0:	2322      	movs	r3, #34	; 0x22
 800f4d2:	6003      	str	r3, [r0, #0]
 800f4d4:	4646      	mov	r6, r8
 800f4d6:	b942      	cbnz	r2, 800f4ea <_strtol_l.constprop.0+0xe6>
 800f4d8:	4630      	mov	r0, r6
 800f4da:	e79e      	b.n	800f41a <_strtol_l.constprop.0+0x16>
 800f4dc:	b107      	cbz	r7, 800f4e0 <_strtol_l.constprop.0+0xdc>
 800f4de:	4276      	negs	r6, r6
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d0f9      	beq.n	800f4d8 <_strtol_l.constprop.0+0xd4>
 800f4e4:	f1be 0f00 	cmp.w	lr, #0
 800f4e8:	d000      	beq.n	800f4ec <_strtol_l.constprop.0+0xe8>
 800f4ea:	1e69      	subs	r1, r5, #1
 800f4ec:	6011      	str	r1, [r2, #0]
 800f4ee:	e7f3      	b.n	800f4d8 <_strtol_l.constprop.0+0xd4>
 800f4f0:	2430      	movs	r4, #48	; 0x30
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1b1      	bne.n	800f45a <_strtol_l.constprop.0+0x56>
 800f4f6:	2308      	movs	r3, #8
 800f4f8:	e7af      	b.n	800f45a <_strtol_l.constprop.0+0x56>
 800f4fa:	2c30      	cmp	r4, #48	; 0x30
 800f4fc:	d0a5      	beq.n	800f44a <_strtol_l.constprop.0+0x46>
 800f4fe:	230a      	movs	r3, #10
 800f500:	e7ab      	b.n	800f45a <_strtol_l.constprop.0+0x56>
 800f502:	bf00      	nop
 800f504:	08010ac1 	.word	0x08010ac1

0800f508 <_strtol_r>:
 800f508:	f7ff bf7c 	b.w	800f404 <_strtol_l.constprop.0>

0800f50c <__ssputs_r>:
 800f50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f510:	688e      	ldr	r6, [r1, #8]
 800f512:	461f      	mov	r7, r3
 800f514:	42be      	cmp	r6, r7
 800f516:	680b      	ldr	r3, [r1, #0]
 800f518:	4682      	mov	sl, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	4690      	mov	r8, r2
 800f51e:	d82c      	bhi.n	800f57a <__ssputs_r+0x6e>
 800f520:	898a      	ldrh	r2, [r1, #12]
 800f522:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f526:	d026      	beq.n	800f576 <__ssputs_r+0x6a>
 800f528:	6965      	ldr	r5, [r4, #20]
 800f52a:	6909      	ldr	r1, [r1, #16]
 800f52c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f530:	eba3 0901 	sub.w	r9, r3, r1
 800f534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f538:	1c7b      	adds	r3, r7, #1
 800f53a:	444b      	add	r3, r9
 800f53c:	106d      	asrs	r5, r5, #1
 800f53e:	429d      	cmp	r5, r3
 800f540:	bf38      	it	cc
 800f542:	461d      	movcc	r5, r3
 800f544:	0553      	lsls	r3, r2, #21
 800f546:	d527      	bpl.n	800f598 <__ssputs_r+0x8c>
 800f548:	4629      	mov	r1, r5
 800f54a:	f7fe fc0f 	bl	800dd6c <_malloc_r>
 800f54e:	4606      	mov	r6, r0
 800f550:	b360      	cbz	r0, 800f5ac <__ssputs_r+0xa0>
 800f552:	6921      	ldr	r1, [r4, #16]
 800f554:	464a      	mov	r2, r9
 800f556:	f7fd fd06 	bl	800cf66 <memcpy>
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f564:	81a3      	strh	r3, [r4, #12]
 800f566:	6126      	str	r6, [r4, #16]
 800f568:	6165      	str	r5, [r4, #20]
 800f56a:	444e      	add	r6, r9
 800f56c:	eba5 0509 	sub.w	r5, r5, r9
 800f570:	6026      	str	r6, [r4, #0]
 800f572:	60a5      	str	r5, [r4, #8]
 800f574:	463e      	mov	r6, r7
 800f576:	42be      	cmp	r6, r7
 800f578:	d900      	bls.n	800f57c <__ssputs_r+0x70>
 800f57a:	463e      	mov	r6, r7
 800f57c:	6820      	ldr	r0, [r4, #0]
 800f57e:	4632      	mov	r2, r6
 800f580:	4641      	mov	r1, r8
 800f582:	f000 f9c9 	bl	800f918 <memmove>
 800f586:	68a3      	ldr	r3, [r4, #8]
 800f588:	1b9b      	subs	r3, r3, r6
 800f58a:	60a3      	str	r3, [r4, #8]
 800f58c:	6823      	ldr	r3, [r4, #0]
 800f58e:	4433      	add	r3, r6
 800f590:	6023      	str	r3, [r4, #0]
 800f592:	2000      	movs	r0, #0
 800f594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f598:	462a      	mov	r2, r5
 800f59a:	f000 fd9e 	bl	80100da <_realloc_r>
 800f59e:	4606      	mov	r6, r0
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d1e0      	bne.n	800f566 <__ssputs_r+0x5a>
 800f5a4:	6921      	ldr	r1, [r4, #16]
 800f5a6:	4650      	mov	r0, sl
 800f5a8:	f7fe fb6c 	bl	800dc84 <_free_r>
 800f5ac:	230c      	movs	r3, #12
 800f5ae:	f8ca 3000 	str.w	r3, [sl]
 800f5b2:	89a3      	ldrh	r3, [r4, #12]
 800f5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b8:	81a3      	strh	r3, [r4, #12]
 800f5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5be:	e7e9      	b.n	800f594 <__ssputs_r+0x88>

0800f5c0 <_svfiprintf_r>:
 800f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	4698      	mov	r8, r3
 800f5c6:	898b      	ldrh	r3, [r1, #12]
 800f5c8:	061b      	lsls	r3, r3, #24
 800f5ca:	b09d      	sub	sp, #116	; 0x74
 800f5cc:	4607      	mov	r7, r0
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	4614      	mov	r4, r2
 800f5d2:	d50e      	bpl.n	800f5f2 <_svfiprintf_r+0x32>
 800f5d4:	690b      	ldr	r3, [r1, #16]
 800f5d6:	b963      	cbnz	r3, 800f5f2 <_svfiprintf_r+0x32>
 800f5d8:	2140      	movs	r1, #64	; 0x40
 800f5da:	f7fe fbc7 	bl	800dd6c <_malloc_r>
 800f5de:	6028      	str	r0, [r5, #0]
 800f5e0:	6128      	str	r0, [r5, #16]
 800f5e2:	b920      	cbnz	r0, 800f5ee <_svfiprintf_r+0x2e>
 800f5e4:	230c      	movs	r3, #12
 800f5e6:	603b      	str	r3, [r7, #0]
 800f5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5ec:	e0d0      	b.n	800f790 <_svfiprintf_r+0x1d0>
 800f5ee:	2340      	movs	r3, #64	; 0x40
 800f5f0:	616b      	str	r3, [r5, #20]
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f6:	2320      	movs	r3, #32
 800f5f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f600:	2330      	movs	r3, #48	; 0x30
 800f602:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f7a8 <_svfiprintf_r+0x1e8>
 800f606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f60a:	f04f 0901 	mov.w	r9, #1
 800f60e:	4623      	mov	r3, r4
 800f610:	469a      	mov	sl, r3
 800f612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f616:	b10a      	cbz	r2, 800f61c <_svfiprintf_r+0x5c>
 800f618:	2a25      	cmp	r2, #37	; 0x25
 800f61a:	d1f9      	bne.n	800f610 <_svfiprintf_r+0x50>
 800f61c:	ebba 0b04 	subs.w	fp, sl, r4
 800f620:	d00b      	beq.n	800f63a <_svfiprintf_r+0x7a>
 800f622:	465b      	mov	r3, fp
 800f624:	4622      	mov	r2, r4
 800f626:	4629      	mov	r1, r5
 800f628:	4638      	mov	r0, r7
 800f62a:	f7ff ff6f 	bl	800f50c <__ssputs_r>
 800f62e:	3001      	adds	r0, #1
 800f630:	f000 80a9 	beq.w	800f786 <_svfiprintf_r+0x1c6>
 800f634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f636:	445a      	add	r2, fp
 800f638:	9209      	str	r2, [sp, #36]	; 0x24
 800f63a:	f89a 3000 	ldrb.w	r3, [sl]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 80a1 	beq.w	800f786 <_svfiprintf_r+0x1c6>
 800f644:	2300      	movs	r3, #0
 800f646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f64e:	f10a 0a01 	add.w	sl, sl, #1
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	9307      	str	r3, [sp, #28]
 800f656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f65a:	931a      	str	r3, [sp, #104]	; 0x68
 800f65c:	4654      	mov	r4, sl
 800f65e:	2205      	movs	r2, #5
 800f660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f664:	4850      	ldr	r0, [pc, #320]	; (800f7a8 <_svfiprintf_r+0x1e8>)
 800f666:	f7f0 fdb3 	bl	80001d0 <memchr>
 800f66a:	9a04      	ldr	r2, [sp, #16]
 800f66c:	b9d8      	cbnz	r0, 800f6a6 <_svfiprintf_r+0xe6>
 800f66e:	06d0      	lsls	r0, r2, #27
 800f670:	bf44      	itt	mi
 800f672:	2320      	movmi	r3, #32
 800f674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f678:	0711      	lsls	r1, r2, #28
 800f67a:	bf44      	itt	mi
 800f67c:	232b      	movmi	r3, #43	; 0x2b
 800f67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f682:	f89a 3000 	ldrb.w	r3, [sl]
 800f686:	2b2a      	cmp	r3, #42	; 0x2a
 800f688:	d015      	beq.n	800f6b6 <_svfiprintf_r+0xf6>
 800f68a:	9a07      	ldr	r2, [sp, #28]
 800f68c:	4654      	mov	r4, sl
 800f68e:	2000      	movs	r0, #0
 800f690:	f04f 0c0a 	mov.w	ip, #10
 800f694:	4621      	mov	r1, r4
 800f696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f69a:	3b30      	subs	r3, #48	; 0x30
 800f69c:	2b09      	cmp	r3, #9
 800f69e:	d94d      	bls.n	800f73c <_svfiprintf_r+0x17c>
 800f6a0:	b1b0      	cbz	r0, 800f6d0 <_svfiprintf_r+0x110>
 800f6a2:	9207      	str	r2, [sp, #28]
 800f6a4:	e014      	b.n	800f6d0 <_svfiprintf_r+0x110>
 800f6a6:	eba0 0308 	sub.w	r3, r0, r8
 800f6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	46a2      	mov	sl, r4
 800f6b4:	e7d2      	b.n	800f65c <_svfiprintf_r+0x9c>
 800f6b6:	9b03      	ldr	r3, [sp, #12]
 800f6b8:	1d19      	adds	r1, r3, #4
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	9103      	str	r1, [sp, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	bfbb      	ittet	lt
 800f6c2:	425b      	neglt	r3, r3
 800f6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c8:	9307      	strge	r3, [sp, #28]
 800f6ca:	9307      	strlt	r3, [sp, #28]
 800f6cc:	bfb8      	it	lt
 800f6ce:	9204      	strlt	r2, [sp, #16]
 800f6d0:	7823      	ldrb	r3, [r4, #0]
 800f6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6d4:	d10c      	bne.n	800f6f0 <_svfiprintf_r+0x130>
 800f6d6:	7863      	ldrb	r3, [r4, #1]
 800f6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f6da:	d134      	bne.n	800f746 <_svfiprintf_r+0x186>
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	1d1a      	adds	r2, r3, #4
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	9203      	str	r2, [sp, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	bfb8      	it	lt
 800f6e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f6ec:	3402      	adds	r4, #2
 800f6ee:	9305      	str	r3, [sp, #20]
 800f6f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f7b8 <_svfiprintf_r+0x1f8>
 800f6f4:	7821      	ldrb	r1, [r4, #0]
 800f6f6:	2203      	movs	r2, #3
 800f6f8:	4650      	mov	r0, sl
 800f6fa:	f7f0 fd69 	bl	80001d0 <memchr>
 800f6fe:	b138      	cbz	r0, 800f710 <_svfiprintf_r+0x150>
 800f700:	9b04      	ldr	r3, [sp, #16]
 800f702:	eba0 000a 	sub.w	r0, r0, sl
 800f706:	2240      	movs	r2, #64	; 0x40
 800f708:	4082      	lsls	r2, r0
 800f70a:	4313      	orrs	r3, r2
 800f70c:	3401      	adds	r4, #1
 800f70e:	9304      	str	r3, [sp, #16]
 800f710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f714:	4825      	ldr	r0, [pc, #148]	; (800f7ac <_svfiprintf_r+0x1ec>)
 800f716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f71a:	2206      	movs	r2, #6
 800f71c:	f7f0 fd58 	bl	80001d0 <memchr>
 800f720:	2800      	cmp	r0, #0
 800f722:	d038      	beq.n	800f796 <_svfiprintf_r+0x1d6>
 800f724:	4b22      	ldr	r3, [pc, #136]	; (800f7b0 <_svfiprintf_r+0x1f0>)
 800f726:	bb1b      	cbnz	r3, 800f770 <_svfiprintf_r+0x1b0>
 800f728:	9b03      	ldr	r3, [sp, #12]
 800f72a:	3307      	adds	r3, #7
 800f72c:	f023 0307 	bic.w	r3, r3, #7
 800f730:	3308      	adds	r3, #8
 800f732:	9303      	str	r3, [sp, #12]
 800f734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f736:	4433      	add	r3, r6
 800f738:	9309      	str	r3, [sp, #36]	; 0x24
 800f73a:	e768      	b.n	800f60e <_svfiprintf_r+0x4e>
 800f73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f740:	460c      	mov	r4, r1
 800f742:	2001      	movs	r0, #1
 800f744:	e7a6      	b.n	800f694 <_svfiprintf_r+0xd4>
 800f746:	2300      	movs	r3, #0
 800f748:	3401      	adds	r4, #1
 800f74a:	9305      	str	r3, [sp, #20]
 800f74c:	4619      	mov	r1, r3
 800f74e:	f04f 0c0a 	mov.w	ip, #10
 800f752:	4620      	mov	r0, r4
 800f754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f758:	3a30      	subs	r2, #48	; 0x30
 800f75a:	2a09      	cmp	r2, #9
 800f75c:	d903      	bls.n	800f766 <_svfiprintf_r+0x1a6>
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0c6      	beq.n	800f6f0 <_svfiprintf_r+0x130>
 800f762:	9105      	str	r1, [sp, #20]
 800f764:	e7c4      	b.n	800f6f0 <_svfiprintf_r+0x130>
 800f766:	fb0c 2101 	mla	r1, ip, r1, r2
 800f76a:	4604      	mov	r4, r0
 800f76c:	2301      	movs	r3, #1
 800f76e:	e7f0      	b.n	800f752 <_svfiprintf_r+0x192>
 800f770:	ab03      	add	r3, sp, #12
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	462a      	mov	r2, r5
 800f776:	4b0f      	ldr	r3, [pc, #60]	; (800f7b4 <_svfiprintf_r+0x1f4>)
 800f778:	a904      	add	r1, sp, #16
 800f77a:	4638      	mov	r0, r7
 800f77c:	f7fc fbee 	bl	800bf5c <_printf_float>
 800f780:	1c42      	adds	r2, r0, #1
 800f782:	4606      	mov	r6, r0
 800f784:	d1d6      	bne.n	800f734 <_svfiprintf_r+0x174>
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	065b      	lsls	r3, r3, #25
 800f78a:	f53f af2d 	bmi.w	800f5e8 <_svfiprintf_r+0x28>
 800f78e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f790:	b01d      	add	sp, #116	; 0x74
 800f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f796:	ab03      	add	r3, sp, #12
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	462a      	mov	r2, r5
 800f79c:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <_svfiprintf_r+0x1f4>)
 800f79e:	a904      	add	r1, sp, #16
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	f7fc fe7f 	bl	800c4a4 <_printf_i>
 800f7a6:	e7eb      	b.n	800f780 <_svfiprintf_r+0x1c0>
 800f7a8:	08010bc1 	.word	0x08010bc1
 800f7ac:	08010bcb 	.word	0x08010bcb
 800f7b0:	0800bf5d 	.word	0x0800bf5d
 800f7b4:	0800f50d 	.word	0x0800f50d
 800f7b8:	08010bc7 	.word	0x08010bc7

0800f7bc <__sflush_r>:
 800f7bc:	898a      	ldrh	r2, [r1, #12]
 800f7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	0710      	lsls	r0, r2, #28
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	d458      	bmi.n	800f87c <__sflush_r+0xc0>
 800f7ca:	684b      	ldr	r3, [r1, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	dc05      	bgt.n	800f7dc <__sflush_r+0x20>
 800f7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	dc02      	bgt.n	800f7dc <__sflush_r+0x20>
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7de:	2e00      	cmp	r6, #0
 800f7e0:	d0f9      	beq.n	800f7d6 <__sflush_r+0x1a>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7e8:	682f      	ldr	r7, [r5, #0]
 800f7ea:	6a21      	ldr	r1, [r4, #32]
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	d032      	beq.n	800f856 <__sflush_r+0x9a>
 800f7f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	075a      	lsls	r2, r3, #29
 800f7f6:	d505      	bpl.n	800f804 <__sflush_r+0x48>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	1ac0      	subs	r0, r0, r3
 800f7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7fe:	b10b      	cbz	r3, 800f804 <__sflush_r+0x48>
 800f800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f802:	1ac0      	subs	r0, r0, r3
 800f804:	2300      	movs	r3, #0
 800f806:	4602      	mov	r2, r0
 800f808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f80a:	6a21      	ldr	r1, [r4, #32]
 800f80c:	4628      	mov	r0, r5
 800f80e:	47b0      	blx	r6
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	89a3      	ldrh	r3, [r4, #12]
 800f814:	d106      	bne.n	800f824 <__sflush_r+0x68>
 800f816:	6829      	ldr	r1, [r5, #0]
 800f818:	291d      	cmp	r1, #29
 800f81a:	d82b      	bhi.n	800f874 <__sflush_r+0xb8>
 800f81c:	4a29      	ldr	r2, [pc, #164]	; (800f8c4 <__sflush_r+0x108>)
 800f81e:	410a      	asrs	r2, r1
 800f820:	07d6      	lsls	r6, r2, #31
 800f822:	d427      	bmi.n	800f874 <__sflush_r+0xb8>
 800f824:	2200      	movs	r2, #0
 800f826:	6062      	str	r2, [r4, #4]
 800f828:	04d9      	lsls	r1, r3, #19
 800f82a:	6922      	ldr	r2, [r4, #16]
 800f82c:	6022      	str	r2, [r4, #0]
 800f82e:	d504      	bpl.n	800f83a <__sflush_r+0x7e>
 800f830:	1c42      	adds	r2, r0, #1
 800f832:	d101      	bne.n	800f838 <__sflush_r+0x7c>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b903      	cbnz	r3, 800f83a <__sflush_r+0x7e>
 800f838:	6560      	str	r0, [r4, #84]	; 0x54
 800f83a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f83c:	602f      	str	r7, [r5, #0]
 800f83e:	2900      	cmp	r1, #0
 800f840:	d0c9      	beq.n	800f7d6 <__sflush_r+0x1a>
 800f842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f846:	4299      	cmp	r1, r3
 800f848:	d002      	beq.n	800f850 <__sflush_r+0x94>
 800f84a:	4628      	mov	r0, r5
 800f84c:	f7fe fa1a 	bl	800dc84 <_free_r>
 800f850:	2000      	movs	r0, #0
 800f852:	6360      	str	r0, [r4, #52]	; 0x34
 800f854:	e7c0      	b.n	800f7d8 <__sflush_r+0x1c>
 800f856:	2301      	movs	r3, #1
 800f858:	4628      	mov	r0, r5
 800f85a:	47b0      	blx	r6
 800f85c:	1c41      	adds	r1, r0, #1
 800f85e:	d1c8      	bne.n	800f7f2 <__sflush_r+0x36>
 800f860:	682b      	ldr	r3, [r5, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d0c5      	beq.n	800f7f2 <__sflush_r+0x36>
 800f866:	2b1d      	cmp	r3, #29
 800f868:	d001      	beq.n	800f86e <__sflush_r+0xb2>
 800f86a:	2b16      	cmp	r3, #22
 800f86c:	d101      	bne.n	800f872 <__sflush_r+0xb6>
 800f86e:	602f      	str	r7, [r5, #0]
 800f870:	e7b1      	b.n	800f7d6 <__sflush_r+0x1a>
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f878:	81a3      	strh	r3, [r4, #12]
 800f87a:	e7ad      	b.n	800f7d8 <__sflush_r+0x1c>
 800f87c:	690f      	ldr	r7, [r1, #16]
 800f87e:	2f00      	cmp	r7, #0
 800f880:	d0a9      	beq.n	800f7d6 <__sflush_r+0x1a>
 800f882:	0793      	lsls	r3, r2, #30
 800f884:	680e      	ldr	r6, [r1, #0]
 800f886:	bf08      	it	eq
 800f888:	694b      	ldreq	r3, [r1, #20]
 800f88a:	600f      	str	r7, [r1, #0]
 800f88c:	bf18      	it	ne
 800f88e:	2300      	movne	r3, #0
 800f890:	eba6 0807 	sub.w	r8, r6, r7
 800f894:	608b      	str	r3, [r1, #8]
 800f896:	f1b8 0f00 	cmp.w	r8, #0
 800f89a:	dd9c      	ble.n	800f7d6 <__sflush_r+0x1a>
 800f89c:	6a21      	ldr	r1, [r4, #32]
 800f89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8a0:	4643      	mov	r3, r8
 800f8a2:	463a      	mov	r2, r7
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b0      	blx	r6
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	dc06      	bgt.n	800f8ba <__sflush_r+0xfe>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8b8:	e78e      	b.n	800f7d8 <__sflush_r+0x1c>
 800f8ba:	4407      	add	r7, r0
 800f8bc:	eba8 0800 	sub.w	r8, r8, r0
 800f8c0:	e7e9      	b.n	800f896 <__sflush_r+0xda>
 800f8c2:	bf00      	nop
 800f8c4:	dfbffffe 	.word	0xdfbffffe

0800f8c8 <_fflush_r>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	690b      	ldr	r3, [r1, #16]
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	b913      	cbnz	r3, 800f8d8 <_fflush_r+0x10>
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	b118      	cbz	r0, 800f8e2 <_fflush_r+0x1a>
 800f8da:	6a03      	ldr	r3, [r0, #32]
 800f8dc:	b90b      	cbnz	r3, 800f8e2 <_fflush_r+0x1a>
 800f8de:	f7fd f99f 	bl	800cc20 <__sinit>
 800f8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0f3      	beq.n	800f8d2 <_fflush_r+0xa>
 800f8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8ec:	07d0      	lsls	r0, r2, #31
 800f8ee:	d404      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f0:	0599      	lsls	r1, r3, #22
 800f8f2:	d402      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8f6:	f7fd fb34 	bl	800cf62 <__retarget_lock_acquire_recursive>
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	f7ff ff5d 	bl	800f7bc <__sflush_r>
 800f902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f904:	07da      	lsls	r2, r3, #31
 800f906:	4605      	mov	r5, r0
 800f908:	d4e4      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	059b      	lsls	r3, r3, #22
 800f90e:	d4e1      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f912:	f7fd fb27 	bl	800cf64 <__retarget_lock_release_recursive>
 800f916:	e7dd      	b.n	800f8d4 <_fflush_r+0xc>

0800f918 <memmove>:
 800f918:	4288      	cmp	r0, r1
 800f91a:	b510      	push	{r4, lr}
 800f91c:	eb01 0402 	add.w	r4, r1, r2
 800f920:	d902      	bls.n	800f928 <memmove+0x10>
 800f922:	4284      	cmp	r4, r0
 800f924:	4623      	mov	r3, r4
 800f926:	d807      	bhi.n	800f938 <memmove+0x20>
 800f928:	1e43      	subs	r3, r0, #1
 800f92a:	42a1      	cmp	r1, r4
 800f92c:	d008      	beq.n	800f940 <memmove+0x28>
 800f92e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f932:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f936:	e7f8      	b.n	800f92a <memmove+0x12>
 800f938:	4402      	add	r2, r0
 800f93a:	4601      	mov	r1, r0
 800f93c:	428a      	cmp	r2, r1
 800f93e:	d100      	bne.n	800f942 <memmove+0x2a>
 800f940:	bd10      	pop	{r4, pc}
 800f942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f94a:	e7f7      	b.n	800f93c <memmove+0x24>

0800f94c <strncmp>:
 800f94c:	b510      	push	{r4, lr}
 800f94e:	b16a      	cbz	r2, 800f96c <strncmp+0x20>
 800f950:	3901      	subs	r1, #1
 800f952:	1884      	adds	r4, r0, r2
 800f954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d103      	bne.n	800f968 <strncmp+0x1c>
 800f960:	42a0      	cmp	r0, r4
 800f962:	d001      	beq.n	800f968 <strncmp+0x1c>
 800f964:	2a00      	cmp	r2, #0
 800f966:	d1f5      	bne.n	800f954 <strncmp+0x8>
 800f968:	1ad0      	subs	r0, r2, r3
 800f96a:	bd10      	pop	{r4, pc}
 800f96c:	4610      	mov	r0, r2
 800f96e:	e7fc      	b.n	800f96a <strncmp+0x1e>

0800f970 <_sbrk_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d06      	ldr	r5, [pc, #24]	; (800f98c <_sbrk_r+0x1c>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	f7f2 fc1c 	bl	80021b8 <_sbrk>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_sbrk_r+0x1a>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_sbrk_r+0x1a>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	2000d6ec 	.word	0x2000d6ec

0800f990 <nan>:
 800f990:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f998 <nan+0x8>
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	00000000 	.word	0x00000000
 800f99c:	7ff80000 	.word	0x7ff80000

0800f9a0 <__assert_func>:
 800f9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9a2:	4614      	mov	r4, r2
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <__assert_func+0x2c>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	68d8      	ldr	r0, [r3, #12]
 800f9ae:	b14c      	cbz	r4, 800f9c4 <__assert_func+0x24>
 800f9b0:	4b07      	ldr	r3, [pc, #28]	; (800f9d0 <__assert_func+0x30>)
 800f9b2:	9100      	str	r1, [sp, #0]
 800f9b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9b8:	4906      	ldr	r1, [pc, #24]	; (800f9d4 <__assert_func+0x34>)
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	f000 fbca 	bl	8010154 <fiprintf>
 800f9c0:	f000 fbda 	bl	8010178 <abort>
 800f9c4:	4b04      	ldr	r3, [pc, #16]	; (800f9d8 <__assert_func+0x38>)
 800f9c6:	461c      	mov	r4, r3
 800f9c8:	e7f3      	b.n	800f9b2 <__assert_func+0x12>
 800f9ca:	bf00      	nop
 800f9cc:	20000068 	.word	0x20000068
 800f9d0:	08010bda 	.word	0x08010bda
 800f9d4:	08010be7 	.word	0x08010be7
 800f9d8:	08010c15 	.word	0x08010c15

0800f9dc <_calloc_r>:
 800f9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9de:	fba1 2402 	umull	r2, r4, r1, r2
 800f9e2:	b94c      	cbnz	r4, 800f9f8 <_calloc_r+0x1c>
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	9201      	str	r2, [sp, #4]
 800f9e8:	f7fe f9c0 	bl	800dd6c <_malloc_r>
 800f9ec:	9a01      	ldr	r2, [sp, #4]
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	b930      	cbnz	r0, 800fa00 <_calloc_r+0x24>
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	b003      	add	sp, #12
 800f9f6:	bd30      	pop	{r4, r5, pc}
 800f9f8:	220c      	movs	r2, #12
 800f9fa:	6002      	str	r2, [r0, #0]
 800f9fc:	2500      	movs	r5, #0
 800f9fe:	e7f8      	b.n	800f9f2 <_calloc_r+0x16>
 800fa00:	4621      	mov	r1, r4
 800fa02:	f7fd f9da 	bl	800cdba <memset>
 800fa06:	e7f4      	b.n	800f9f2 <_calloc_r+0x16>

0800fa08 <rshift>:
 800fa08:	6903      	ldr	r3, [r0, #16]
 800fa0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa16:	f100 0414 	add.w	r4, r0, #20
 800fa1a:	dd45      	ble.n	800faa8 <rshift+0xa0>
 800fa1c:	f011 011f 	ands.w	r1, r1, #31
 800fa20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa28:	d10c      	bne.n	800fa44 <rshift+0x3c>
 800fa2a:	f100 0710 	add.w	r7, r0, #16
 800fa2e:	4629      	mov	r1, r5
 800fa30:	42b1      	cmp	r1, r6
 800fa32:	d334      	bcc.n	800fa9e <rshift+0x96>
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	1eea      	subs	r2, r5, #3
 800fa3a:	4296      	cmp	r6, r2
 800fa3c:	bf38      	it	cc
 800fa3e:	2300      	movcc	r3, #0
 800fa40:	4423      	add	r3, r4
 800fa42:	e015      	b.n	800fa70 <rshift+0x68>
 800fa44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa48:	f1c1 0820 	rsb	r8, r1, #32
 800fa4c:	40cf      	lsrs	r7, r1
 800fa4e:	f105 0e04 	add.w	lr, r5, #4
 800fa52:	46a1      	mov	r9, r4
 800fa54:	4576      	cmp	r6, lr
 800fa56:	46f4      	mov	ip, lr
 800fa58:	d815      	bhi.n	800fa86 <rshift+0x7e>
 800fa5a:	1a9a      	subs	r2, r3, r2
 800fa5c:	0092      	lsls	r2, r2, #2
 800fa5e:	3a04      	subs	r2, #4
 800fa60:	3501      	adds	r5, #1
 800fa62:	42ae      	cmp	r6, r5
 800fa64:	bf38      	it	cc
 800fa66:	2200      	movcc	r2, #0
 800fa68:	18a3      	adds	r3, r4, r2
 800fa6a:	50a7      	str	r7, [r4, r2]
 800fa6c:	b107      	cbz	r7, 800fa70 <rshift+0x68>
 800fa6e:	3304      	adds	r3, #4
 800fa70:	1b1a      	subs	r2, r3, r4
 800fa72:	42a3      	cmp	r3, r4
 800fa74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa78:	bf08      	it	eq
 800fa7a:	2300      	moveq	r3, #0
 800fa7c:	6102      	str	r2, [r0, #16]
 800fa7e:	bf08      	it	eq
 800fa80:	6143      	streq	r3, [r0, #20]
 800fa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa86:	f8dc c000 	ldr.w	ip, [ip]
 800fa8a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa8e:	ea4c 0707 	orr.w	r7, ip, r7
 800fa92:	f849 7b04 	str.w	r7, [r9], #4
 800fa96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa9a:	40cf      	lsrs	r7, r1
 800fa9c:	e7da      	b.n	800fa54 <rshift+0x4c>
 800fa9e:	f851 cb04 	ldr.w	ip, [r1], #4
 800faa2:	f847 cf04 	str.w	ip, [r7, #4]!
 800faa6:	e7c3      	b.n	800fa30 <rshift+0x28>
 800faa8:	4623      	mov	r3, r4
 800faaa:	e7e1      	b.n	800fa70 <rshift+0x68>

0800faac <__hexdig_fun>:
 800faac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fab0:	2b09      	cmp	r3, #9
 800fab2:	d802      	bhi.n	800faba <__hexdig_fun+0xe>
 800fab4:	3820      	subs	r0, #32
 800fab6:	b2c0      	uxtb	r0, r0
 800fab8:	4770      	bx	lr
 800faba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fabe:	2b05      	cmp	r3, #5
 800fac0:	d801      	bhi.n	800fac6 <__hexdig_fun+0x1a>
 800fac2:	3847      	subs	r0, #71	; 0x47
 800fac4:	e7f7      	b.n	800fab6 <__hexdig_fun+0xa>
 800fac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800faca:	2b05      	cmp	r3, #5
 800facc:	d801      	bhi.n	800fad2 <__hexdig_fun+0x26>
 800face:	3827      	subs	r0, #39	; 0x27
 800fad0:	e7f1      	b.n	800fab6 <__hexdig_fun+0xa>
 800fad2:	2000      	movs	r0, #0
 800fad4:	4770      	bx	lr
	...

0800fad8 <__gethex>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	4617      	mov	r7, r2
 800fade:	680a      	ldr	r2, [r1, #0]
 800fae0:	b085      	sub	sp, #20
 800fae2:	f102 0b02 	add.w	fp, r2, #2
 800fae6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800faea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800faee:	4681      	mov	r9, r0
 800faf0:	468a      	mov	sl, r1
 800faf2:	9302      	str	r3, [sp, #8]
 800faf4:	32fe      	adds	r2, #254	; 0xfe
 800faf6:	eb02 030b 	add.w	r3, r2, fp
 800fafa:	46d8      	mov	r8, fp
 800fafc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	2830      	cmp	r0, #48	; 0x30
 800fb04:	d0f7      	beq.n	800faf6 <__gethex+0x1e>
 800fb06:	f7ff ffd1 	bl	800faac <__hexdig_fun>
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d138      	bne.n	800fb82 <__gethex+0xaa>
 800fb10:	49a7      	ldr	r1, [pc, #668]	; (800fdb0 <__gethex+0x2d8>)
 800fb12:	2201      	movs	r2, #1
 800fb14:	4640      	mov	r0, r8
 800fb16:	f7ff ff19 	bl	800f94c <strncmp>
 800fb1a:	4606      	mov	r6, r0
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	d169      	bne.n	800fbf4 <__gethex+0x11c>
 800fb20:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fb24:	465d      	mov	r5, fp
 800fb26:	f7ff ffc1 	bl	800faac <__hexdig_fun>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d064      	beq.n	800fbf8 <__gethex+0x120>
 800fb2e:	465a      	mov	r2, fp
 800fb30:	7810      	ldrb	r0, [r2, #0]
 800fb32:	2830      	cmp	r0, #48	; 0x30
 800fb34:	4690      	mov	r8, r2
 800fb36:	f102 0201 	add.w	r2, r2, #1
 800fb3a:	d0f9      	beq.n	800fb30 <__gethex+0x58>
 800fb3c:	f7ff ffb6 	bl	800faac <__hexdig_fun>
 800fb40:	2301      	movs	r3, #1
 800fb42:	fab0 f480 	clz	r4, r0
 800fb46:	0964      	lsrs	r4, r4, #5
 800fb48:	465e      	mov	r6, fp
 800fb4a:	9301      	str	r3, [sp, #4]
 800fb4c:	4642      	mov	r2, r8
 800fb4e:	4615      	mov	r5, r2
 800fb50:	3201      	adds	r2, #1
 800fb52:	7828      	ldrb	r0, [r5, #0]
 800fb54:	f7ff ffaa 	bl	800faac <__hexdig_fun>
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d1f8      	bne.n	800fb4e <__gethex+0x76>
 800fb5c:	4994      	ldr	r1, [pc, #592]	; (800fdb0 <__gethex+0x2d8>)
 800fb5e:	2201      	movs	r2, #1
 800fb60:	4628      	mov	r0, r5
 800fb62:	f7ff fef3 	bl	800f94c <strncmp>
 800fb66:	b978      	cbnz	r0, 800fb88 <__gethex+0xb0>
 800fb68:	b946      	cbnz	r6, 800fb7c <__gethex+0xa4>
 800fb6a:	1c6e      	adds	r6, r5, #1
 800fb6c:	4632      	mov	r2, r6
 800fb6e:	4615      	mov	r5, r2
 800fb70:	3201      	adds	r2, #1
 800fb72:	7828      	ldrb	r0, [r5, #0]
 800fb74:	f7ff ff9a 	bl	800faac <__hexdig_fun>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d1f8      	bne.n	800fb6e <__gethex+0x96>
 800fb7c:	1b73      	subs	r3, r6, r5
 800fb7e:	009e      	lsls	r6, r3, #2
 800fb80:	e004      	b.n	800fb8c <__gethex+0xb4>
 800fb82:	2400      	movs	r4, #0
 800fb84:	4626      	mov	r6, r4
 800fb86:	e7e1      	b.n	800fb4c <__gethex+0x74>
 800fb88:	2e00      	cmp	r6, #0
 800fb8a:	d1f7      	bne.n	800fb7c <__gethex+0xa4>
 800fb8c:	782b      	ldrb	r3, [r5, #0]
 800fb8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb92:	2b50      	cmp	r3, #80	; 0x50
 800fb94:	d13d      	bne.n	800fc12 <__gethex+0x13a>
 800fb96:	786b      	ldrb	r3, [r5, #1]
 800fb98:	2b2b      	cmp	r3, #43	; 0x2b
 800fb9a:	d02f      	beq.n	800fbfc <__gethex+0x124>
 800fb9c:	2b2d      	cmp	r3, #45	; 0x2d
 800fb9e:	d031      	beq.n	800fc04 <__gethex+0x12c>
 800fba0:	1c69      	adds	r1, r5, #1
 800fba2:	f04f 0b00 	mov.w	fp, #0
 800fba6:	7808      	ldrb	r0, [r1, #0]
 800fba8:	f7ff ff80 	bl	800faac <__hexdig_fun>
 800fbac:	1e42      	subs	r2, r0, #1
 800fbae:	b2d2      	uxtb	r2, r2
 800fbb0:	2a18      	cmp	r2, #24
 800fbb2:	d82e      	bhi.n	800fc12 <__gethex+0x13a>
 800fbb4:	f1a0 0210 	sub.w	r2, r0, #16
 800fbb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fbbc:	f7ff ff76 	bl	800faac <__hexdig_fun>
 800fbc0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800fbc4:	fa5f fc8c 	uxtb.w	ip, ip
 800fbc8:	f1bc 0f18 	cmp.w	ip, #24
 800fbcc:	d91d      	bls.n	800fc0a <__gethex+0x132>
 800fbce:	f1bb 0f00 	cmp.w	fp, #0
 800fbd2:	d000      	beq.n	800fbd6 <__gethex+0xfe>
 800fbd4:	4252      	negs	r2, r2
 800fbd6:	4416      	add	r6, r2
 800fbd8:	f8ca 1000 	str.w	r1, [sl]
 800fbdc:	b1dc      	cbz	r4, 800fc16 <__gethex+0x13e>
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	bf14      	ite	ne
 800fbe4:	f04f 0800 	movne.w	r8, #0
 800fbe8:	f04f 0806 	moveq.w	r8, #6
 800fbec:	4640      	mov	r0, r8
 800fbee:	b005      	add	sp, #20
 800fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf4:	4645      	mov	r5, r8
 800fbf6:	4626      	mov	r6, r4
 800fbf8:	2401      	movs	r4, #1
 800fbfa:	e7c7      	b.n	800fb8c <__gethex+0xb4>
 800fbfc:	f04f 0b00 	mov.w	fp, #0
 800fc00:	1ca9      	adds	r1, r5, #2
 800fc02:	e7d0      	b.n	800fba6 <__gethex+0xce>
 800fc04:	f04f 0b01 	mov.w	fp, #1
 800fc08:	e7fa      	b.n	800fc00 <__gethex+0x128>
 800fc0a:	230a      	movs	r3, #10
 800fc0c:	fb03 0002 	mla	r0, r3, r2, r0
 800fc10:	e7d0      	b.n	800fbb4 <__gethex+0xdc>
 800fc12:	4629      	mov	r1, r5
 800fc14:	e7e0      	b.n	800fbd8 <__gethex+0x100>
 800fc16:	eba5 0308 	sub.w	r3, r5, r8
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	4621      	mov	r1, r4
 800fc1e:	2b07      	cmp	r3, #7
 800fc20:	dc0a      	bgt.n	800fc38 <__gethex+0x160>
 800fc22:	4648      	mov	r0, r9
 800fc24:	f7fe f92e 	bl	800de84 <_Balloc>
 800fc28:	4604      	mov	r4, r0
 800fc2a:	b940      	cbnz	r0, 800fc3e <__gethex+0x166>
 800fc2c:	4b61      	ldr	r3, [pc, #388]	; (800fdb4 <__gethex+0x2dc>)
 800fc2e:	4602      	mov	r2, r0
 800fc30:	21e4      	movs	r1, #228	; 0xe4
 800fc32:	4861      	ldr	r0, [pc, #388]	; (800fdb8 <__gethex+0x2e0>)
 800fc34:	f7ff feb4 	bl	800f9a0 <__assert_func>
 800fc38:	3101      	adds	r1, #1
 800fc3a:	105b      	asrs	r3, r3, #1
 800fc3c:	e7ef      	b.n	800fc1e <__gethex+0x146>
 800fc3e:	f100 0a14 	add.w	sl, r0, #20
 800fc42:	2300      	movs	r3, #0
 800fc44:	495a      	ldr	r1, [pc, #360]	; (800fdb0 <__gethex+0x2d8>)
 800fc46:	f8cd a004 	str.w	sl, [sp, #4]
 800fc4a:	469b      	mov	fp, r3
 800fc4c:	45a8      	cmp	r8, r5
 800fc4e:	d342      	bcc.n	800fcd6 <__gethex+0x1fe>
 800fc50:	9801      	ldr	r0, [sp, #4]
 800fc52:	f840 bb04 	str.w	fp, [r0], #4
 800fc56:	eba0 000a 	sub.w	r0, r0, sl
 800fc5a:	1080      	asrs	r0, r0, #2
 800fc5c:	6120      	str	r0, [r4, #16]
 800fc5e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fc62:	4658      	mov	r0, fp
 800fc64:	f7fe fa00 	bl	800e068 <__hi0bits>
 800fc68:	683d      	ldr	r5, [r7, #0]
 800fc6a:	eba8 0000 	sub.w	r0, r8, r0
 800fc6e:	42a8      	cmp	r0, r5
 800fc70:	dd59      	ble.n	800fd26 <__gethex+0x24e>
 800fc72:	eba0 0805 	sub.w	r8, r0, r5
 800fc76:	4641      	mov	r1, r8
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7fe fd8f 	bl	800e79c <__any_on>
 800fc7e:	4683      	mov	fp, r0
 800fc80:	b1b8      	cbz	r0, 800fcb2 <__gethex+0x1da>
 800fc82:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800fc86:	1159      	asrs	r1, r3, #5
 800fc88:	f003 021f 	and.w	r2, r3, #31
 800fc8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fc90:	f04f 0b01 	mov.w	fp, #1
 800fc94:	fa0b f202 	lsl.w	r2, fp, r2
 800fc98:	420a      	tst	r2, r1
 800fc9a:	d00a      	beq.n	800fcb2 <__gethex+0x1da>
 800fc9c:	455b      	cmp	r3, fp
 800fc9e:	dd06      	ble.n	800fcae <__gethex+0x1d6>
 800fca0:	f1a8 0102 	sub.w	r1, r8, #2
 800fca4:	4620      	mov	r0, r4
 800fca6:	f7fe fd79 	bl	800e79c <__any_on>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d138      	bne.n	800fd20 <__gethex+0x248>
 800fcae:	f04f 0b02 	mov.w	fp, #2
 800fcb2:	4641      	mov	r1, r8
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f7ff fea7 	bl	800fa08 <rshift>
 800fcba:	4446      	add	r6, r8
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	42b3      	cmp	r3, r6
 800fcc0:	da41      	bge.n	800fd46 <__gethex+0x26e>
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4648      	mov	r0, r9
 800fcc6:	f7fe f91d 	bl	800df04 <_Bfree>
 800fcca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fccc:	2300      	movs	r3, #0
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fcd4:	e78a      	b.n	800fbec <__gethex+0x114>
 800fcd6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fcda:	2a2e      	cmp	r2, #46	; 0x2e
 800fcdc:	d014      	beq.n	800fd08 <__gethex+0x230>
 800fcde:	2b20      	cmp	r3, #32
 800fce0:	d106      	bne.n	800fcf0 <__gethex+0x218>
 800fce2:	9b01      	ldr	r3, [sp, #4]
 800fce4:	f843 bb04 	str.w	fp, [r3], #4
 800fce8:	f04f 0b00 	mov.w	fp, #0
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	465b      	mov	r3, fp
 800fcf0:	7828      	ldrb	r0, [r5, #0]
 800fcf2:	9303      	str	r3, [sp, #12]
 800fcf4:	f7ff feda 	bl	800faac <__hexdig_fun>
 800fcf8:	9b03      	ldr	r3, [sp, #12]
 800fcfa:	f000 000f 	and.w	r0, r0, #15
 800fcfe:	4098      	lsls	r0, r3
 800fd00:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd04:	3304      	adds	r3, #4
 800fd06:	e7a1      	b.n	800fc4c <__gethex+0x174>
 800fd08:	45a8      	cmp	r8, r5
 800fd0a:	d8e8      	bhi.n	800fcde <__gethex+0x206>
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	4628      	mov	r0, r5
 800fd10:	9303      	str	r3, [sp, #12]
 800fd12:	f7ff fe1b 	bl	800f94c <strncmp>
 800fd16:	4926      	ldr	r1, [pc, #152]	; (800fdb0 <__gethex+0x2d8>)
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d1df      	bne.n	800fcde <__gethex+0x206>
 800fd1e:	e795      	b.n	800fc4c <__gethex+0x174>
 800fd20:	f04f 0b03 	mov.w	fp, #3
 800fd24:	e7c5      	b.n	800fcb2 <__gethex+0x1da>
 800fd26:	da0b      	bge.n	800fd40 <__gethex+0x268>
 800fd28:	eba5 0800 	sub.w	r8, r5, r0
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	4642      	mov	r2, r8
 800fd30:	4648      	mov	r0, r9
 800fd32:	f7fe fb01 	bl	800e338 <__lshift>
 800fd36:	eba6 0608 	sub.w	r6, r6, r8
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	f100 0a14 	add.w	sl, r0, #20
 800fd40:	f04f 0b00 	mov.w	fp, #0
 800fd44:	e7ba      	b.n	800fcbc <__gethex+0x1e4>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	42b3      	cmp	r3, r6
 800fd4a:	dd73      	ble.n	800fe34 <__gethex+0x35c>
 800fd4c:	1b9e      	subs	r6, r3, r6
 800fd4e:	42b5      	cmp	r5, r6
 800fd50:	dc34      	bgt.n	800fdbc <__gethex+0x2e4>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d023      	beq.n	800fda0 <__gethex+0x2c8>
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d025      	beq.n	800fda8 <__gethex+0x2d0>
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d115      	bne.n	800fd8c <__gethex+0x2b4>
 800fd60:	42b5      	cmp	r5, r6
 800fd62:	d113      	bne.n	800fd8c <__gethex+0x2b4>
 800fd64:	2d01      	cmp	r5, #1
 800fd66:	d10b      	bne.n	800fd80 <__gethex+0x2a8>
 800fd68:	9a02      	ldr	r2, [sp, #8]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6013      	str	r3, [r2, #0]
 800fd6e:	2301      	movs	r3, #1
 800fd70:	6123      	str	r3, [r4, #16]
 800fd72:	f8ca 3000 	str.w	r3, [sl]
 800fd76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd78:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fd7c:	601c      	str	r4, [r3, #0]
 800fd7e:	e735      	b.n	800fbec <__gethex+0x114>
 800fd80:	1e69      	subs	r1, r5, #1
 800fd82:	4620      	mov	r0, r4
 800fd84:	f7fe fd0a 	bl	800e79c <__any_on>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d1ed      	bne.n	800fd68 <__gethex+0x290>
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	4648      	mov	r0, r9
 800fd90:	f7fe f8b8 	bl	800df04 <_Bfree>
 800fd94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd96:	2300      	movs	r3, #0
 800fd98:	6013      	str	r3, [r2, #0]
 800fd9a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fd9e:	e725      	b.n	800fbec <__gethex+0x114>
 800fda0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1f2      	bne.n	800fd8c <__gethex+0x2b4>
 800fda6:	e7df      	b.n	800fd68 <__gethex+0x290>
 800fda8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1dc      	bne.n	800fd68 <__gethex+0x290>
 800fdae:	e7ed      	b.n	800fd8c <__gethex+0x2b4>
 800fdb0:	08010a6c 	.word	0x08010a6c
 800fdb4:	08010901 	.word	0x08010901
 800fdb8:	08010c16 	.word	0x08010c16
 800fdbc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800fdc0:	f1bb 0f00 	cmp.w	fp, #0
 800fdc4:	d133      	bne.n	800fe2e <__gethex+0x356>
 800fdc6:	f1b8 0f00 	cmp.w	r8, #0
 800fdca:	d004      	beq.n	800fdd6 <__gethex+0x2fe>
 800fdcc:	4641      	mov	r1, r8
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7fe fce4 	bl	800e79c <__any_on>
 800fdd4:	4683      	mov	fp, r0
 800fdd6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fdda:	2301      	movs	r3, #1
 800fddc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fde0:	f008 081f 	and.w	r8, r8, #31
 800fde4:	fa03 f308 	lsl.w	r3, r3, r8
 800fde8:	4213      	tst	r3, r2
 800fdea:	4631      	mov	r1, r6
 800fdec:	4620      	mov	r0, r4
 800fdee:	bf18      	it	ne
 800fdf0:	f04b 0b02 	orrne.w	fp, fp, #2
 800fdf4:	1bad      	subs	r5, r5, r6
 800fdf6:	f7ff fe07 	bl	800fa08 <rshift>
 800fdfa:	687e      	ldr	r6, [r7, #4]
 800fdfc:	f04f 0802 	mov.w	r8, #2
 800fe00:	f1bb 0f00 	cmp.w	fp, #0
 800fe04:	d04a      	beq.n	800fe9c <__gethex+0x3c4>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d016      	beq.n	800fe3a <__gethex+0x362>
 800fe0c:	2b03      	cmp	r3, #3
 800fe0e:	d018      	beq.n	800fe42 <__gethex+0x36a>
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d109      	bne.n	800fe28 <__gethex+0x350>
 800fe14:	f01b 0f02 	tst.w	fp, #2
 800fe18:	d006      	beq.n	800fe28 <__gethex+0x350>
 800fe1a:	f8da 3000 	ldr.w	r3, [sl]
 800fe1e:	ea4b 0b03 	orr.w	fp, fp, r3
 800fe22:	f01b 0f01 	tst.w	fp, #1
 800fe26:	d10f      	bne.n	800fe48 <__gethex+0x370>
 800fe28:	f048 0810 	orr.w	r8, r8, #16
 800fe2c:	e036      	b.n	800fe9c <__gethex+0x3c4>
 800fe2e:	f04f 0b01 	mov.w	fp, #1
 800fe32:	e7d0      	b.n	800fdd6 <__gethex+0x2fe>
 800fe34:	f04f 0801 	mov.w	r8, #1
 800fe38:	e7e2      	b.n	800fe00 <__gethex+0x328>
 800fe3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe3c:	f1c3 0301 	rsb	r3, r3, #1
 800fe40:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d0ef      	beq.n	800fe28 <__gethex+0x350>
 800fe48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe4c:	f104 0214 	add.w	r2, r4, #20
 800fe50:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4694      	mov	ip, r2
 800fe5e:	f852 1b04 	ldr.w	r1, [r2], #4
 800fe62:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800fe66:	d01e      	beq.n	800fea6 <__gethex+0x3ce>
 800fe68:	3101      	adds	r1, #1
 800fe6a:	f8cc 1000 	str.w	r1, [ip]
 800fe6e:	f1b8 0f02 	cmp.w	r8, #2
 800fe72:	f104 0214 	add.w	r2, r4, #20
 800fe76:	d13d      	bne.n	800fef4 <__gethex+0x41c>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	42ab      	cmp	r3, r5
 800fe7e:	d10b      	bne.n	800fe98 <__gethex+0x3c0>
 800fe80:	1169      	asrs	r1, r5, #5
 800fe82:	2301      	movs	r3, #1
 800fe84:	f005 051f 	and.w	r5, r5, #31
 800fe88:	fa03 f505 	lsl.w	r5, r3, r5
 800fe8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe90:	421d      	tst	r5, r3
 800fe92:	bf18      	it	ne
 800fe94:	f04f 0801 	movne.w	r8, #1
 800fe98:	f048 0820 	orr.w	r8, r8, #32
 800fe9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe9e:	601c      	str	r4, [r3, #0]
 800fea0:	9b02      	ldr	r3, [sp, #8]
 800fea2:	601e      	str	r6, [r3, #0]
 800fea4:	e6a2      	b.n	800fbec <__gethex+0x114>
 800fea6:	4290      	cmp	r0, r2
 800fea8:	f842 3c04 	str.w	r3, [r2, #-4]
 800feac:	d8d6      	bhi.n	800fe5c <__gethex+0x384>
 800feae:	68a2      	ldr	r2, [r4, #8]
 800feb0:	4593      	cmp	fp, r2
 800feb2:	db17      	blt.n	800fee4 <__gethex+0x40c>
 800feb4:	6861      	ldr	r1, [r4, #4]
 800feb6:	4648      	mov	r0, r9
 800feb8:	3101      	adds	r1, #1
 800feba:	f7fd ffe3 	bl	800de84 <_Balloc>
 800febe:	4682      	mov	sl, r0
 800fec0:	b918      	cbnz	r0, 800feca <__gethex+0x3f2>
 800fec2:	4b1b      	ldr	r3, [pc, #108]	; (800ff30 <__gethex+0x458>)
 800fec4:	4602      	mov	r2, r0
 800fec6:	2184      	movs	r1, #132	; 0x84
 800fec8:	e6b3      	b.n	800fc32 <__gethex+0x15a>
 800feca:	6922      	ldr	r2, [r4, #16]
 800fecc:	3202      	adds	r2, #2
 800fece:	f104 010c 	add.w	r1, r4, #12
 800fed2:	0092      	lsls	r2, r2, #2
 800fed4:	300c      	adds	r0, #12
 800fed6:	f7fd f846 	bl	800cf66 <memcpy>
 800feda:	4621      	mov	r1, r4
 800fedc:	4648      	mov	r0, r9
 800fede:	f7fe f811 	bl	800df04 <_Bfree>
 800fee2:	4654      	mov	r4, sl
 800fee4:	6922      	ldr	r2, [r4, #16]
 800fee6:	1c51      	adds	r1, r2, #1
 800fee8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800feec:	6121      	str	r1, [r4, #16]
 800feee:	2101      	movs	r1, #1
 800fef0:	6151      	str	r1, [r2, #20]
 800fef2:	e7bc      	b.n	800fe6e <__gethex+0x396>
 800fef4:	6921      	ldr	r1, [r4, #16]
 800fef6:	4559      	cmp	r1, fp
 800fef8:	dd0b      	ble.n	800ff12 <__gethex+0x43a>
 800fefa:	2101      	movs	r1, #1
 800fefc:	4620      	mov	r0, r4
 800fefe:	f7ff fd83 	bl	800fa08 <rshift>
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	3601      	adds	r6, #1
 800ff06:	42b3      	cmp	r3, r6
 800ff08:	f6ff aedb 	blt.w	800fcc2 <__gethex+0x1ea>
 800ff0c:	f04f 0801 	mov.w	r8, #1
 800ff10:	e7c2      	b.n	800fe98 <__gethex+0x3c0>
 800ff12:	f015 051f 	ands.w	r5, r5, #31
 800ff16:	d0f9      	beq.n	800ff0c <__gethex+0x434>
 800ff18:	9b01      	ldr	r3, [sp, #4]
 800ff1a:	441a      	add	r2, r3
 800ff1c:	f1c5 0520 	rsb	r5, r5, #32
 800ff20:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ff24:	f7fe f8a0 	bl	800e068 <__hi0bits>
 800ff28:	42a8      	cmp	r0, r5
 800ff2a:	dbe6      	blt.n	800fefa <__gethex+0x422>
 800ff2c:	e7ee      	b.n	800ff0c <__gethex+0x434>
 800ff2e:	bf00      	nop
 800ff30:	08010901 	.word	0x08010901

0800ff34 <L_shift>:
 800ff34:	f1c2 0208 	rsb	r2, r2, #8
 800ff38:	0092      	lsls	r2, r2, #2
 800ff3a:	b570      	push	{r4, r5, r6, lr}
 800ff3c:	f1c2 0620 	rsb	r6, r2, #32
 800ff40:	6843      	ldr	r3, [r0, #4]
 800ff42:	6804      	ldr	r4, [r0, #0]
 800ff44:	fa03 f506 	lsl.w	r5, r3, r6
 800ff48:	432c      	orrs	r4, r5
 800ff4a:	40d3      	lsrs	r3, r2
 800ff4c:	6004      	str	r4, [r0, #0]
 800ff4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff52:	4288      	cmp	r0, r1
 800ff54:	d3f4      	bcc.n	800ff40 <L_shift+0xc>
 800ff56:	bd70      	pop	{r4, r5, r6, pc}

0800ff58 <__match>:
 800ff58:	b530      	push	{r4, r5, lr}
 800ff5a:	6803      	ldr	r3, [r0, #0]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff62:	b914      	cbnz	r4, 800ff6a <__match+0x12>
 800ff64:	6003      	str	r3, [r0, #0]
 800ff66:	2001      	movs	r0, #1
 800ff68:	bd30      	pop	{r4, r5, pc}
 800ff6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ff72:	2d19      	cmp	r5, #25
 800ff74:	bf98      	it	ls
 800ff76:	3220      	addls	r2, #32
 800ff78:	42a2      	cmp	r2, r4
 800ff7a:	d0f0      	beq.n	800ff5e <__match+0x6>
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	e7f3      	b.n	800ff68 <__match+0x10>

0800ff80 <__hexnan>:
 800ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff84:	680b      	ldr	r3, [r1, #0]
 800ff86:	6801      	ldr	r1, [r0, #0]
 800ff88:	115e      	asrs	r6, r3, #5
 800ff8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff8e:	f013 031f 	ands.w	r3, r3, #31
 800ff92:	b087      	sub	sp, #28
 800ff94:	bf18      	it	ne
 800ff96:	3604      	addne	r6, #4
 800ff98:	2500      	movs	r5, #0
 800ff9a:	1f37      	subs	r7, r6, #4
 800ff9c:	4682      	mov	sl, r0
 800ff9e:	4690      	mov	r8, r2
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ffa6:	46b9      	mov	r9, r7
 800ffa8:	463c      	mov	r4, r7
 800ffaa:	9502      	str	r5, [sp, #8]
 800ffac:	46ab      	mov	fp, r5
 800ffae:	784a      	ldrb	r2, [r1, #1]
 800ffb0:	1c4b      	adds	r3, r1, #1
 800ffb2:	9303      	str	r3, [sp, #12]
 800ffb4:	b342      	cbz	r2, 8010008 <__hexnan+0x88>
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	9105      	str	r1, [sp, #20]
 800ffba:	9204      	str	r2, [sp, #16]
 800ffbc:	f7ff fd76 	bl	800faac <__hexdig_fun>
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d14f      	bne.n	8010064 <__hexnan+0xe4>
 800ffc4:	9a04      	ldr	r2, [sp, #16]
 800ffc6:	9905      	ldr	r1, [sp, #20]
 800ffc8:	2a20      	cmp	r2, #32
 800ffca:	d818      	bhi.n	800fffe <__hexnan+0x7e>
 800ffcc:	9b02      	ldr	r3, [sp, #8]
 800ffce:	459b      	cmp	fp, r3
 800ffd0:	dd13      	ble.n	800fffa <__hexnan+0x7a>
 800ffd2:	454c      	cmp	r4, r9
 800ffd4:	d206      	bcs.n	800ffe4 <__hexnan+0x64>
 800ffd6:	2d07      	cmp	r5, #7
 800ffd8:	dc04      	bgt.n	800ffe4 <__hexnan+0x64>
 800ffda:	462a      	mov	r2, r5
 800ffdc:	4649      	mov	r1, r9
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f7ff ffa8 	bl	800ff34 <L_shift>
 800ffe4:	4544      	cmp	r4, r8
 800ffe6:	d950      	bls.n	801008a <__hexnan+0x10a>
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f1a4 0904 	sub.w	r9, r4, #4
 800ffee:	f844 3c04 	str.w	r3, [r4, #-4]
 800fff2:	f8cd b008 	str.w	fp, [sp, #8]
 800fff6:	464c      	mov	r4, r9
 800fff8:	461d      	mov	r5, r3
 800fffa:	9903      	ldr	r1, [sp, #12]
 800fffc:	e7d7      	b.n	800ffae <__hexnan+0x2e>
 800fffe:	2a29      	cmp	r2, #41	; 0x29
 8010000:	d155      	bne.n	80100ae <__hexnan+0x12e>
 8010002:	3102      	adds	r1, #2
 8010004:	f8ca 1000 	str.w	r1, [sl]
 8010008:	f1bb 0f00 	cmp.w	fp, #0
 801000c:	d04f      	beq.n	80100ae <__hexnan+0x12e>
 801000e:	454c      	cmp	r4, r9
 8010010:	d206      	bcs.n	8010020 <__hexnan+0xa0>
 8010012:	2d07      	cmp	r5, #7
 8010014:	dc04      	bgt.n	8010020 <__hexnan+0xa0>
 8010016:	462a      	mov	r2, r5
 8010018:	4649      	mov	r1, r9
 801001a:	4620      	mov	r0, r4
 801001c:	f7ff ff8a 	bl	800ff34 <L_shift>
 8010020:	4544      	cmp	r4, r8
 8010022:	d934      	bls.n	801008e <__hexnan+0x10e>
 8010024:	f1a8 0204 	sub.w	r2, r8, #4
 8010028:	4623      	mov	r3, r4
 801002a:	f853 1b04 	ldr.w	r1, [r3], #4
 801002e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010032:	429f      	cmp	r7, r3
 8010034:	d2f9      	bcs.n	801002a <__hexnan+0xaa>
 8010036:	1b3b      	subs	r3, r7, r4
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	3304      	adds	r3, #4
 801003e:	3e03      	subs	r6, #3
 8010040:	3401      	adds	r4, #1
 8010042:	42a6      	cmp	r6, r4
 8010044:	bf38      	it	cc
 8010046:	2304      	movcc	r3, #4
 8010048:	4443      	add	r3, r8
 801004a:	2200      	movs	r2, #0
 801004c:	f843 2b04 	str.w	r2, [r3], #4
 8010050:	429f      	cmp	r7, r3
 8010052:	d2fb      	bcs.n	801004c <__hexnan+0xcc>
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	b91b      	cbnz	r3, 8010060 <__hexnan+0xe0>
 8010058:	4547      	cmp	r7, r8
 801005a:	d126      	bne.n	80100aa <__hexnan+0x12a>
 801005c:	2301      	movs	r3, #1
 801005e:	603b      	str	r3, [r7, #0]
 8010060:	2005      	movs	r0, #5
 8010062:	e025      	b.n	80100b0 <__hexnan+0x130>
 8010064:	3501      	adds	r5, #1
 8010066:	2d08      	cmp	r5, #8
 8010068:	f10b 0b01 	add.w	fp, fp, #1
 801006c:	dd06      	ble.n	801007c <__hexnan+0xfc>
 801006e:	4544      	cmp	r4, r8
 8010070:	d9c3      	bls.n	800fffa <__hexnan+0x7a>
 8010072:	2300      	movs	r3, #0
 8010074:	f844 3c04 	str.w	r3, [r4, #-4]
 8010078:	2501      	movs	r5, #1
 801007a:	3c04      	subs	r4, #4
 801007c:	6822      	ldr	r2, [r4, #0]
 801007e:	f000 000f 	and.w	r0, r0, #15
 8010082:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010086:	6020      	str	r0, [r4, #0]
 8010088:	e7b7      	b.n	800fffa <__hexnan+0x7a>
 801008a:	2508      	movs	r5, #8
 801008c:	e7b5      	b.n	800fffa <__hexnan+0x7a>
 801008e:	9b01      	ldr	r3, [sp, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d0df      	beq.n	8010054 <__hexnan+0xd4>
 8010094:	f1c3 0320 	rsb	r3, r3, #32
 8010098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801009c:	40da      	lsrs	r2, r3
 801009e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80100a2:	4013      	ands	r3, r2
 80100a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80100a8:	e7d4      	b.n	8010054 <__hexnan+0xd4>
 80100aa:	3f04      	subs	r7, #4
 80100ac:	e7d2      	b.n	8010054 <__hexnan+0xd4>
 80100ae:	2004      	movs	r0, #4
 80100b0:	b007      	add	sp, #28
 80100b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100b6 <__ascii_mbtowc>:
 80100b6:	b082      	sub	sp, #8
 80100b8:	b901      	cbnz	r1, 80100bc <__ascii_mbtowc+0x6>
 80100ba:	a901      	add	r1, sp, #4
 80100bc:	b142      	cbz	r2, 80100d0 <__ascii_mbtowc+0x1a>
 80100be:	b14b      	cbz	r3, 80100d4 <__ascii_mbtowc+0x1e>
 80100c0:	7813      	ldrb	r3, [r2, #0]
 80100c2:	600b      	str	r3, [r1, #0]
 80100c4:	7812      	ldrb	r2, [r2, #0]
 80100c6:	1e10      	subs	r0, r2, #0
 80100c8:	bf18      	it	ne
 80100ca:	2001      	movne	r0, #1
 80100cc:	b002      	add	sp, #8
 80100ce:	4770      	bx	lr
 80100d0:	4610      	mov	r0, r2
 80100d2:	e7fb      	b.n	80100cc <__ascii_mbtowc+0x16>
 80100d4:	f06f 0001 	mvn.w	r0, #1
 80100d8:	e7f8      	b.n	80100cc <__ascii_mbtowc+0x16>

080100da <_realloc_r>:
 80100da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100de:	4680      	mov	r8, r0
 80100e0:	4614      	mov	r4, r2
 80100e2:	460e      	mov	r6, r1
 80100e4:	b921      	cbnz	r1, 80100f0 <_realloc_r+0x16>
 80100e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100ea:	4611      	mov	r1, r2
 80100ec:	f7fd be3e 	b.w	800dd6c <_malloc_r>
 80100f0:	b92a      	cbnz	r2, 80100fe <_realloc_r+0x24>
 80100f2:	f7fd fdc7 	bl	800dc84 <_free_r>
 80100f6:	4625      	mov	r5, r4
 80100f8:	4628      	mov	r0, r5
 80100fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100fe:	f000 f842 	bl	8010186 <_malloc_usable_size_r>
 8010102:	4284      	cmp	r4, r0
 8010104:	4607      	mov	r7, r0
 8010106:	d802      	bhi.n	801010e <_realloc_r+0x34>
 8010108:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801010c:	d812      	bhi.n	8010134 <_realloc_r+0x5a>
 801010e:	4621      	mov	r1, r4
 8010110:	4640      	mov	r0, r8
 8010112:	f7fd fe2b 	bl	800dd6c <_malloc_r>
 8010116:	4605      	mov	r5, r0
 8010118:	2800      	cmp	r0, #0
 801011a:	d0ed      	beq.n	80100f8 <_realloc_r+0x1e>
 801011c:	42bc      	cmp	r4, r7
 801011e:	4622      	mov	r2, r4
 8010120:	4631      	mov	r1, r6
 8010122:	bf28      	it	cs
 8010124:	463a      	movcs	r2, r7
 8010126:	f7fc ff1e 	bl	800cf66 <memcpy>
 801012a:	4631      	mov	r1, r6
 801012c:	4640      	mov	r0, r8
 801012e:	f7fd fda9 	bl	800dc84 <_free_r>
 8010132:	e7e1      	b.n	80100f8 <_realloc_r+0x1e>
 8010134:	4635      	mov	r5, r6
 8010136:	e7df      	b.n	80100f8 <_realloc_r+0x1e>

08010138 <__ascii_wctomb>:
 8010138:	b149      	cbz	r1, 801014e <__ascii_wctomb+0x16>
 801013a:	2aff      	cmp	r2, #255	; 0xff
 801013c:	bf85      	ittet	hi
 801013e:	238a      	movhi	r3, #138	; 0x8a
 8010140:	6003      	strhi	r3, [r0, #0]
 8010142:	700a      	strbls	r2, [r1, #0]
 8010144:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010148:	bf98      	it	ls
 801014a:	2001      	movls	r0, #1
 801014c:	4770      	bx	lr
 801014e:	4608      	mov	r0, r1
 8010150:	4770      	bx	lr
	...

08010154 <fiprintf>:
 8010154:	b40e      	push	{r1, r2, r3}
 8010156:	b503      	push	{r0, r1, lr}
 8010158:	4601      	mov	r1, r0
 801015a:	ab03      	add	r3, sp, #12
 801015c:	4805      	ldr	r0, [pc, #20]	; (8010174 <fiprintf+0x20>)
 801015e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010162:	6800      	ldr	r0, [r0, #0]
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	f000 f83f 	bl	80101e8 <_vfiprintf_r>
 801016a:	b002      	add	sp, #8
 801016c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010170:	b003      	add	sp, #12
 8010172:	4770      	bx	lr
 8010174:	20000068 	.word	0x20000068

08010178 <abort>:
 8010178:	b508      	push	{r3, lr}
 801017a:	2006      	movs	r0, #6
 801017c:	f000 fa0c 	bl	8010598 <raise>
 8010180:	2001      	movs	r0, #1
 8010182:	f7f1 ffa1 	bl	80020c8 <_exit>

08010186 <_malloc_usable_size_r>:
 8010186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801018a:	1f18      	subs	r0, r3, #4
 801018c:	2b00      	cmp	r3, #0
 801018e:	bfbc      	itt	lt
 8010190:	580b      	ldrlt	r3, [r1, r0]
 8010192:	18c0      	addlt	r0, r0, r3
 8010194:	4770      	bx	lr

08010196 <__sfputc_r>:
 8010196:	6893      	ldr	r3, [r2, #8]
 8010198:	3b01      	subs	r3, #1
 801019a:	2b00      	cmp	r3, #0
 801019c:	b410      	push	{r4}
 801019e:	6093      	str	r3, [r2, #8]
 80101a0:	da08      	bge.n	80101b4 <__sfputc_r+0x1e>
 80101a2:	6994      	ldr	r4, [r2, #24]
 80101a4:	42a3      	cmp	r3, r4
 80101a6:	db01      	blt.n	80101ac <__sfputc_r+0x16>
 80101a8:	290a      	cmp	r1, #10
 80101aa:	d103      	bne.n	80101b4 <__sfputc_r+0x1e>
 80101ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b0:	f000 b934 	b.w	801041c <__swbuf_r>
 80101b4:	6813      	ldr	r3, [r2, #0]
 80101b6:	1c58      	adds	r0, r3, #1
 80101b8:	6010      	str	r0, [r2, #0]
 80101ba:	7019      	strb	r1, [r3, #0]
 80101bc:	4608      	mov	r0, r1
 80101be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <__sfputs_r>:
 80101c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c6:	4606      	mov	r6, r0
 80101c8:	460f      	mov	r7, r1
 80101ca:	4614      	mov	r4, r2
 80101cc:	18d5      	adds	r5, r2, r3
 80101ce:	42ac      	cmp	r4, r5
 80101d0:	d101      	bne.n	80101d6 <__sfputs_r+0x12>
 80101d2:	2000      	movs	r0, #0
 80101d4:	e007      	b.n	80101e6 <__sfputs_r+0x22>
 80101d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101da:	463a      	mov	r2, r7
 80101dc:	4630      	mov	r0, r6
 80101de:	f7ff ffda 	bl	8010196 <__sfputc_r>
 80101e2:	1c43      	adds	r3, r0, #1
 80101e4:	d1f3      	bne.n	80101ce <__sfputs_r+0xa>
 80101e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101e8 <_vfiprintf_r>:
 80101e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ec:	460d      	mov	r5, r1
 80101ee:	b09d      	sub	sp, #116	; 0x74
 80101f0:	4614      	mov	r4, r2
 80101f2:	4698      	mov	r8, r3
 80101f4:	4606      	mov	r6, r0
 80101f6:	b118      	cbz	r0, 8010200 <_vfiprintf_r+0x18>
 80101f8:	6a03      	ldr	r3, [r0, #32]
 80101fa:	b90b      	cbnz	r3, 8010200 <_vfiprintf_r+0x18>
 80101fc:	f7fc fd10 	bl	800cc20 <__sinit>
 8010200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010202:	07d9      	lsls	r1, r3, #31
 8010204:	d405      	bmi.n	8010212 <_vfiprintf_r+0x2a>
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	059a      	lsls	r2, r3, #22
 801020a:	d402      	bmi.n	8010212 <_vfiprintf_r+0x2a>
 801020c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801020e:	f7fc fea8 	bl	800cf62 <__retarget_lock_acquire_recursive>
 8010212:	89ab      	ldrh	r3, [r5, #12]
 8010214:	071b      	lsls	r3, r3, #28
 8010216:	d501      	bpl.n	801021c <_vfiprintf_r+0x34>
 8010218:	692b      	ldr	r3, [r5, #16]
 801021a:	b99b      	cbnz	r3, 8010244 <_vfiprintf_r+0x5c>
 801021c:	4629      	mov	r1, r5
 801021e:	4630      	mov	r0, r6
 8010220:	f000 f93a 	bl	8010498 <__swsetup_r>
 8010224:	b170      	cbz	r0, 8010244 <_vfiprintf_r+0x5c>
 8010226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010228:	07dc      	lsls	r4, r3, #31
 801022a:	d504      	bpl.n	8010236 <_vfiprintf_r+0x4e>
 801022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010230:	b01d      	add	sp, #116	; 0x74
 8010232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010236:	89ab      	ldrh	r3, [r5, #12]
 8010238:	0598      	lsls	r0, r3, #22
 801023a:	d4f7      	bmi.n	801022c <_vfiprintf_r+0x44>
 801023c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801023e:	f7fc fe91 	bl	800cf64 <__retarget_lock_release_recursive>
 8010242:	e7f3      	b.n	801022c <_vfiprintf_r+0x44>
 8010244:	2300      	movs	r3, #0
 8010246:	9309      	str	r3, [sp, #36]	; 0x24
 8010248:	2320      	movs	r3, #32
 801024a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801024e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010252:	2330      	movs	r3, #48	; 0x30
 8010254:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010408 <_vfiprintf_r+0x220>
 8010258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801025c:	f04f 0901 	mov.w	r9, #1
 8010260:	4623      	mov	r3, r4
 8010262:	469a      	mov	sl, r3
 8010264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010268:	b10a      	cbz	r2, 801026e <_vfiprintf_r+0x86>
 801026a:	2a25      	cmp	r2, #37	; 0x25
 801026c:	d1f9      	bne.n	8010262 <_vfiprintf_r+0x7a>
 801026e:	ebba 0b04 	subs.w	fp, sl, r4
 8010272:	d00b      	beq.n	801028c <_vfiprintf_r+0xa4>
 8010274:	465b      	mov	r3, fp
 8010276:	4622      	mov	r2, r4
 8010278:	4629      	mov	r1, r5
 801027a:	4630      	mov	r0, r6
 801027c:	f7ff ffa2 	bl	80101c4 <__sfputs_r>
 8010280:	3001      	adds	r0, #1
 8010282:	f000 80a9 	beq.w	80103d8 <_vfiprintf_r+0x1f0>
 8010286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010288:	445a      	add	r2, fp
 801028a:	9209      	str	r2, [sp, #36]	; 0x24
 801028c:	f89a 3000 	ldrb.w	r3, [sl]
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 80a1 	beq.w	80103d8 <_vfiprintf_r+0x1f0>
 8010296:	2300      	movs	r3, #0
 8010298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801029c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102a0:	f10a 0a01 	add.w	sl, sl, #1
 80102a4:	9304      	str	r3, [sp, #16]
 80102a6:	9307      	str	r3, [sp, #28]
 80102a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102ac:	931a      	str	r3, [sp, #104]	; 0x68
 80102ae:	4654      	mov	r4, sl
 80102b0:	2205      	movs	r2, #5
 80102b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102b6:	4854      	ldr	r0, [pc, #336]	; (8010408 <_vfiprintf_r+0x220>)
 80102b8:	f7ef ff8a 	bl	80001d0 <memchr>
 80102bc:	9a04      	ldr	r2, [sp, #16]
 80102be:	b9d8      	cbnz	r0, 80102f8 <_vfiprintf_r+0x110>
 80102c0:	06d1      	lsls	r1, r2, #27
 80102c2:	bf44      	itt	mi
 80102c4:	2320      	movmi	r3, #32
 80102c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ca:	0713      	lsls	r3, r2, #28
 80102cc:	bf44      	itt	mi
 80102ce:	232b      	movmi	r3, #43	; 0x2b
 80102d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102d4:	f89a 3000 	ldrb.w	r3, [sl]
 80102d8:	2b2a      	cmp	r3, #42	; 0x2a
 80102da:	d015      	beq.n	8010308 <_vfiprintf_r+0x120>
 80102dc:	9a07      	ldr	r2, [sp, #28]
 80102de:	4654      	mov	r4, sl
 80102e0:	2000      	movs	r0, #0
 80102e2:	f04f 0c0a 	mov.w	ip, #10
 80102e6:	4621      	mov	r1, r4
 80102e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ec:	3b30      	subs	r3, #48	; 0x30
 80102ee:	2b09      	cmp	r3, #9
 80102f0:	d94d      	bls.n	801038e <_vfiprintf_r+0x1a6>
 80102f2:	b1b0      	cbz	r0, 8010322 <_vfiprintf_r+0x13a>
 80102f4:	9207      	str	r2, [sp, #28]
 80102f6:	e014      	b.n	8010322 <_vfiprintf_r+0x13a>
 80102f8:	eba0 0308 	sub.w	r3, r0, r8
 80102fc:	fa09 f303 	lsl.w	r3, r9, r3
 8010300:	4313      	orrs	r3, r2
 8010302:	9304      	str	r3, [sp, #16]
 8010304:	46a2      	mov	sl, r4
 8010306:	e7d2      	b.n	80102ae <_vfiprintf_r+0xc6>
 8010308:	9b03      	ldr	r3, [sp, #12]
 801030a:	1d19      	adds	r1, r3, #4
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	9103      	str	r1, [sp, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	bfbb      	ittet	lt
 8010314:	425b      	neglt	r3, r3
 8010316:	f042 0202 	orrlt.w	r2, r2, #2
 801031a:	9307      	strge	r3, [sp, #28]
 801031c:	9307      	strlt	r3, [sp, #28]
 801031e:	bfb8      	it	lt
 8010320:	9204      	strlt	r2, [sp, #16]
 8010322:	7823      	ldrb	r3, [r4, #0]
 8010324:	2b2e      	cmp	r3, #46	; 0x2e
 8010326:	d10c      	bne.n	8010342 <_vfiprintf_r+0x15a>
 8010328:	7863      	ldrb	r3, [r4, #1]
 801032a:	2b2a      	cmp	r3, #42	; 0x2a
 801032c:	d134      	bne.n	8010398 <_vfiprintf_r+0x1b0>
 801032e:	9b03      	ldr	r3, [sp, #12]
 8010330:	1d1a      	adds	r2, r3, #4
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	9203      	str	r2, [sp, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	bfb8      	it	lt
 801033a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801033e:	3402      	adds	r4, #2
 8010340:	9305      	str	r3, [sp, #20]
 8010342:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010418 <_vfiprintf_r+0x230>
 8010346:	7821      	ldrb	r1, [r4, #0]
 8010348:	2203      	movs	r2, #3
 801034a:	4650      	mov	r0, sl
 801034c:	f7ef ff40 	bl	80001d0 <memchr>
 8010350:	b138      	cbz	r0, 8010362 <_vfiprintf_r+0x17a>
 8010352:	9b04      	ldr	r3, [sp, #16]
 8010354:	eba0 000a 	sub.w	r0, r0, sl
 8010358:	2240      	movs	r2, #64	; 0x40
 801035a:	4082      	lsls	r2, r0
 801035c:	4313      	orrs	r3, r2
 801035e:	3401      	adds	r4, #1
 8010360:	9304      	str	r3, [sp, #16]
 8010362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010366:	4829      	ldr	r0, [pc, #164]	; (801040c <_vfiprintf_r+0x224>)
 8010368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801036c:	2206      	movs	r2, #6
 801036e:	f7ef ff2f 	bl	80001d0 <memchr>
 8010372:	2800      	cmp	r0, #0
 8010374:	d03f      	beq.n	80103f6 <_vfiprintf_r+0x20e>
 8010376:	4b26      	ldr	r3, [pc, #152]	; (8010410 <_vfiprintf_r+0x228>)
 8010378:	bb1b      	cbnz	r3, 80103c2 <_vfiprintf_r+0x1da>
 801037a:	9b03      	ldr	r3, [sp, #12]
 801037c:	3307      	adds	r3, #7
 801037e:	f023 0307 	bic.w	r3, r3, #7
 8010382:	3308      	adds	r3, #8
 8010384:	9303      	str	r3, [sp, #12]
 8010386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010388:	443b      	add	r3, r7
 801038a:	9309      	str	r3, [sp, #36]	; 0x24
 801038c:	e768      	b.n	8010260 <_vfiprintf_r+0x78>
 801038e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010392:	460c      	mov	r4, r1
 8010394:	2001      	movs	r0, #1
 8010396:	e7a6      	b.n	80102e6 <_vfiprintf_r+0xfe>
 8010398:	2300      	movs	r3, #0
 801039a:	3401      	adds	r4, #1
 801039c:	9305      	str	r3, [sp, #20]
 801039e:	4619      	mov	r1, r3
 80103a0:	f04f 0c0a 	mov.w	ip, #10
 80103a4:	4620      	mov	r0, r4
 80103a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103aa:	3a30      	subs	r2, #48	; 0x30
 80103ac:	2a09      	cmp	r2, #9
 80103ae:	d903      	bls.n	80103b8 <_vfiprintf_r+0x1d0>
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d0c6      	beq.n	8010342 <_vfiprintf_r+0x15a>
 80103b4:	9105      	str	r1, [sp, #20]
 80103b6:	e7c4      	b.n	8010342 <_vfiprintf_r+0x15a>
 80103b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80103bc:	4604      	mov	r4, r0
 80103be:	2301      	movs	r3, #1
 80103c0:	e7f0      	b.n	80103a4 <_vfiprintf_r+0x1bc>
 80103c2:	ab03      	add	r3, sp, #12
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	462a      	mov	r2, r5
 80103c8:	4b12      	ldr	r3, [pc, #72]	; (8010414 <_vfiprintf_r+0x22c>)
 80103ca:	a904      	add	r1, sp, #16
 80103cc:	4630      	mov	r0, r6
 80103ce:	f7fb fdc5 	bl	800bf5c <_printf_float>
 80103d2:	4607      	mov	r7, r0
 80103d4:	1c78      	adds	r0, r7, #1
 80103d6:	d1d6      	bne.n	8010386 <_vfiprintf_r+0x19e>
 80103d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103da:	07d9      	lsls	r1, r3, #31
 80103dc:	d405      	bmi.n	80103ea <_vfiprintf_r+0x202>
 80103de:	89ab      	ldrh	r3, [r5, #12]
 80103e0:	059a      	lsls	r2, r3, #22
 80103e2:	d402      	bmi.n	80103ea <_vfiprintf_r+0x202>
 80103e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103e6:	f7fc fdbd 	bl	800cf64 <__retarget_lock_release_recursive>
 80103ea:	89ab      	ldrh	r3, [r5, #12]
 80103ec:	065b      	lsls	r3, r3, #25
 80103ee:	f53f af1d 	bmi.w	801022c <_vfiprintf_r+0x44>
 80103f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103f4:	e71c      	b.n	8010230 <_vfiprintf_r+0x48>
 80103f6:	ab03      	add	r3, sp, #12
 80103f8:	9300      	str	r3, [sp, #0]
 80103fa:	462a      	mov	r2, r5
 80103fc:	4b05      	ldr	r3, [pc, #20]	; (8010414 <_vfiprintf_r+0x22c>)
 80103fe:	a904      	add	r1, sp, #16
 8010400:	4630      	mov	r0, r6
 8010402:	f7fc f84f 	bl	800c4a4 <_printf_i>
 8010406:	e7e4      	b.n	80103d2 <_vfiprintf_r+0x1ea>
 8010408:	08010bc1 	.word	0x08010bc1
 801040c:	08010bcb 	.word	0x08010bcb
 8010410:	0800bf5d 	.word	0x0800bf5d
 8010414:	080101c5 	.word	0x080101c5
 8010418:	08010bc7 	.word	0x08010bc7

0801041c <__swbuf_r>:
 801041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041e:	460e      	mov	r6, r1
 8010420:	4614      	mov	r4, r2
 8010422:	4605      	mov	r5, r0
 8010424:	b118      	cbz	r0, 801042e <__swbuf_r+0x12>
 8010426:	6a03      	ldr	r3, [r0, #32]
 8010428:	b90b      	cbnz	r3, 801042e <__swbuf_r+0x12>
 801042a:	f7fc fbf9 	bl	800cc20 <__sinit>
 801042e:	69a3      	ldr	r3, [r4, #24]
 8010430:	60a3      	str	r3, [r4, #8]
 8010432:	89a3      	ldrh	r3, [r4, #12]
 8010434:	071a      	lsls	r2, r3, #28
 8010436:	d525      	bpl.n	8010484 <__swbuf_r+0x68>
 8010438:	6923      	ldr	r3, [r4, #16]
 801043a:	b31b      	cbz	r3, 8010484 <__swbuf_r+0x68>
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	6922      	ldr	r2, [r4, #16]
 8010440:	1a98      	subs	r0, r3, r2
 8010442:	6963      	ldr	r3, [r4, #20]
 8010444:	b2f6      	uxtb	r6, r6
 8010446:	4283      	cmp	r3, r0
 8010448:	4637      	mov	r7, r6
 801044a:	dc04      	bgt.n	8010456 <__swbuf_r+0x3a>
 801044c:	4621      	mov	r1, r4
 801044e:	4628      	mov	r0, r5
 8010450:	f7ff fa3a 	bl	800f8c8 <_fflush_r>
 8010454:	b9e0      	cbnz	r0, 8010490 <__swbuf_r+0x74>
 8010456:	68a3      	ldr	r3, [r4, #8]
 8010458:	3b01      	subs	r3, #1
 801045a:	60a3      	str	r3, [r4, #8]
 801045c:	6823      	ldr	r3, [r4, #0]
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	6022      	str	r2, [r4, #0]
 8010462:	701e      	strb	r6, [r3, #0]
 8010464:	6962      	ldr	r2, [r4, #20]
 8010466:	1c43      	adds	r3, r0, #1
 8010468:	429a      	cmp	r2, r3
 801046a:	d004      	beq.n	8010476 <__swbuf_r+0x5a>
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	07db      	lsls	r3, r3, #31
 8010470:	d506      	bpl.n	8010480 <__swbuf_r+0x64>
 8010472:	2e0a      	cmp	r6, #10
 8010474:	d104      	bne.n	8010480 <__swbuf_r+0x64>
 8010476:	4621      	mov	r1, r4
 8010478:	4628      	mov	r0, r5
 801047a:	f7ff fa25 	bl	800f8c8 <_fflush_r>
 801047e:	b938      	cbnz	r0, 8010490 <__swbuf_r+0x74>
 8010480:	4638      	mov	r0, r7
 8010482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010484:	4621      	mov	r1, r4
 8010486:	4628      	mov	r0, r5
 8010488:	f000 f806 	bl	8010498 <__swsetup_r>
 801048c:	2800      	cmp	r0, #0
 801048e:	d0d5      	beq.n	801043c <__swbuf_r+0x20>
 8010490:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010494:	e7f4      	b.n	8010480 <__swbuf_r+0x64>
	...

08010498 <__swsetup_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4b2a      	ldr	r3, [pc, #168]	; (8010544 <__swsetup_r+0xac>)
 801049c:	4605      	mov	r5, r0
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	460c      	mov	r4, r1
 80104a2:	b118      	cbz	r0, 80104ac <__swsetup_r+0x14>
 80104a4:	6a03      	ldr	r3, [r0, #32]
 80104a6:	b90b      	cbnz	r3, 80104ac <__swsetup_r+0x14>
 80104a8:	f7fc fbba 	bl	800cc20 <__sinit>
 80104ac:	89a3      	ldrh	r3, [r4, #12]
 80104ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104b2:	0718      	lsls	r0, r3, #28
 80104b4:	d422      	bmi.n	80104fc <__swsetup_r+0x64>
 80104b6:	06d9      	lsls	r1, r3, #27
 80104b8:	d407      	bmi.n	80104ca <__swsetup_r+0x32>
 80104ba:	2309      	movs	r3, #9
 80104bc:	602b      	str	r3, [r5, #0]
 80104be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104c2:	81a3      	strh	r3, [r4, #12]
 80104c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104c8:	e034      	b.n	8010534 <__swsetup_r+0x9c>
 80104ca:	0758      	lsls	r0, r3, #29
 80104cc:	d512      	bpl.n	80104f4 <__swsetup_r+0x5c>
 80104ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104d0:	b141      	cbz	r1, 80104e4 <__swsetup_r+0x4c>
 80104d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104d6:	4299      	cmp	r1, r3
 80104d8:	d002      	beq.n	80104e0 <__swsetup_r+0x48>
 80104da:	4628      	mov	r0, r5
 80104dc:	f7fd fbd2 	bl	800dc84 <_free_r>
 80104e0:	2300      	movs	r3, #0
 80104e2:	6363      	str	r3, [r4, #52]	; 0x34
 80104e4:	89a3      	ldrh	r3, [r4, #12]
 80104e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104ea:	81a3      	strh	r3, [r4, #12]
 80104ec:	2300      	movs	r3, #0
 80104ee:	6063      	str	r3, [r4, #4]
 80104f0:	6923      	ldr	r3, [r4, #16]
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	f043 0308 	orr.w	r3, r3, #8
 80104fa:	81a3      	strh	r3, [r4, #12]
 80104fc:	6923      	ldr	r3, [r4, #16]
 80104fe:	b94b      	cbnz	r3, 8010514 <__swsetup_r+0x7c>
 8010500:	89a3      	ldrh	r3, [r4, #12]
 8010502:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801050a:	d003      	beq.n	8010514 <__swsetup_r+0x7c>
 801050c:	4621      	mov	r1, r4
 801050e:	4628      	mov	r0, r5
 8010510:	f000 f884 	bl	801061c <__smakebuf_r>
 8010514:	89a0      	ldrh	r0, [r4, #12]
 8010516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801051a:	f010 0301 	ands.w	r3, r0, #1
 801051e:	d00a      	beq.n	8010536 <__swsetup_r+0x9e>
 8010520:	2300      	movs	r3, #0
 8010522:	60a3      	str	r3, [r4, #8]
 8010524:	6963      	ldr	r3, [r4, #20]
 8010526:	425b      	negs	r3, r3
 8010528:	61a3      	str	r3, [r4, #24]
 801052a:	6923      	ldr	r3, [r4, #16]
 801052c:	b943      	cbnz	r3, 8010540 <__swsetup_r+0xa8>
 801052e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010532:	d1c4      	bne.n	80104be <__swsetup_r+0x26>
 8010534:	bd38      	pop	{r3, r4, r5, pc}
 8010536:	0781      	lsls	r1, r0, #30
 8010538:	bf58      	it	pl
 801053a:	6963      	ldrpl	r3, [r4, #20]
 801053c:	60a3      	str	r3, [r4, #8]
 801053e:	e7f4      	b.n	801052a <__swsetup_r+0x92>
 8010540:	2000      	movs	r0, #0
 8010542:	e7f7      	b.n	8010534 <__swsetup_r+0x9c>
 8010544:	20000068 	.word	0x20000068

08010548 <_raise_r>:
 8010548:	291f      	cmp	r1, #31
 801054a:	b538      	push	{r3, r4, r5, lr}
 801054c:	4604      	mov	r4, r0
 801054e:	460d      	mov	r5, r1
 8010550:	d904      	bls.n	801055c <_raise_r+0x14>
 8010552:	2316      	movs	r3, #22
 8010554:	6003      	str	r3, [r0, #0]
 8010556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801055e:	b112      	cbz	r2, 8010566 <_raise_r+0x1e>
 8010560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010564:	b94b      	cbnz	r3, 801057a <_raise_r+0x32>
 8010566:	4620      	mov	r0, r4
 8010568:	f000 f830 	bl	80105cc <_getpid_r>
 801056c:	462a      	mov	r2, r5
 801056e:	4601      	mov	r1, r0
 8010570:	4620      	mov	r0, r4
 8010572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010576:	f000 b817 	b.w	80105a8 <_kill_r>
 801057a:	2b01      	cmp	r3, #1
 801057c:	d00a      	beq.n	8010594 <_raise_r+0x4c>
 801057e:	1c59      	adds	r1, r3, #1
 8010580:	d103      	bne.n	801058a <_raise_r+0x42>
 8010582:	2316      	movs	r3, #22
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	2001      	movs	r0, #1
 8010588:	e7e7      	b.n	801055a <_raise_r+0x12>
 801058a:	2400      	movs	r4, #0
 801058c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010590:	4628      	mov	r0, r5
 8010592:	4798      	blx	r3
 8010594:	2000      	movs	r0, #0
 8010596:	e7e0      	b.n	801055a <_raise_r+0x12>

08010598 <raise>:
 8010598:	4b02      	ldr	r3, [pc, #8]	; (80105a4 <raise+0xc>)
 801059a:	4601      	mov	r1, r0
 801059c:	6818      	ldr	r0, [r3, #0]
 801059e:	f7ff bfd3 	b.w	8010548 <_raise_r>
 80105a2:	bf00      	nop
 80105a4:	20000068 	.word	0x20000068

080105a8 <_kill_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4d07      	ldr	r5, [pc, #28]	; (80105c8 <_kill_r+0x20>)
 80105ac:	2300      	movs	r3, #0
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	4611      	mov	r1, r2
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	f7f1 fd77 	bl	80020a8 <_kill>
 80105ba:	1c43      	adds	r3, r0, #1
 80105bc:	d102      	bne.n	80105c4 <_kill_r+0x1c>
 80105be:	682b      	ldr	r3, [r5, #0]
 80105c0:	b103      	cbz	r3, 80105c4 <_kill_r+0x1c>
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	bd38      	pop	{r3, r4, r5, pc}
 80105c6:	bf00      	nop
 80105c8:	2000d6ec 	.word	0x2000d6ec

080105cc <_getpid_r>:
 80105cc:	f7f1 bd64 	b.w	8002098 <_getpid>

080105d0 <__swhatbuf_r>:
 80105d0:	b570      	push	{r4, r5, r6, lr}
 80105d2:	460c      	mov	r4, r1
 80105d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d8:	2900      	cmp	r1, #0
 80105da:	b096      	sub	sp, #88	; 0x58
 80105dc:	4615      	mov	r5, r2
 80105de:	461e      	mov	r6, r3
 80105e0:	da0d      	bge.n	80105fe <__swhatbuf_r+0x2e>
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80105e8:	f04f 0100 	mov.w	r1, #0
 80105ec:	bf0c      	ite	eq
 80105ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80105f2:	2340      	movne	r3, #64	; 0x40
 80105f4:	2000      	movs	r0, #0
 80105f6:	6031      	str	r1, [r6, #0]
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	b016      	add	sp, #88	; 0x58
 80105fc:	bd70      	pop	{r4, r5, r6, pc}
 80105fe:	466a      	mov	r2, sp
 8010600:	f000 f848 	bl	8010694 <_fstat_r>
 8010604:	2800      	cmp	r0, #0
 8010606:	dbec      	blt.n	80105e2 <__swhatbuf_r+0x12>
 8010608:	9901      	ldr	r1, [sp, #4]
 801060a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801060e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010612:	4259      	negs	r1, r3
 8010614:	4159      	adcs	r1, r3
 8010616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061a:	e7eb      	b.n	80105f4 <__swhatbuf_r+0x24>

0801061c <__smakebuf_r>:
 801061c:	898b      	ldrh	r3, [r1, #12]
 801061e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010620:	079d      	lsls	r5, r3, #30
 8010622:	4606      	mov	r6, r0
 8010624:	460c      	mov	r4, r1
 8010626:	d507      	bpl.n	8010638 <__smakebuf_r+0x1c>
 8010628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801062c:	6023      	str	r3, [r4, #0]
 801062e:	6123      	str	r3, [r4, #16]
 8010630:	2301      	movs	r3, #1
 8010632:	6163      	str	r3, [r4, #20]
 8010634:	b002      	add	sp, #8
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	ab01      	add	r3, sp, #4
 801063a:	466a      	mov	r2, sp
 801063c:	f7ff ffc8 	bl	80105d0 <__swhatbuf_r>
 8010640:	9900      	ldr	r1, [sp, #0]
 8010642:	4605      	mov	r5, r0
 8010644:	4630      	mov	r0, r6
 8010646:	f7fd fb91 	bl	800dd6c <_malloc_r>
 801064a:	b948      	cbnz	r0, 8010660 <__smakebuf_r+0x44>
 801064c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010650:	059a      	lsls	r2, r3, #22
 8010652:	d4ef      	bmi.n	8010634 <__smakebuf_r+0x18>
 8010654:	f023 0303 	bic.w	r3, r3, #3
 8010658:	f043 0302 	orr.w	r3, r3, #2
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	e7e3      	b.n	8010628 <__smakebuf_r+0xc>
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	6020      	str	r0, [r4, #0]
 8010664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010668:	81a3      	strh	r3, [r4, #12]
 801066a:	9b00      	ldr	r3, [sp, #0]
 801066c:	6163      	str	r3, [r4, #20]
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	6120      	str	r0, [r4, #16]
 8010672:	b15b      	cbz	r3, 801068c <__smakebuf_r+0x70>
 8010674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010678:	4630      	mov	r0, r6
 801067a:	f000 f81d 	bl	80106b8 <_isatty_r>
 801067e:	b128      	cbz	r0, 801068c <__smakebuf_r+0x70>
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	f023 0303 	bic.w	r3, r3, #3
 8010686:	f043 0301 	orr.w	r3, r3, #1
 801068a:	81a3      	strh	r3, [r4, #12]
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	431d      	orrs	r5, r3
 8010690:	81a5      	strh	r5, [r4, #12]
 8010692:	e7cf      	b.n	8010634 <__smakebuf_r+0x18>

08010694 <_fstat_r>:
 8010694:	b538      	push	{r3, r4, r5, lr}
 8010696:	4d07      	ldr	r5, [pc, #28]	; (80106b4 <_fstat_r+0x20>)
 8010698:	2300      	movs	r3, #0
 801069a:	4604      	mov	r4, r0
 801069c:	4608      	mov	r0, r1
 801069e:	4611      	mov	r1, r2
 80106a0:	602b      	str	r3, [r5, #0]
 80106a2:	f7f1 fd60 	bl	8002166 <_fstat>
 80106a6:	1c43      	adds	r3, r0, #1
 80106a8:	d102      	bne.n	80106b0 <_fstat_r+0x1c>
 80106aa:	682b      	ldr	r3, [r5, #0]
 80106ac:	b103      	cbz	r3, 80106b0 <_fstat_r+0x1c>
 80106ae:	6023      	str	r3, [r4, #0]
 80106b0:	bd38      	pop	{r3, r4, r5, pc}
 80106b2:	bf00      	nop
 80106b4:	2000d6ec 	.word	0x2000d6ec

080106b8 <_isatty_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	4d06      	ldr	r5, [pc, #24]	; (80106d4 <_isatty_r+0x1c>)
 80106bc:	2300      	movs	r3, #0
 80106be:	4604      	mov	r4, r0
 80106c0:	4608      	mov	r0, r1
 80106c2:	602b      	str	r3, [r5, #0]
 80106c4:	f7f1 fd5f 	bl	8002186 <_isatty>
 80106c8:	1c43      	adds	r3, r0, #1
 80106ca:	d102      	bne.n	80106d2 <_isatty_r+0x1a>
 80106cc:	682b      	ldr	r3, [r5, #0]
 80106ce:	b103      	cbz	r3, 80106d2 <_isatty_r+0x1a>
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	2000d6ec 	.word	0x2000d6ec

080106d8 <_init>:
 80106d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106da:	bf00      	nop
 80106dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106de:	bc08      	pop	{r3}
 80106e0:	469e      	mov	lr, r3
 80106e2:	4770      	bx	lr

080106e4 <_fini>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	bf00      	nop
 80106e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ea:	bc08      	pop	{r3}
 80106ec:	469e      	mov	lr, r3
 80106ee:	4770      	bx	lr
